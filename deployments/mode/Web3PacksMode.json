{
  "address": "0x33122B3a88eDCafF57bB9FFfE9573F88ad703931",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "weth",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "proton",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "nonfungiblePositionManager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "chargedParticles",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "chargedState",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "ContractNotAllowed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FundingFailed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "ethPackPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "protocolFee",
          "type": "uint256"
        }
      ],
      "name": "InsufficientForFee",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MismatchedTokens",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        }
      ],
      "name": "MissingLiquidityUUID",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NativeAssetTransferFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotOwnerOrApproved",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NullReceiver",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "router",
          "type": "address"
        }
      ],
      "name": "UnsucessfulSwap",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "chargedParticles",
          "type": "address"
        }
      ],
      "name": "ChargedParticlesSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "chargedState",
          "type": "address"
        }
      ],
      "name": "ChargedStateSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "PackBundled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "PackUnbundled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "ProtocolFeeSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "proton",
          "type": "address"
        }
      ],
      "name": "ProtonSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "router",
          "type": "address"
        }
      ],
      "name": "RouterSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "manager",
          "type": "address"
        }
      ],
      "name": "Web3PacksManagerSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "treasury",
          "type": "address"
        }
      ],
      "name": "Web3PacksTreasurySet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "WithdrawStuckERC1155",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "WithdrawStuckERC20",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "WithdrawStuckERC721",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "WithdrawStuckEther",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "tokenMetaUri",
          "type": "string"
        },
        {
          "components": [
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            },
            {
              "internalType": "address",
              "name": "contractAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            }
          ],
          "internalType": "struct IWeb3PacksDefs.ContractCallGeneric[]",
          "name": "contractCalls",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            },
            {
              "internalType": "address",
              "name": "router",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenIn",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenOut",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenAmountIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tokenAmountOutMin",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "payableAmountIn",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "liquidityUuid",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "poolId",
              "type": "bytes32"
            },
            {
              "internalType": "enum IWeb3PacksDefs.RouterType",
              "name": "routerType",
              "type": "uint8"
            }
          ],
          "internalType": "struct IWeb3PacksDefs.ERC20SwapOrderGeneric[]",
          "name": "erc20SwapOrders",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "router",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "token0",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "token1",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "liquidityUuidToken0",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "liquidityUuidToken1",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "percentToken0",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "percentToken1",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minimumLpTokens",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "slippage",
              "type": "uint256"
            },
            {
              "internalType": "int24",
              "name": "tickLower",
              "type": "int24"
            },
            {
              "internalType": "int24",
              "name": "tickUpper",
              "type": "int24"
            },
            {
              "internalType": "bool",
              "name": "stable",
              "type": "bool"
            },
            {
              "internalType": "bytes32",
              "name": "poolId",
              "type": "bytes32"
            },
            {
              "internalType": "enum IWeb3PacksDefs.RouterType",
              "name": "routerType",
              "type": "uint8"
            }
          ],
          "internalType": "struct IWeb3PacksDefs.LiquidityOrderGeneric[]",
          "name": "liquidityOrders",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "ERC20Timelock",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "ERC721Timelock",
              "type": "uint256"
            }
          ],
          "internalType": "struct IWeb3PacksDefs.LockState",
          "name": "lockState",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "ethPackPrice",
          "type": "uint256"
        }
      ],
      "name": "bundle",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "chargedParticles",
          "type": "address"
        }
      ],
      "name": "setChargedParticles",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "chargedState",
          "type": "address"
        }
      ],
      "name": "setChargedState",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "setProtocolFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "proton",
          "type": "address"
        }
      ],
      "name": "setProton",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "treasury",
          "type": "address"
        }
      ],
      "name": "setTreasury",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "manager",
          "type": "address"
        }
      ],
      "name": "setWeb3PacksManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "erc20s",
          "type": "address[]"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "tokenAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            }
          ],
          "internalType": "struct IWeb3PacksDefs.NFT[]",
          "name": "nfts",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "token",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IWeb3PacksDefs.TokenAmount",
              "name": "token0",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "token",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IWeb3PacksDefs.TokenAmount",
              "name": "token1",
              "type": "tuple"
            }
          ],
          "internalType": "struct IWeb3PacksDefs.TokenPairs[]",
          "name": "lps",
          "type": "tuple[]"
        }
      ],
      "name": "unbundle",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "walletManager",
          "type": "string"
        },
        {
          "internalType": "address[]",
          "name": "erc20s",
          "type": "address[]"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "tokenAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            }
          ],
          "internalType": "struct IWeb3PacksDefs.NFT[]",
          "name": "nfts",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "token",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IWeb3PacksDefs.TokenAmount",
              "name": "token0",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "token",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IWeb3PacksDefs.TokenAmount",
              "name": "token1",
              "type": "tuple"
            }
          ],
          "internalType": "struct IWeb3PacksDefs.TokenPairs[]",
          "name": "lps",
          "type": "tuple[]"
        }
      ],
      "name": "unbundleFromManager",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawERC1155",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "withdrawERC721",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawErc20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawEther",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x1fef8a7abe8efca5ddb940698fdd7e0da19191f82e533902cb37a457e90d90a7",
  "receipt": {
    "to": null,
    "from": "0xb8D175F16742395F530e0b3bC1d30BD06B78CdA9",
    "contractAddress": "0x33122B3a88eDCafF57bB9FFfE9573F88ad703931",
    "transactionIndex": 3,
    "gasUsed": "4882310",
    "logsBloom": "0x
    "blockHash": "0xba3a583d8849267aa53530e414bf83a5c2ad206594a3643509e093206952cb06",
    "transactionHash": "0x1fef8a7abe8efca5ddb940698fdd7e0da19191f82e533902cb37a457e90d90a7",
    "logs": [
      {
        "transactionIndex": 3,
        "blockNumber": 14168568,
        "transactionHash": "0x1fef8a7abe8efca5ddb940698fdd7e0da19191f82e533902cb37a457e90d90a7",
        "address": "0x33122B3a88eDCafF57bB9FFfE9573F88ad703931",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000b8d175f16742395f530e0b3bc1d30bd06b78cda9"
        ],
        "data": "0x",
        "logIndex": 6,
        "blockHash": "0xba3a583d8849267aa53530e414bf83a5c2ad206594a3643509e093206952cb06"
      }
    ],
    "blockNumber": 14168568,
    "cumulativeGasUsed": "6641273",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x4200000000000000000000000000000000000006",
    "0x76a5df1c6F53A4B80c8c8177edf52FBbC368E825",
    "0x2e8614625226D26180aDf6530C3b1677d3D7cf10",
    "0x0288280Df6221E7e9f23c1BB398c820ae0Aa6c10",
    "0x2691B4f4251408bA4b8bf9530B6961b9D0C1231F"
  ],
  "numDeployments": 2,
  "solcInputHash": "a2327d90cb787ca91da86ea6d3bc578a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"weth\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"proton\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nonfungiblePositionManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"chargedParticles\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"chargedState\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ContractNotAllowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FundingFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ethPackPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"protocolFee\",\"type\":\"uint256\"}],\"name\":\"InsufficientForFee\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MismatchedTokens\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"MissingLiquidityUUID\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NativeAssetTransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotOwnerOrApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NullReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"}],\"name\":\"UnsucessfulSwap\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"chargedParticles\",\"type\":\"address\"}],\"name\":\"ChargedParticlesSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"chargedState\",\"type\":\"address\"}],\"name\":\"ChargedStateSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"PackBundled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"PackUnbundled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"ProtocolFeeSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proton\",\"type\":\"address\"}],\"name\":\"ProtonSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"}],\"name\":\"RouterSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"}],\"name\":\"Web3PacksManagerSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"treasury\",\"type\":\"address\"}],\"name\":\"Web3PacksTreasurySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawStuckERC1155\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawStuckERC20\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"WithdrawStuckERC721\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawStuckEther\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"tokenMetaUri\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"internalType\":\"struct IWeb3PacksDefs.ContractCallGeneric[]\",\"name\":\"contractCalls\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payableAmountIn\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"liquidityUuid\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"internalType\":\"enum IWeb3PacksDefs.RouterType\",\"name\":\"routerType\",\"type\":\"uint8\"}],\"internalType\":\"struct IWeb3PacksDefs.ERC20SwapOrderGeneric[]\",\"name\":\"erc20SwapOrders\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"liquidityUuidToken0\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"liquidityUuidToken1\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"percentToken0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"percentToken1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimumLpTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slippage\",\"type\":\"uint256\"},{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"bool\",\"name\":\"stable\",\"type\":\"bool\"},{\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"internalType\":\"enum IWeb3PacksDefs.RouterType\",\"name\":\"routerType\",\"type\":\"uint8\"}],\"internalType\":\"struct IWeb3PacksDefs.LiquidityOrderGeneric[]\",\"name\":\"liquidityOrders\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"ERC20Timelock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ERC721Timelock\",\"type\":\"uint256\"}],\"internalType\":\"struct IWeb3PacksDefs.LockState\",\"name\":\"lockState\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"ethPackPrice\",\"type\":\"uint256\"}],\"name\":\"bundle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"chargedParticles\",\"type\":\"address\"}],\"name\":\"setChargedParticles\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"chargedState\",\"type\":\"address\"}],\"name\":\"setChargedState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"setProtocolFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"proton\",\"type\":\"address\"}],\"name\":\"setProton\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"treasury\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"}],\"name\":\"setWeb3PacksManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"erc20s\",\"type\":\"address[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"internalType\":\"struct IWeb3PacksDefs.NFT[]\",\"name\":\"nfts\",\"type\":\"tuple[]\"},{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct IWeb3PacksDefs.TokenAmount\",\"name\":\"token0\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct IWeb3PacksDefs.TokenAmount\",\"name\":\"token1\",\"type\":\"tuple\"}],\"internalType\":\"struct IWeb3PacksDefs.TokenPairs[]\",\"name\":\"lps\",\"type\":\"tuple[]\"}],\"name\":\"unbundle\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"walletManager\",\"type\":\"string\"},{\"internalType\":\"address[]\",\"name\":\"erc20s\",\"type\":\"address[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"internalType\":\"struct IWeb3PacksDefs.NFT[]\",\"name\":\"nfts\",\"type\":\"tuple[]\"},{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct IWeb3PacksDefs.TokenAmount\",\"name\":\"token0\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct IWeb3PacksDefs.TokenAmount\",\"name\":\"token1\",\"type\":\"tuple\"}],\"internalType\":\"struct IWeb3PacksDefs.TokenPairs[]\",\"name\":\"lps\",\"type\":\"tuple[]\"}],\"name\":\"unbundleFromManager\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawERC1155\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"withdrawERC721\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawErc20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawEther\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setChargedParticles(address)\":{\"details\":\"Setup the ChargedParticles Interface\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Web3PacksMode.sol\":\"Web3PacksMode\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x0849d93b16c9940beb286a7864ed02724b248b93e0d80ef6355af5ef15c64773\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x190dd6f8d592b7e4e930feb7f4313aeb8e1c4ad3154c27ce1cf6a512fc30d8cc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6392f2cfe3a5ee802227fe7a2dfd47096d881aec89bddd214b35c5b46d3cd941\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9b72f93be69ca894d8492c244259615c4a742afc8d63720dbc8bb81087d9b238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n}\\n\",\"keccak256\":\"0xe5905c0989cf5a865ed9bb7b9252536ca011c5b744017a82a7d4443b9c00a891\"},\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\",\"keccak256\":\"0x7c9bc70e5996c763e02ff38905282bc24fb242b0ef2519a003b36824fc524a4b\"},\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\":{\"content\":\"pragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\",\"keccak256\":\"0x8a3c5c449d4b7cd76513ed6995f4b86e4a86f222c770f8442f5fc128ce29b4d2\"},\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\":{\"content\":\"pragma solidity >=0.6.2;\\n\\nimport './IUniswapV2Router01.sol';\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\",\"keccak256\":\"0x744e30c133bd0f7ca9e7163433cf6d72f45c6bb1508c2c9c02f1a6db796ae59d\"},\"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.6.0;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\nlibrary TransferHelper {\\n    /// @notice Transfers tokens from the targeted address to the given destination\\n    /// @notice Errors with 'STF' if transfer fails\\n    /// @param token The contract address of the token to be transferred\\n    /// @param from The originating address from which the tokens will be transferred\\n    /// @param to The destination address of the transfer\\n    /// @param value The amount to be transferred\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) =\\n            token.call(abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'STF');\\n    }\\n\\n    /// @notice Transfers tokens from msg.sender to a recipient\\n    /// @dev Errors with ST if transfer fails\\n    /// @param token The contract address of the token which will be transferred\\n    /// @param to The recipient of the transfer\\n    /// @param value The value of the transfer\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.transfer.selector, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'ST');\\n    }\\n\\n    /// @notice Approves the stipulated contract to spend the given allowance in the given token\\n    /// @dev Errors with 'SA' if transfer fails\\n    /// @param token The contract address of the token to be approved\\n    /// @param to The target of the approval\\n    /// @param value The amount of the given token the target will be allowed to spend\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.approve.selector, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'SA');\\n    }\\n\\n    /// @notice Transfers ETH to the recipient address\\n    /// @dev Fails with `STE`\\n    /// @param to The destination of the transfer\\n    /// @param value The value to be transferred\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, 'STE');\\n    }\\n}\\n\",\"keccak256\":\"0x9af98b0908c96320ca6d08b22f0efca864742f6adbe5794cafe2d1d2e808b0cd\",\"license\":\"GPL-2.0-or-later\"},\"contracts/Web3PacksMode.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// Web3PacksMode.sol\\n// Copyright (c) 2023 Firma Lux, Inc. <https://charged.fi>\\n//\\n// Permission is hereby granted, free of charge, to any person obtaining a copy\\n// of this software and associated documentation files (the \\\"Software\\\"), to deal\\n// in the Software without restriction, including without limitation the rights\\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\n// copies of the Software, and to permit persons to whom the Software is\\n// furnished to do so, subject to the following conditions:\\n//\\n// The above copyright notice and this permission notice shall be included in all\\n// copies or substantial portions of the Software.\\n//\\n// THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n// FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n// SOFTWARE.\\n\\n//                _    ____                   _\\n//               | |  |___ \\\\                 | |\\n//  __      _____| |__  __) |_ __   __ _  ___| | _____\\n//  \\\\ \\\\ /\\\\ / / _ \\\\ '_ \\\\|__ <| '_ \\\\ / _` |/ __| |/ / __|\\n//   \\\\ V  V /  __/ |_) |__) | |_) | (_| | (__|   <\\\\__ \\\\\\n//    \\\\_/\\\\_/ \\\\___|_.__/____/| .__/ \\\\__,_|\\\\___|_|\\\\_\\\\___/\\n//                          | |\\n//                          |_|\\n\\npragma solidity 0.8.17;\\npragma abicoder v2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\\\";\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\\\";\\nimport \\\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\\\";\\nimport \\\"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\\\";\\nimport \\\"./lib/BlackholePrevention.sol\\\";\\nimport \\\"./interfaces/IWeb3Packs.sol\\\";\\nimport \\\"./interfaces/IWeb3PacksManager.sol\\\";\\nimport \\\"./interfaces/IVelodrome.sol\\\";\\nimport {IAsset, IBalancerV2Vault} from \\\"./interfaces/IBalancerV2Vault.sol\\\";\\nimport \\\"./interfaces/IChargedState.sol\\\";\\nimport \\\"./interfaces/INonfungiblePositionManager.sol\\\";\\nimport \\\"./interfaces/IChargedParticles.sol\\\";\\nimport \\\"./interfaces/IBaseProton.sol\\\";\\n\\ncontract Web3PacksMode is\\n  IWeb3Packs,\\n  Ownable,\\n  Pausable,\\n  BlackholePrevention,\\n  ReentrancyGuard\\n{\\n  address internal _weth;\\n  address internal _proton;\\n  address internal _web3PacksManager;\\n  address internal _nonfungiblePositionManager;\\n  address internal _chargedParticles;\\n  address internal _chargedState;\\n  address payable internal _treasury;\\n  uint256 internal _protocolFee;\\n\\n  // Charged Particles Wallet Managers\\n  string internal _cpWalletManager = \\\"generic.B\\\";\\n  string internal _cpBasketManager = \\\"generic.B\\\";\\n\\n  mapping (bytes32 => TokenAmount) internal _swapForLiquidityAmount;\\n\\n  // TODO: Refactor router handling for better scalability and maintainability\\n  // Consider using an array of routers in the constructor and removing the RouterType enum\\n  constructor(\\n    address weth,\\n    address proton,\\n    address nonfungiblePositionManager,\\n    address chargedParticles,\\n    address chargedState\\n  ) {\\n    _weth = weth;\\n    _proton = proton;\\n    _nonfungiblePositionManager = nonfungiblePositionManager;\\n    _chargedParticles = chargedParticles;\\n    _chargedState = chargedState;\\n  }\\n\\n\\n  /***********************************|\\n  |               Public              |\\n  |__________________________________*/\\n\\n  function bundle(\\n    string calldata tokenMetaUri,\\n    ContractCallGeneric[] calldata contractCalls,\\n    ERC20SwapOrderGeneric[] calldata erc20SwapOrders,\\n    LiquidityOrderGeneric[] calldata liquidityOrders,\\n    LockState calldata lockState,\\n    uint256 ethPackPrice\\n  )\\n    external\\n    whenNotPaused\\n    nonReentrant\\n    payable\\n    returns(uint256 tokenId)\\n  {\\n    _collectFees(ethPackPrice);\\n\\n    // Mint Web3Pack NFT\\n    tokenId = _createBasicProton(tokenMetaUri);\\n\\n    // Perform Generic Contract Calls before Bundling Assets\\n    _contractCalls(contractCalls);\\n\\n    // Perform Token Swaps owned by the Web3Pack NFT\\n    _swap(erc20SwapOrders,  tokenId);\\n\\n    // Create an LP position owned by the Web3Pack NFT\\n    _depositLiquidity(liquidityOrders, tokenId);\\n\\n    // Set the Timelock State\\n    _lock(lockState, tokenId);\\n\\n    // Transfer the Web3Packs NFT to the Buyer\\n    IBaseProton(_proton).safeTransferFrom(address(this), _msgSender(), tokenId);\\n\\n    emit PackBundled(tokenId, _msgSender());\\n  }\\n\\n  function unbundle(\\n    address receiver,\\n    address tokenAddress,\\n    uint256 tokenId,\\n    address[] calldata erc20s,\\n    NFT[] calldata nfts,\\n    TokenPairs[] calldata lps\\n  )\\n    external\\n    payable\\n    whenNotPaused\\n    nonReentrant\\n  {\\n    _collectFees(0);\\n    _unbundle(\\n      receiver,\\n      tokenAddress,\\n      tokenId,\\n      _cpWalletManager,\\n      erc20s,\\n      nfts,\\n      lps\\n    );\\n    emit PackUnbundled(tokenId, receiver);\\n  }\\n\\n  function unbundleFromManager(\\n    address receiver,\\n    address tokenAddress,\\n    uint256 tokenId,\\n    string calldata walletManager,\\n    address[] calldata erc20s,\\n    NFT[] calldata nfts,\\n    TokenPairs[] calldata lps\\n  )\\n    external\\n    payable\\n    whenNotPaused\\n    nonReentrant\\n  {\\n    _collectFees(0);\\n    _unbundle(\\n      receiver,\\n      tokenAddress,\\n      tokenId,\\n      walletManager,\\n      erc20s,\\n      nfts,\\n      lps\\n    );\\n    emit PackUnbundled(tokenId, receiver);\\n  }\\n\\n  /***********************************|\\n  |         Private Functions         |\\n  |__________________________________*/\\n\\n  function _contractCalls(\\n    ContractCallGeneric[] calldata contractCalls\\n  )\\n    internal\\n    virtual\\n  {\\n    for (uint256 i; i < contractCalls.length; i++) {\\n      _contractCall(contractCalls[i]);\\n    }\\n  }\\n\\n  function _swap(\\n    ERC20SwapOrderGeneric[] calldata orders,\\n    uint256 web3packsTokenId\\n  )\\n    internal\\n    virtual\\n  {\\n    for (uint256 i; i < orders.length; i++) {\\n      _swapSingleOrder(orders[i], web3packsTokenId);\\n    }\\n  }\\n\\n  function _depositLiquidity(\\n    LiquidityOrderGeneric[] calldata orders,\\n    uint256 web3packsTokenId\\n  )\\n    internal\\n    virtual\\n  {\\n    for (uint256 i; i < orders.length; i++) {\\n      _createLiquidityPosition(orders[i], web3packsTokenId);\\n    }\\n  }\\n\\n  function _createBasicProton(\\n    string memory tokenMetadataUri\\n  )\\n    internal\\n    returns (uint256 mintedTokenId)\\n  {\\n    // Mint Web3Packs NFT (Charged-Particles ProtonC)\\n    mintedTokenId = IBaseProton(_proton).createBasicProton(\\n      address(this),\\n      address(this),\\n      tokenMetadataUri\\n    );\\n  }\\n\\n  function _bond(\\n    address contractAddress,\\n    uint256 tokenId,\\n    string memory basketManagerId,\\n    address nftTokenAddress,\\n    uint256 mintedTokenId\\n  )\\n    internal\\n  {\\n    // permission\\n    IERC721(nftTokenAddress).setApprovalForAll(_chargedParticles, true);\\n\\n    IChargedParticles(_chargedParticles).covalentBond(\\n      contractAddress,\\n      tokenId,\\n      basketManagerId,\\n      nftTokenAddress,\\n      mintedTokenId,\\n      1\\n    );\\n  }\\n\\n  function _energize(\\n    uint256 tokenId,\\n    address tokenAddress,\\n    uint256 tokenAmount\\n  )\\n   internal\\n  {\\n    if (tokenAmount == 0) {\\n      tokenAmount = IERC20(tokenAddress).balanceOf(address(this));\\n    }\\n\\n    TransferHelper.safeApprove(\\n      tokenAddress,\\n      address(_chargedParticles),\\n      tokenAmount\\n    );\\n\\n    IChargedParticles(_chargedParticles).energizeParticle(\\n      _proton,\\n      tokenId,\\n      _cpWalletManager,\\n      tokenAddress,\\n      tokenAmount,\\n      address(this)\\n    );\\n  }\\n\\n  function _unbundle(\\n    address receiver,\\n    address tokenAddress,\\n    uint256 tokenId,\\n    string memory walletManager,\\n    address[] memory erc20s,\\n    NFT[] memory nfts,\\n    TokenPairs[] memory lps\\n  )\\n    internal\\n  {\\n    // Verify Ownership\\n    address owner = IERC721(tokenAddress).ownerOf(tokenId);\\n    if (_msgSender() != owner) {\\n      revert NotOwnerOrApproved();\\n    }\\n\\n    for (uint256 i; i < erc20s.length; i++) {\\n      if (erc20s[i] != address(0)) {\\n        IChargedParticles(_chargedParticles).releaseParticle(\\n          receiver,\\n          tokenAddress,\\n          tokenId,\\n          walletManager,\\n          erc20s[i]\\n        );\\n      }\\n    }\\n\\n    for (uint256 i; i < nfts.length; i++) {\\n      if (nfts[i].tokenAddress != address(0)) {\\n        IChargedParticles(_chargedParticles).breakCovalentBond(\\n          receiver,\\n          tokenAddress,\\n          tokenId,\\n          walletManager,\\n          nfts[i].tokenAddress,\\n          nfts[i].id,\\n          1\\n        );\\n      }\\n    }\\n\\n    // Remove all Liquidity Positions\\n    _removeLiquidityPositions(tokenId, receiver, lps);\\n  }\\n\\n  function _contractCall(\\n    ContractCallGeneric memory contractCall\\n  ) internal {\\n    _requireAllowlisted(contractCall.contractAddress);\\n\\n    (bool success, bytes memory data ) = contractCall.contractAddress.call{value: contractCall.amountIn}(\\n      contractCall.callData\\n    );\\n    if (!success) {\\n      assembly {\\n        let dataSize := mload(data) // Load the size of the data\\n        let dataPtr := add(data, 0x20) // Advance data pointer to the next word\\n        revert(dataPtr, dataSize) // Revert with the given data\\n      }\\n    }\\n  }\\n\\n  function _swapSingleOrder(\\n    ERC20SwapOrderGeneric memory swapOrder,\\n    uint256 web3packsTokenId\\n  )\\n    internal\\n    returns (uint256 amountOut)\\n  {\\n    _requireAllowlisted(swapOrder.router);\\n\\n    TransferHelper.safeApprove(swapOrder.tokenIn, swapOrder.router, swapOrder.tokenAmountIn);\\n\\n    if (swapOrder.routerType == RouterType.Balancer) {\\n      IBalancerV2Vault.SingleSwap memory swapData = IBalancerV2Vault.SingleSwap({\\n        poolId: swapOrder.poolId,\\n        kind: IBalancerV2Vault.SwapKind.GIVEN_IN,\\n        assetIn: IAsset(swapOrder.tokenIn),\\n        assetOut: IAsset(swapOrder.tokenOut),\\n        amount: swapOrder.tokenAmountIn,\\n        userData: bytes(\\\"\\\")\\n      });\\n\\n      IBalancerV2Vault.FundManagement memory fundData = IBalancerV2Vault.FundManagement({\\n          sender: address(this),\\n          fromInternalBalance: false,\\n          recipient: payable(address(this)),\\n          toInternalBalance: false\\n      });\\n      amountOut = IBalancerV2Vault(swapOrder.router).swap(swapData, fundData, swapOrder.tokenAmountOutMin, block.timestamp);\\n\\n    } else {\\n      (bool success, bytes memory data ) = swapOrder.router.call{value: swapOrder.payableAmountIn}(\\n        swapOrder.callData\\n      );\\n      if (!success) {\\n        assembly {\\n          let dataSize := mload(data) // Load the size of the data\\n          let dataPtr := add(data, 0x20) // Advance data pointer to the next word\\n          revert(dataPtr, dataSize) // Revert with the given data\\n        }\\n      }\\n\\n      if (swapOrder.routerType == RouterType.UniswapV2 || swapOrder.routerType == RouterType.Velodrome) {\\n        uint[] memory amounts = abi.decode(data, (uint[]));\\n        amountOut = amounts[amounts.length-1];\\n      }\\n\\n      if (swapOrder.routerType == RouterType.UniswapV3) {\\n        amountOut = abi.decode(data, (uint256));\\n      }\\n    }\\n\\n    // Deposit the Assets into the Web3Packs NFT\\n    if (swapOrder.liquidityUuid == bytes32(\\\"\\\")) {\\n      _energize(web3packsTokenId, swapOrder.tokenOut, amountOut);\\n    } else {\\n      _swapForLiquidityAmount[swapOrder.liquidityUuid] = TokenAmount({token: swapOrder.tokenOut, amount: amountOut});\\n    }\\n  }\\n\\n  function _createLiquidityPosition(\\n    LiquidityOrderGeneric memory liquidityOrder,\\n    uint256 web3packsTokenId\\n  ) internal {\\n    _requireAllowlisted(liquidityOrder.router);\\n\\n    uint256 wethBalance = IERC20(_weth).balanceOf(address(this));\\n    uint256 balanceAmount0;\\n    uint256 balanceAmount1;\\n\\n    uint256 lpTokenId;\\n    uint256 liquidity;\\n    uint256 amount0;\\n    uint256 amount1;\\n\\n    if (liquidityOrder.liquidityUuidToken0 == bytes32(\\\"\\\")) revert MissingLiquidityUUID(liquidityOrder.token0);\\n    if (liquidityOrder.liquidityUuidToken0 != bytes32(\\\"WETH\\\")) {\\n      if (liquidityOrder.token0 != _swapForLiquidityAmount[liquidityOrder.liquidityUuidToken0].token) revert MismatchedTokens();\\n      balanceAmount0 = _swapForLiquidityAmount[liquidityOrder.liquidityUuidToken0].amount;\\n      delete _swapForLiquidityAmount[liquidityOrder.liquidityUuidToken0];\\n    } else {\\n      balanceAmount0 = wethBalance;\\n    }\\n\\n    if (liquidityOrder.liquidityUuidToken1 == bytes32(\\\"\\\")) revert MissingLiquidityUUID(liquidityOrder.token1);\\n    if (liquidityOrder.liquidityUuidToken1 != bytes32(\\\"WETH\\\")) {\\n      if (liquidityOrder.token1 != _swapForLiquidityAmount[liquidityOrder.liquidityUuidToken1].token) revert MismatchedTokens();\\n      balanceAmount1 = _swapForLiquidityAmount[liquidityOrder.liquidityUuidToken1].amount;\\n      delete _swapForLiquidityAmount[liquidityOrder.liquidityUuidToken1];\\n    } else {\\n      balanceAmount1 = wethBalance;\\n    }\\n\\n    balanceAmount0 = (balanceAmount0 * liquidityOrder.percentToken0) / 10000;\\n    balanceAmount1 = (balanceAmount1 * liquidityOrder.percentToken1) / 10000;\\n\\n    uint256 amount0Min = (balanceAmount0 * (10000 - liquidityOrder.slippage)) / 10000;\\n    uint256 amount1Min = (balanceAmount1 * (10000 - liquidityOrder.slippage)) / 10000;\\n\\n    if (liquidityOrder.routerType == RouterType.UniswapV3) {\\n      TransferHelper.safeApprove(liquidityOrder.token0, _nonfungiblePositionManager, balanceAmount0);\\n      TransferHelper.safeApprove(liquidityOrder.token1, _nonfungiblePositionManager, balanceAmount1);\\n    } else {\\n      TransferHelper.safeApprove(liquidityOrder.token0, address(liquidityOrder.router), balanceAmount0);\\n      TransferHelper.safeApprove(liquidityOrder.token1, address(liquidityOrder.router), balanceAmount1);\\n    }\\n\\n    if (liquidityOrder.routerType == RouterType.Balancer) {\\n      (lpTokenId, liquidity, amount0, amount1) = _createBalancerPosition(liquidityOrder, web3packsTokenId, balanceAmount0, balanceAmount1);\\n    }\\n\\n    if (liquidityOrder.routerType == RouterType.Velodrome) {\\n      (lpTokenId, liquidity, amount0, amount1) = _createVelodromePosition(liquidityOrder, web3packsTokenId, balanceAmount0, balanceAmount1, amount0Min, amount1Min);\\n    }\\n\\n    if (liquidityOrder.routerType == RouterType.UniswapV2) {\\n      (lpTokenId, liquidity, amount0, amount1) = _createUniswapV2Position(liquidityOrder, web3packsTokenId, balanceAmount0, balanceAmount1, amount0Min, amount1Min);\\n    }\\n\\n    if (liquidityOrder.routerType == RouterType.UniswapV3) {\\n      (lpTokenId, liquidity, amount0, amount1) = _createUniswapV3Position(liquidityOrder, web3packsTokenId, balanceAmount0, balanceAmount1, amount0Min, amount1Min);\\n    }\\n\\n    // Track Liquidity Positions\\n    LiquidityPosition memory position = LiquidityPosition({\\n      lpTokenId: lpTokenId,\\n      liquidity: liquidity,\\n      stable: liquidityOrder.stable,\\n      token0: liquidityOrder.token0,\\n      token1: liquidityOrder.token1,\\n      poolId: liquidityOrder.poolId,\\n      routerType: liquidityOrder.routerType,\\n      router: liquidityOrder.router\\n    });\\n    IWeb3PacksManager(_web3PacksManager).saveLiquidityPosition(web3packsTokenId, position);\\n\\n    // Refund unused assets\\n    _refundUnusedAssets(\\n      liquidityOrder.token0,\\n      amount0,\\n      balanceAmount0,\\n      liquidityOrder.token1,\\n      amount1,\\n      balanceAmount1\\n    );\\n  }\\n\\n  function _createBalancerPosition(\\n    LiquidityOrderGeneric memory liquidityOrder,\\n    uint256 web3packsTokenId,\\n    uint256 balanceAmount0,\\n    uint256 balanceAmount1\\n  ) internal returns (\\n    uint256 lpTokenId,\\n    uint256 liquidity,\\n    uint256 amount0,\\n    uint256 amount1\\n  ) {\\n      (address poolAddress, ) = IBalancerV2Vault(liquidityOrder.router).getPool(liquidityOrder.poolId);\\n\\n      IAsset[] memory assets = new IAsset[](2);\\n      assets[0] = IAsset(liquidityOrder.token0);\\n      assets[1] = IAsset(liquidityOrder.token1);\\n\\n      uint256[] memory amounts = new uint256[](2);\\n      amounts[0] = balanceAmount0;\\n      amounts[1] = balanceAmount1;\\n\\n      // Add Liquidity\\n      bytes memory userData = abi.encode(IBalancerV2Vault.JoinKind.EXACT_TOKENS_IN_FOR_BPT_OUT, amounts, liquidityOrder.minimumLpTokens);\\n      IBalancerV2Vault.JoinPoolRequest memory joinData = IBalancerV2Vault.JoinPoolRequest({\\n        assets: assets,\\n        maxAmountsIn: amounts,\\n        userData: userData,\\n        fromInternalBalance: false\\n      });\\n      IBalancerV2Vault(liquidityOrder.router).joinPool(liquidityOrder.poolId, address(this), address(this), joinData);\\n\\n      lpTokenId = uint256(uint160(poolAddress));\\n      liquidity = IERC20(poolAddress).balanceOf(address(this));\\n      amount0 = balanceAmount0 - IERC20(liquidityOrder.token0).balanceOf(address(this));\\n      amount1 = balanceAmount1 - IERC20(liquidityOrder.token1).balanceOf(address(this));\\n\\n      // Deposit the LP tokens into the Web3Packs NFT\\n      _energize(web3packsTokenId, poolAddress, liquidity);\\n  }\\n\\n  function _createVelodromePosition(\\n    LiquidityOrderGeneric memory liquidityOrder,\\n    uint256 web3packsTokenId,\\n    uint256 balanceAmount0,\\n    uint256 balanceAmount1,\\n    uint256 minAmount0,\\n    uint256 minAmount1\\n  ) internal returns (\\n    uint256 lpTokenId,\\n    uint256 liquidity,\\n    uint256 amount0,\\n    uint256 amount1\\n  ) {\\n      // Add Liquidity\\n      (amount0, amount1, liquidity) = IVelodrome(liquidityOrder.router).addLiquidity(\\n        liquidityOrder.token0,\\n        liquidityOrder.token1,\\n        liquidityOrder.stable,\\n        balanceAmount0,\\n        balanceAmount1,\\n        minAmount0,\\n        minAmount1,\\n        address(this),\\n        block.timestamp\\n      );\\n\\n      // Deposit the LP tokens into the Web3Packs NFT\\n      address lpTokenAddress = _getUniswapV2PairAddress(liquidityOrder.routerType, liquidityOrder.router, liquidityOrder.token0, liquidityOrder.token1);\\n      lpTokenId = uint256(uint160(lpTokenAddress));\\n      _energize(web3packsTokenId, lpTokenAddress, 0);\\n  }\\n\\n  function _createUniswapV2Position(\\n    LiquidityOrderGeneric memory liquidityOrder,\\n    uint256 web3packsTokenId,\\n    uint256 balanceAmount0,\\n    uint256 balanceAmount1,\\n    uint256 minAmount0,\\n    uint256 minAmount1\\n  ) internal returns (\\n    uint256 lpTokenId,\\n    uint256 liquidity,\\n    uint256 amount0,\\n    uint256 amount1\\n  ) {\\n      // Add Liquidity\\n      (amount0, amount1, liquidity) = IUniswapV2Router02(liquidityOrder.router).addLiquidity(\\n        liquidityOrder.token0,\\n        liquidityOrder.token1,\\n        balanceAmount0,\\n        balanceAmount1,\\n        minAmount0,\\n        minAmount1,\\n        address(this),\\n        block.timestamp\\n      );\\n\\n      // Deposit the LP tokens into the Web3Packs NFT\\n      address lpTokenAddress = _getUniswapV2PairAddress(liquidityOrder.routerType, liquidityOrder.router, liquidityOrder.token0, liquidityOrder.token1);\\n      lpTokenId = uint256(uint160(lpTokenAddress));\\n      _energize(web3packsTokenId, lpTokenAddress, 0);\\n  }\\n\\n  function _createUniswapV3Position(\\n    LiquidityOrderGeneric memory liquidityOrder,\\n    uint256 web3packsTokenId,\\n    uint256 balanceAmount0,\\n    uint256 balanceAmount1,\\n    uint256 minAmount0,\\n    uint256 minAmount1\\n  ) internal returns (\\n    uint256 lpTokenId,\\n    uint256 liquidity,\\n    uint256 amount0,\\n    uint256 amount1\\n  ) {\\n      // Add Liquidity\\n      INonfungiblePositionManager.MintParams memory params =\\n        INonfungiblePositionManager.MintParams({\\n          token0: liquidityOrder.token0,\\n          token1: liquidityOrder.token1,\\n          tickLower: liquidityOrder.tickLower,\\n          tickUpper: liquidityOrder.tickUpper,\\n          amount0Desired: balanceAmount0,\\n          amount1Desired: balanceAmount1,\\n          amount0Min: minAmount0,\\n          amount1Min: minAmount1,\\n          recipient: address(this),\\n          deadline: block.timestamp\\n        });\\n      (lpTokenId, liquidity, amount0, amount1) = INonfungiblePositionManager(_nonfungiblePositionManager).mint(params);\\n\\n      // Deposit the LP NFT into the Web3Packs NFT\\n      _bond(_proton, web3packsTokenId, _cpBasketManager, _nonfungiblePositionManager, lpTokenId);\\n  }\\n\\n  function _removeLiquidityPositions(\\n    uint256 web3packsTokenId,\\n    address receiver,\\n    TokenPairs[] memory lps\\n  ) internal {\\n    uint amount0;\\n    uint amount1;\\n\\n    LiquidityPosition[] memory positions = IWeb3PacksManager(_web3PacksManager).getLiquidityPositions(web3packsTokenId);\\n    for (uint256 i; i < positions.length; i++) {\\n      LiquidityPosition memory lp = positions[i];\\n      TokenPairs memory amountsOutMin = lps[i];\\n\\n      _pullLiquidityTokens(lp, web3packsTokenId);\\n\\n      // Remove All Liquidity\\n      //  - must be done before collectLpFees as the removed liquidity\\n      //    is only returned through INonfungiblePositionManager.collect()\\n      (amount0, amount1) = _removeLiquidity(lp, amountsOutMin);\\n\\n      // Collect Fees\\n      if (lp.routerType == RouterType.UniswapV3) {\\n        (amount0, amount1) = _collectLpFees(lp);\\n      }\\n\\n      // Send to Receiver\\n      TransferHelper.safeTransfer(lp.token0, receiver, amount0);\\n      TransferHelper.safeTransfer(lp.token1, receiver, amount1);\\n    }\\n    IWeb3PacksManager(_web3PacksManager).clearLiquidityPositions(web3packsTokenId);\\n  }\\n\\n  function _collectLpFees(\\n    LiquidityPosition memory liquidityPosition\\n  )\\n    internal\\n    returns (uint256 amount0, uint256 amount1)\\n  {\\n    INonfungiblePositionManager.CollectParams memory params =\\n      INonfungiblePositionManager.CollectParams({\\n        tokenId: liquidityPosition.lpTokenId,\\n        recipient: address(this),\\n        amount0Max: type(uint128).max,\\n        amount1Max: type(uint128).max\\n      });\\n\\n    (amount0, amount1) = INonfungiblePositionManager(_nonfungiblePositionManager).collect(params);\\n  }\\n\\n  function _removeLiquidity(\\n    LiquidityPosition memory liquidityPosition,\\n    TokenPairs memory amountsOutMin\\n  )\\n    internal\\n    returns (uint amount0, uint amount1)\\n  {\\n    if (liquidityPosition.routerType == RouterType.Balancer) {\\n      (address poolAddress, ) = IBalancerV2Vault(liquidityPosition.router).getPool(liquidityPosition.poolId);\\n\\n      IAsset[] memory assets = new IAsset[](2);\\n      assets[0] = IAsset(liquidityPosition.token0);\\n      assets[1] = IAsset(liquidityPosition.token1);\\n\\n      uint256[] memory amounts = new uint256[](2);\\n      amounts[0] = amountsOutMin.token0.amount;\\n      amounts[1] = amountsOutMin.token1.amount;\\n\\n      TransferHelper.safeApprove(\\n        poolAddress,\\n        liquidityPosition.router,\\n        liquidityPosition.liquidity\\n      );\\n\\n      // Remove Liquidity\\n      bytes memory userData = abi.encode(IBalancerV2Vault.ExitKind.EXACT_BPT_IN_FOR_TOKENS_OUT, liquidityPosition.liquidity);\\n      IBalancerV2Vault.ExitPoolRequest memory exitData = IBalancerV2Vault.ExitPoolRequest({\\n        assets: assets,\\n        minAmountsOut: amounts,\\n        userData: userData,\\n        toInternalBalance: false\\n      });\\n      IBalancerV2Vault(liquidityPosition.router).exitPool(liquidityPosition.poolId, address(this), payable(address(this)), exitData);\\n\\n      amount0 = IERC20(liquidityPosition.token0).balanceOf(address(this));\\n      amount1 = IERC20(liquidityPosition.token1).balanceOf(address(this));\\n    }\\n\\n    if (liquidityPosition.routerType == RouterType.Velodrome) {\\n      address lpTokenAddress = _getUniswapV2PairAddress(liquidityPosition.routerType, liquidityPosition.router, liquidityPosition.token0, liquidityPosition.token1);\\n\\n      TransferHelper.safeApprove(\\n        lpTokenAddress,\\n        liquidityPosition.router,\\n        liquidityPosition.liquidity\\n      );\\n\\n      (amount0, amount1) = IVelodrome(liquidityPosition.router).removeLiquidity(\\n        liquidityPosition.token0,\\n        liquidityPosition.token1,\\n        liquidityPosition.stable,\\n        liquidityPosition.liquidity,\\n        amountsOutMin.token0.amount,\\n        amountsOutMin.token1.amount,\\n        address(this),\\n        block.timestamp\\n      );\\n    }\\n\\n    if (liquidityPosition.routerType == RouterType.UniswapV2) {\\n      address lpTokenAddress = _getUniswapV2PairAddress(liquidityPosition.routerType, liquidityPosition.router, liquidityPosition.token0, liquidityPosition.token1);\\n\\n      TransferHelper.safeApprove(\\n        lpTokenAddress,\\n        liquidityPosition.router,\\n        liquidityPosition.liquidity\\n      );\\n\\n      (amount0, amount1) = IUniswapV2Router02(liquidityPosition.router).removeLiquidity(\\n        liquidityPosition.token0,\\n        liquidityPosition.token1,\\n        liquidityPosition.liquidity,\\n        amountsOutMin.token0.amount,\\n        amountsOutMin.token1.amount,\\n        address(this),\\n        block.timestamp\\n      );\\n    }\\n\\n    if (liquidityPosition.routerType == RouterType.UniswapV3) {\\n      // Release Liquidity\\n      INonfungiblePositionManager.DecreaseLiquidityParams memory params =\\n        INonfungiblePositionManager.DecreaseLiquidityParams({\\n          tokenId: liquidityPosition.lpTokenId,\\n          liquidity: uint128(liquidityPosition.liquidity),\\n          amount0Min: amountsOutMin.token0.amount,\\n          amount1Min: amountsOutMin.token1.amount,\\n          deadline: block.timestamp\\n        });\\n      (amount0, amount1) = INonfungiblePositionManager(_nonfungiblePositionManager).decreaseLiquidity(params);\\n    }\\n  }\\n\\n  function _pullLiquidityTokens(\\n    LiquidityPosition memory liquidityPosition,\\n    uint256 web3packsTokenId\\n  )\\n    internal\\n  {\\n    if (liquidityPosition.routerType == RouterType.Balancer) {\\n      // Grab Liquidity Tokens from Web3 Pack\\n      (address poolAddress, ) = IBalancerV2Vault(liquidityPosition.router).getPool(liquidityPosition.poolId);\\n      IChargedParticles(_chargedParticles).releaseParticle(\\n        address(this),\\n        _proton,\\n        web3packsTokenId,\\n        _cpBasketManager,\\n        poolAddress\\n      );\\n    }\\n\\n    if (liquidityPosition.routerType == RouterType.UniswapV2 || liquidityPosition.routerType == RouterType.Velodrome) {\\n      // Grab Liquidity Tokens from Web3 Pack\\n      address lpTokenAddress = _getUniswapV2PairAddress(liquidityPosition.routerType, liquidityPosition.router, liquidityPosition.token0, liquidityPosition.token1);\\n      IChargedParticles(_chargedParticles).releaseParticle(\\n        address(this),\\n        _proton,\\n        web3packsTokenId,\\n        _cpBasketManager,\\n        lpTokenAddress\\n      );\\n    }\\n\\n    if (liquidityPosition.routerType == RouterType.UniswapV3) {\\n      // Grab LP NFT From Web3 Pack\\n      IChargedParticles(_chargedParticles).breakCovalentBond(\\n        address(this),\\n        _proton,\\n        web3packsTokenId,\\n        _cpBasketManager,\\n        _nonfungiblePositionManager,\\n        liquidityPosition.lpTokenId,\\n        1\\n      );\\n    }\\n  }\\n\\n  function _lock (\\n    LockState calldata lockState,\\n    uint256 tokenId\\n  )\\n    private\\n  {\\n\\n    if(lockState.ERC20Timelock > 0) {\\n      IChargedState(_chargedState).setReleaseTimelock(\\n        _proton,\\n        tokenId,\\n        lockState.ERC20Timelock\\n      );\\n    }\\n\\n    if(lockState.ERC721Timelock > 0) {\\n      IChargedState(_chargedState).setBreakBondTimelock(\\n        _proton,\\n        tokenId,\\n        lockState.ERC721Timelock\\n      );\\n    }\\n  }\\n\\n  function _refundUnusedAssets(\\n    address token0,\\n    uint256 amount0,\\n    uint256 amount0ToMint,\\n    address token1,\\n    uint256 amount1,\\n    uint256 amount1ToMint\\n  ) private {\\n    // Remove allowance and refund in both assets.\\n    if (amount0 < amount0ToMint) {\\n        TransferHelper.safeApprove(token0, address(_nonfungiblePositionManager), 0); // Remove approval\\n        uint256 refund0 = amount0ToMint - amount0;\\n        TransferHelper.safeTransfer(token0, _msgSender(), refund0);\\n    }\\n\\n    if (amount1 < amount1ToMint) {\\n        TransferHelper.safeApprove(token1, address(_nonfungiblePositionManager), 0); // Remove approval\\n        uint256 refund1 = amount1ToMint - amount1;\\n        TransferHelper.safeTransfer(token1, _msgSender(), refund1);\\n    }\\n  }\\n\\n  function _requireAllowlisted(address contractAddress) internal {\\n    if (!IWeb3PacksManager(_web3PacksManager).isContractAllowed(contractAddress)) {\\n      revert ContractNotAllowed();\\n    }\\n  }\\n\\n  function _collectFees(uint256 excludedAmount) internal {\\n    // Track Collected Fees\\n    if (_protocolFee > 0 && msg.value < (_protocolFee + excludedAmount)) {\\n      revert InsufficientForFee(msg.value, excludedAmount, _protocolFee);\\n    }\\n    uint256 fees = msg.value - excludedAmount;\\n    (bool sent, ) = _treasury.call{value: fees}(\\\"\\\");\\n    require(sent, \\\"Failed to send fees to Treasury\\\");\\n  }\\n\\n  /***********************************|\\n  |     Router-specific Functions     |\\n  |__________________________________*/\\n\\n  function _getUniswapV2Factory(address router) private pure returns (address) {\\n    IUniswapV2Router02 _router = IUniswapV2Router02(router);\\n    return _router.factory();\\n  }\\n\\n  function _getUniswapV2PairAddress(RouterType routerType, address router, address token0, address token1) private view returns (address) {\\n    if (routerType == RouterType.Velodrome) {\\n      return IVelodrome(router).poolFor(token0, token1, false);\\n    } else { // UniswapV2\\n      IUniswapV2Factory _factory = IUniswapV2Factory(_getUniswapV2Factory(router));\\n      return _factory.getPair(token0, token1);\\n    }\\n  }\\n\\n\\n  /***********************************|\\n  |          Only Admin/DAO           |\\n  |__________________________________*/\\n\\n  /**\\n    * @dev Setup the ChargedParticles Interface\\n  */\\n  function setChargedParticles(address chargedParticles) external onlyOwner {\\n    require(chargedParticles != address(0), \\\"Invalid address for chargedParticles\\\");\\n    _chargedParticles = chargedParticles;\\n    emit ChargedParticlesSet(chargedParticles);\\n  }\\n\\n  function setChargedState(address chargedState) external onlyOwner {\\n    require(chargedState != address(0), \\\"Invalid address for chargedState\\\");\\n    _chargedParticles = chargedState;\\n    emit ChargedStateSet(chargedState);\\n  }\\n\\n  function setWeb3PacksManager(address manager) external onlyOwner {\\n    require(manager != address(0), \\\"Invalid address for manager\\\");\\n    _web3PacksManager = manager;\\n    emit Web3PacksManagerSet(manager);\\n  }\\n\\n  function setTreasury(address payable treasury) external onlyOwner {\\n    require(treasury != address(0), \\\"Invalid address for treasury\\\");\\n    _treasury = treasury;\\n    emit Web3PacksTreasurySet(treasury);\\n  }\\n\\n  function setProton(address proton) external onlyOwner {\\n    require(proton != address(0), \\\"Invalid address for proton\\\");\\n    _proton = proton;\\n    emit ProtonSet(proton);\\n  }\\n\\n  function setProtocolFee(uint256 fee) external onlyOwner {\\n    _protocolFee = fee;\\n    emit ProtocolFeeSet(fee);\\n  }\\n\\n  function pause() public onlyOwner {\\n    _pause();\\n  }\\n\\n  function unpause() public onlyOwner {\\n    _unpause();\\n  }\\n\\n\\n  /***********************************|\\n  |          Only Admin/DAO           |\\n  |      (blackhole prevention)       |\\n  |__________________________________*/\\n\\n  function withdrawEther(address payable receiver, uint256 amount) external virtual onlyOwner {\\n    _withdrawEther(receiver, amount);\\n  }\\n\\n  function withdrawErc20(address payable receiver, address tokenAddress, uint256 amount) external virtual onlyOwner {\\n    _withdrawERC20(receiver, tokenAddress, amount);\\n  }\\n\\n  function withdrawERC721(address payable receiver, address tokenAddress, uint256 tokenId) external virtual onlyOwner {\\n    _withdrawERC721(receiver, tokenAddress, tokenId);\\n  }\\n\\n  function withdrawERC1155(address payable receiver, address tokenAddress, uint256 tokenId, uint256 amount) external virtual onlyOwner {\\n    _withdrawERC1155(receiver, tokenAddress, tokenId, amount);\\n  }\\n\\n  function onERC721Received(\\n      address,\\n      address,\\n      uint256,\\n      bytes calldata\\n  ) external pure returns(bytes4) {\\n      return this.onERC721Received.selector;\\n  }\\n}\\n\",\"keccak256\":\"0x45c366f606f886ba58b68ffaa2fb5eb8a5614404e4689b88a24624534b7d2f98\",\"license\":\"MIT\"},\"contracts/interfaces/IBalancerV2Vault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IAsset {\\n    // solhint-disable-previous-line no-empty-blocks\\n}\\n\\ninterface IBalancerV2Vault {\\n    enum PoolSpecialization { GENERAL, MINIMAL_SWAP_INFO, TWO_TOKEN }\\n\\n    /**\\n     * @dev Returns a Pool's contract address and specialization setting.\\n     */\\n    function getPool(bytes32 poolId) external view returns (address, PoolSpecialization);\\n\\n    // Swaps\\n    //\\n    // Users can swap tokens with Pools by calling the `swap` and `batchSwap` functions. To do this,\\n    // they need not trust Pool contracts in any way: all security checks are made by the Vault. They must however be\\n    // aware of the Pools' pricing algorithms in order to estimate the prices Pools will quote.\\n    //\\n    // The `swap` function executes a single swap, while `batchSwap` can perform multiple swaps in sequence.\\n    // In each individual swap, tokens of one kind are sent from the sender to the Pool (this is the 'token in'),\\n    // and tokens of another kind are sent from the Pool to the recipient in exchange (this is the 'token out').\\n    // More complex swaps, such as one token in to multiple tokens out can be achieved by batching together\\n    // individual swaps.\\n    //\\n    // There are two swap kinds:\\n    //  - 'given in' swaps, where the amount of tokens in (sent to the Pool) is known, and the Pool determines (via the\\n    // `onSwap` hook) the amount of tokens out (to send to the recipient).\\n    //  - 'given out' swaps, where the amount of tokens out (received from the Pool) is known, and the Pool determines\\n    // (via the `onSwap` hook) the amount of tokens in (to receive from the sender).\\n    //\\n    // Additionally, it is possible to chain swaps using a placeholder input amount, which the Vault replaces with\\n    // the calculated output of the previous swap. If the previous swap was 'given in', this will be the calculated\\n    // tokenOut amount. If the previous swap was 'given out', it will use the calculated tokenIn amount. These extended\\n    // swaps are known as 'multihop' swaps, since they 'hop' through a number of intermediate tokens before arriving at\\n    // the final intended token.\\n    //\\n    // In all cases, tokens are only transferred in and out of the Vault (or withdrawn from and deposited into Internal\\n    // Balance) after all individual swaps have been completed, and the net token balance change computed. This makes\\n    // certain swap patterns, such as multihops, or swaps that interact with the same token pair in multiple Pools, cost\\n    // much less gas than they would otherwise.\\n    //\\n    // It also means that under certain conditions it is possible to perform arbitrage by swapping with multiple\\n    // Pools in a way that results in net token movement out of the Vault (profit), with no tokens being sent in (only\\n    // updating the Pool's internal accounting).\\n    //\\n    // To protect users from front-running or the market changing rapidly, they supply a list of 'limits' for each token\\n    // involved in the swap, where either the maximum number of tokens to send (by passing a positive value) or the\\n    // minimum amount of tokens to receive (by passing a negative value) is specified.\\n    //\\n    // Additionally, a 'deadline' timestamp can also be provided, forcing the swap to fail if it occurs after\\n    // this point in time (e.g. if the transaction failed to be included in a block promptly).\\n    //\\n    // If interacting with Pools that hold WETH, it is possible to both send and receive ETH directly: the Vault will do\\n    // the wrapping and unwrapping. To enable this mechanism, the IAsset sentinel value (the zero address) must be\\n    // passed in the `assets` array instead of the WETH address. Note that it is possible to combine ETH and WETH in the\\n    // same swap. Any excess ETH will be sent back to the caller (not the sender, which is relevant for relayers).\\n    //\\n    // Finally, Internal Balance can be used when either sending or receiving tokens.\\n\\n    enum SwapKind { GIVEN_IN, GIVEN_OUT }\\n\\n    /**\\n     * @dev Performs a swap with a single Pool.\\n     *\\n     * If the swap is 'given in' (the number of tokens to send to the Pool is known), it returns the amount of tokens\\n     * taken from the Pool, which must be greater than or equal to `limit`.\\n     *\\n     * If the swap is 'given out' (the number of tokens to take from the Pool is known), it returns the amount of tokens\\n     * sent to the Pool, which must be less than or equal to `limit`.\\n     *\\n     * Internal Balance usage and the recipient are determined by the `funds` struct.\\n     *\\n     * Emits a `Swap` event.\\n     */\\n    function swap(\\n        SingleSwap memory singleSwap,\\n        FundManagement memory funds,\\n        uint256 limit,\\n        uint256 deadline\\n    ) external payable returns (uint256);\\n\\n    /**\\n     * @dev Data for a single swap executed by `swap`. `amount` is either `amountIn` or `amountOut` depending on\\n     * the `kind` value.\\n     *\\n     * `assetIn` and `assetOut` are either token addresses, or the IAsset sentinel value for ETH (the zero address).\\n     * Note that Pools never interact with ETH directly: it will be wrapped to or unwrapped from WETH by the Vault.\\n     *\\n     * The `userData` field is ignored by the Vault, but forwarded to the Pool in the `onSwap` hook, and may be\\n     * used to extend swap behavior.\\n     */\\n    struct SingleSwap {\\n        bytes32 poolId;\\n        SwapKind kind;\\n        IAsset assetIn;\\n        IAsset assetOut;\\n        uint256 amount;\\n        bytes userData;\\n    }\\n\\n\\n    /**\\n     * @dev Called by users to join a Pool, which transfers tokens from `sender` into the Pool's balance. This will\\n     * trigger custom Pool behavior, which will typically grant something in return to `recipient` - often tokenized\\n     * Pool shares.\\n     *\\n     * If the caller is not `sender`, it must be an authorized relayer for them.\\n     *\\n     * The `assets` and `maxAmountsIn` arrays must have the same length, and each entry indicates the maximum amount\\n     * to send for each asset. The amounts to send are decided by the Pool and not the Vault: it just enforces\\n     * these maximums.\\n     *\\n     * If joining a Pool that holds WETH, it is possible to send ETH directly: the Vault will do the wrapping. To enable\\n     * this mechanism, the IAsset sentinel value (the zero address) must be passed in the `assets` array instead of the\\n     * WETH address. Note that it is not possible to combine ETH and WETH in the same join. Any excess ETH will be sent\\n     * back to the caller (not the sender, which is important for relayers).\\n     *\\n     * `assets` must have the same length and order as the array returned by `getPoolTokens`. This prevents issues when\\n     * interacting with Pools that register and deregister tokens frequently. If sending ETH however, the array must be\\n     * sorted *before* replacing the WETH address with the ETH sentinel value (the zero address), which means the final\\n     * `assets` array might not be sorted. Pools with no registered tokens cannot be joined.\\n     *\\n     * If `fromInternalBalance` is true, the caller's Internal Balance will be preferred: ERC20 transfers will only\\n     * be made for the difference between the requested amount and Internal Balance (if any). Note that ETH cannot be\\n     * withdrawn from Internal Balance: attempting to do so will trigger a revert.\\n     *\\n     * This causes the Vault to call the `IBasePool.onJoinPool` hook on the Pool's contract, where Pools implement\\n     * their own custom logic. This typically requires additional information from the user (such as the expected number\\n     * of Pool shares). This can be encoded in the `userData` argument, which is ignored by the Vault and passed\\n     * directly to the Pool's contract, as is `recipient`.\\n     *\\n     * Emits a `PoolBalanceChanged` event.\\n     */\\n    function joinPool(\\n        bytes32 poolId,\\n        address sender,\\n        address recipient,\\n        JoinPoolRequest memory request\\n    ) external payable;\\n\\n    struct JoinPoolRequest {\\n        IAsset[] assets;\\n        uint256[] maxAmountsIn;\\n        bytes userData;\\n        bool fromInternalBalance;\\n    }\\n\\n    enum JoinKind {\\n        INIT,\\n        EXACT_TOKENS_IN_FOR_BPT_OUT,\\n        TOKEN_IN_FOR_EXACT_BPT_OUT,\\n        ALL_TOKENS_IN_FOR_EXACT_BPT_OUT\\n    }\\n\\n    /**\\n     * @dev Called by users to exit a Pool, which transfers tokens from the Pool's balance to `recipient`. This will\\n     * trigger custom Pool behavior, which will typically ask for something in return from `sender` - often tokenized\\n     * Pool shares. The amount of tokens that can be withdrawn is limited by the Pool's `cash` balance (see\\n     * `getPoolTokenInfo`).\\n     *\\n     * If the caller is not `sender`, it must be an authorized relayer for them.\\n     *\\n     * The `tokens` and `minAmountsOut` arrays must have the same length, and each entry in these indicates the minimum\\n     * token amount to receive for each token contract. The amounts to send are decided by the Pool and not the Vault:\\n     * it just enforces these minimums.\\n     *\\n     * If exiting a Pool that holds WETH, it is possible to receive ETH directly: the Vault will do the unwrapping. To\\n     * enable this mechanism, the IAsset sentinel value (the zero address) must be passed in the `assets` array instead\\n     * of the WETH address. Note that it is not possible to combine ETH and WETH in the same exit.\\n     *\\n     * `assets` must have the same length and order as the array returned by `getPoolTokens`. This prevents issues when\\n     * interacting with Pools that register and deregister tokens frequently. If receiving ETH however, the array must\\n     * be sorted *before* replacing the WETH address with the ETH sentinel value (the zero address), which means the\\n     * final `assets` array might not be sorted. Pools with no registered tokens cannot be exited.\\n     *\\n     * If `toInternalBalance` is true, the tokens will be deposited to `recipient`'s Internal Balance. Otherwise,\\n     * an ERC20 transfer will be performed. Note that ETH cannot be deposited to Internal Balance: attempting to\\n     * do so will trigger a revert.\\n     *\\n     * `minAmountsOut` is the minimum amount of tokens the user expects to get out of the Pool, for each token in the\\n     * `tokens` array. This array must match the Pool's registered tokens.\\n     *\\n     * This causes the Vault to call the `IBasePool.onExitPool` hook on the Pool's contract, where Pools implement\\n     * their own custom logic. This typically requires additional information from the user (such as the expected number\\n     * of Pool shares to return). This can be encoded in the `userData` argument, which is ignored by the Vault and\\n     * passed directly to the Pool's contract.\\n     *\\n     * Emits a `PoolBalanceChanged` event.\\n     */\\n    function exitPool(\\n        bytes32 poolId,\\n        address sender,\\n        address payable recipient,\\n        ExitPoolRequest memory request\\n    ) external;\\n\\n    struct ExitPoolRequest {\\n        IAsset[] assets;\\n        uint256[] minAmountsOut;\\n        bytes userData;\\n        bool toInternalBalance;\\n    }\\n\\n    enum ExitKind {\\n        EXACT_BPT_IN_FOR_ONE_TOKEN_OUT,\\n        EXACT_BPT_IN_FOR_TOKENS_OUT,\\n        BPT_IN_FOR_EXACT_TOKENS_OUT,\\n        MANAGEMENT_FEE_TOKENS_OUT // for InvestmentPool\\n    }\\n\\n    /**\\n     * @dev All tokens in a swap are either sent from the `sender` account to the Vault, or from the Vault to the\\n     * `recipient` account.\\n     *\\n     * If the caller is not `sender`, it must be an authorized relayer for them.\\n     *\\n     * If `fromInternalBalance` is true, the `sender`'s Internal Balance will be preferred, performing an ERC20\\n     * transfer for the difference between the requested amount and the User's Internal Balance (if any). The `sender`\\n     * must have allowed the Vault to use their tokens via `IERC20.approve()`. This matches the behavior of\\n     * `joinPool`.\\n     *\\n     * If `toInternalBalance` is true, tokens will be deposited to `recipient`'s internal balance instead of\\n     * transferred. This matches the behavior of `exitPool`.\\n     *\\n     * Note that ETH cannot be deposited to or withdrawn from Internal Balance: attempting to do so will trigger a\\n     * revert.\\n     */\\n    struct FundManagement {\\n        address sender;\\n        bool fromInternalBalance;\\n        address payable recipient;\\n        bool toInternalBalance;\\n    }\\n}\\n\",\"keccak256\":\"0x724496a5bf4b14d6ef184a3f1d4915cf38e13b181b809a7ebed3e0f8aad8d615\",\"license\":\"MIT\"},\"contracts/interfaces/IBaseProton.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// IBaseProton.sol -- Part of the Charged Particles Protocol\\n// Copyright (c) 2021 Firma Lux, Inc. <https://charged.fi>\\n//\\n// Permission is hereby granted, free of charge, to any person obtaining a copy\\n// of this software and associated documentation files (the \\\"Software\\\"), to deal\\n// in the Software without restriction, including without limitation the rights\\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\n// copies of the Software, and to permit persons to whom the Software is\\n// furnished to do so, subject to the following conditions:\\n//\\n// The above copyright notice and this permission notice shall be included in all\\n// copies or substantial portions of the Software.\\n//\\n// THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n// FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n// SOFTWARE.\\n\\npragma solidity 0.8.17;\\n\\ninterface IBaseProton {\\n  function createProton(\\n    address creator,\\n    address receiver,\\n    string memory tokenMetaUri\\n  ) external returns (uint256 newTokenId);\\n\\n  function createBasicProton(\\n    address creator,\\n    address receiver,\\n    string memory tokenMetaUri\\n  )\\n    external\\n    payable\\n    returns (uint256 newTokenId);\\n\\n  function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n}\",\"keccak256\":\"0x7548b7647b5407bb55566f44c95cace43cf38fd984caecb6e864d735ae4000a3\",\"license\":\"MIT\"},\"contracts/interfaces/IChargedParticles.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// IChargedParticles.sol -- Part of the Charged Particles Protocol\\n// Copyright (c) 2021 Firma Lux, Inc. <https://charged.fi>\\n//\\n// Permission is hereby granted, free of charge, to any person obtaining a copy\\n// of this software and associated documentation files (the \\\"Software\\\"), to deal\\n// in the Software without restriction, including without limitation the rights\\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\n// copies of the Software, and to permit persons to whom the Software is\\n// furnished to do so, subject to the following conditions:\\n//\\n// The above copyright notice and this permission notice shall be included in all\\n// copies or substantial portions of the Software.\\n//\\n// THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n// FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n// SOFTWARE.\\n\\npragma solidity 0.8.17;\\n\\n/**\\n * @notice Interface for Charged Particles\\n */\\ninterface IChargedParticles {\\n    /***********************************|\\n  |             Public API            |\\n  |__________________________________*/\\n\\n    function getStateAddress() external view returns (address stateAddress);\\n\\n    function getSettingsAddress()\\n        external\\n        view\\n        returns (address settingsAddress);\\n\\n    function getManagersAddress()\\n        external\\n        view\\n        returns (address managersAddress);\\n\\n    function getFeesForDeposit(uint256 assetAmount)\\n        external\\n        view\\n        returns (uint256 protocolFee);\\n\\n    function baseParticleMass(\\n        address contractAddress,\\n        uint256 tokenId,\\n        string calldata walletManagerId,\\n        address assetToken\\n    ) external returns (uint256);\\n\\n    function currentParticleCharge(\\n        address contractAddress,\\n        uint256 tokenId,\\n        string calldata walletManagerId,\\n        address assetToken\\n    ) external returns (uint256);\\n\\n    function currentParticleKinetics(\\n        address contractAddress,\\n        uint256 tokenId,\\n        string calldata walletManagerId,\\n        address assetToken\\n    ) external returns (uint256);\\n\\n    function currentParticleCovalentBonds(\\n        address contractAddress,\\n        uint256 tokenId,\\n        string calldata basketManagerId\\n    ) external view returns (uint256);\\n\\n    /***********************************|\\n  |        Particle Mechanics         |\\n  |__________________________________*/\\n\\n    function energizeParticle(\\n        address contractAddress,\\n        uint256 tokenId,\\n        string calldata walletManagerId,\\n        address assetToken,\\n        uint256 assetAmount,\\n        address referrer\\n    ) external returns (uint256 yieldTokensAmount);\\n\\n    function dischargeParticle(\\n        address receiver,\\n        address contractAddress,\\n        uint256 tokenId,\\n        string calldata walletManagerId,\\n        address assetToken\\n    ) external returns (uint256 creatorAmount, uint256 receiverAmount);\\n\\n    function dischargeParticleAmount(\\n        address receiver,\\n        address contractAddress,\\n        uint256 tokenId,\\n        string calldata walletManagerId,\\n        address assetToken,\\n        uint256 assetAmount\\n    ) external returns (uint256 creatorAmount, uint256 receiverAmount);\\n\\n    function dischargeParticleForCreator(\\n        address receiver,\\n        address contractAddress,\\n        uint256 tokenId,\\n        string calldata walletManagerId,\\n        address assetToken,\\n        uint256 assetAmount\\n    ) external returns (uint256 receiverAmount);\\n\\n    function releaseParticle(\\n        address receiver,\\n        address contractAddress,\\n        uint256 tokenId,\\n        string calldata walletManagerId,\\n        address assetToken\\n    ) external returns (uint256 creatorAmount, uint256 receiverAmount);\\n\\n    function releaseParticleAmount(\\n        address receiver,\\n        address contractAddress,\\n        uint256 tokenId,\\n        string calldata walletManagerId,\\n        address assetToken,\\n        uint256 assetAmount\\n    ) external returns (uint256 creatorAmount, uint256 receiverAmount);\\n\\n    function covalentBond(\\n        address contractAddress,\\n        uint256 tokenId,\\n        string calldata basketManagerId,\\n        address nftTokenAddress,\\n        uint256 nftTokenId,\\n        uint256 nftTokenAmount\\n    ) external returns (bool success);\\n\\n    function breakCovalentBond(\\n        address receiver,\\n        address contractAddress,\\n        uint256 tokenId,\\n        string calldata basketManagerId,\\n        address nftTokenAddress,\\n        uint256 nftTokenId,\\n        uint256 nftTokenAmount\\n    ) external returns (bool success);\\n\\n    /***********************************|\\n  |          Particle Events          |\\n  |__________________________________*/\\n\\n    event Initialized(address indexed initiator);\\n    event ControllerSet(address indexed controllerAddress, string controllerId);\\n    event DepositFeeSet(uint256 depositFee);\\n    event ProtocolFeesCollected(\\n        address indexed assetToken,\\n        uint256 depositAmount,\\n        uint256 feesCollected\\n    );\\n}\\n\",\"keccak256\":\"0xa32fcfc956d70a62f18a5dd80db30d1b3a70403e5865aa8a093da5ca79be8fe0\",\"license\":\"MIT\"},\"contracts/interfaces/IChargedState.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// IChargedState.sol -- Part of the Charged Particles Protocol\\n// Copyright (c) 2021 Firma Lux, Inc. <https://charged.fi>\\n//\\n// Permission is hereby granted, free of charge, to any person obtaining a copy\\n// of this software and associated documentation files (the \\\"Software\\\"), to deal\\n// in the Software without restriction, including without limitation the rights\\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\n// copies of the Software, and to permit persons to whom the Software is\\n// furnished to do so, subject to the following conditions:\\n//\\n// The above copyright notice and this permission notice shall be included in all\\n// copies or substantial portions of the Software.\\n//\\n// THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n// FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n// SOFTWARE.\\n\\npragma solidity 0.8.17;\\n\\n/**\\n * @notice Interface for Charged State\\n */\\ninterface IChargedState {\\n  /***********************************|\\n  |             Public API            |\\n  |__________________________________*/\\n\\n    function getDischargeTimelockExpiry(\\n        address contractAddress,\\n        uint256 tokenId\\n    ) external view returns (uint256 lockExpiry);\\n\\n    function getReleaseTimelockExpiry(address contractAddress, uint256 tokenId)\\n        external\\n        view\\n        returns (uint256 lockExpiry);\\n\\n    function getBreakBondTimelockExpiry(\\n        address contractAddress,\\n        uint256 tokenId\\n    ) external view returns (uint256 lockExpiry);\\n\\n    function isApprovedForDischarge(\\n        address contractAddress,\\n        uint256 tokenId,\\n        address operator\\n    ) external returns (bool);\\n\\n    function isApprovedForRelease(\\n        address contractAddress,\\n        uint256 tokenId,\\n        address operator\\n    ) external returns (bool);\\n\\n    function isApprovedForBreakBond(\\n        address contractAddress,\\n        uint256 tokenId,\\n        address operator\\n    ) external returns (bool);\\n\\n    function isApprovedForTimelock(\\n        address contractAddress,\\n        uint256 tokenId,\\n        address operator\\n    ) external returns (bool);\\n\\n    function isEnergizeRestricted(address contractAddress, uint256 tokenId)\\n        external\\n        view\\n        returns (bool);\\n\\n    function isCovalentBondRestricted(address contractAddress, uint256 tokenId)\\n        external\\n        view\\n        returns (bool);\\n\\n    function getDischargeState(\\n        address contractAddress,\\n        uint256 tokenId,\\n        address sender\\n    )\\n        external\\n        returns (\\n            bool allowFromAll,\\n            bool isApproved,\\n            uint256 timelock,\\n            uint256 tempLockExpiry\\n        );\\n\\n    function getReleaseState(\\n        address contractAddress,\\n        uint256 tokenId,\\n        address sender\\n    )\\n        external\\n        returns (\\n            bool allowFromAll,\\n            bool isApproved,\\n            uint256 timelock,\\n            uint256 tempLockExpiry\\n        );\\n\\n    function getBreakBondState(\\n        address contractAddress,\\n        uint256 tokenId,\\n        address sender\\n    )\\n        external\\n        returns (\\n            bool allowFromAll,\\n            bool isApproved,\\n            uint256 timelock,\\n            uint256 tempLockExpiry\\n        );\\n\\n    /***********************************|\\n  |      Only NFT Owner/Operator      |\\n  |__________________________________*/\\n\\n    function setDischargeApproval(\\n        address contractAddress,\\n        uint256 tokenId,\\n        address operator\\n    ) external;\\n\\n    function setReleaseApproval(\\n        address contractAddress,\\n        uint256 tokenId,\\n        address operator\\n    ) external;\\n\\n    function setBreakBondApproval(\\n        address contractAddress,\\n        uint256 tokenId,\\n        address operator\\n    ) external;\\n\\n    function setTimelockApproval(\\n        address contractAddress,\\n        uint256 tokenId,\\n        address operator\\n    ) external;\\n\\n    function setApprovalForAll(\\n        address contractAddress,\\n        uint256 tokenId,\\n        address operator\\n    ) external;\\n\\n    function setPermsForRestrictCharge(\\n        address contractAddress,\\n        uint256 tokenId,\\n        bool state\\n    ) external;\\n\\n    function setPermsForAllowDischarge(\\n        address contractAddress,\\n        uint256 tokenId,\\n        bool state\\n    ) external;\\n\\n    function setPermsForAllowRelease(\\n        address contractAddress,\\n        uint256 tokenId,\\n        bool state\\n    ) external;\\n\\n    function setPermsForRestrictBond(\\n        address contractAddress,\\n        uint256 tokenId,\\n        bool state\\n    ) external;\\n\\n    function setPermsForAllowBreakBond(\\n        address contractAddress,\\n        uint256 tokenId,\\n        bool state\\n    ) external;\\n\\n    function setDischargeTimelock(\\n        address contractAddress,\\n        uint256 tokenId,\\n        uint256 unlockBlock\\n    ) external;\\n\\n    function setReleaseTimelock(\\n        address contractAddress,\\n        uint256 tokenId,\\n        uint256 unlockBlock\\n    ) external;\\n\\n    function setBreakBondTimelock(\\n        address contractAddress,\\n        uint256 tokenId,\\n        uint256 unlockBlock\\n    ) external;\\n\\n    /***********************************|\\n  |         Only NFT Contract         |\\n  |__________________________________*/\\n\\n    function setTemporaryLock(\\n        address contractAddress,\\n        uint256 tokenId,\\n        bool isLocked\\n    ) external;\\n\\n    /***********************************|\\n  |          Particle Events          |\\n  |__________________________________*/\\n\\n    event Initialized(address indexed initiator);\\n    event ControllerSet(address indexed controllerAddress, string controllerId);\\n\\n    event DischargeApproval(\\n        address indexed contractAddress,\\n        uint256 indexed tokenId,\\n        address indexed owner,\\n        address operator\\n    );\\n    event ReleaseApproval(\\n        address indexed contractAddress,\\n        uint256 indexed tokenId,\\n        address indexed owner,\\n        address operator\\n    );\\n    event BreakBondApproval(\\n        address indexed contractAddress,\\n        uint256 indexed tokenId,\\n        address indexed owner,\\n        address operator\\n    );\\n    event TimelockApproval(\\n        address indexed contractAddress,\\n        uint256 indexed tokenId,\\n        address indexed owner,\\n        address operator\\n    );\\n\\n    event TokenDischargeTimelock(\\n        address indexed contractAddress,\\n        uint256 indexed tokenId,\\n        address indexed operator,\\n        uint256 unlockBlock\\n    );\\n    event TokenReleaseTimelock(\\n        address indexed contractAddress,\\n        uint256 indexed tokenId,\\n        address indexed operator,\\n        uint256 unlockBlock\\n    );\\n    event TokenBreakBondTimelock(\\n        address indexed contractAddress,\\n        uint256 indexed tokenId,\\n        address indexed operator,\\n        uint256 unlockBlock\\n    );\\n    event TokenTempLock(\\n        address indexed contractAddress,\\n        uint256 indexed tokenId,\\n        uint256 unlockBlock\\n    );\\n\\n    event PermsSetForRestrictCharge(\\n        address indexed contractAddress,\\n        uint256 indexed tokenId,\\n        bool state\\n    );\\n    event PermsSetForAllowDischarge(\\n        address indexed contractAddress,\\n        uint256 indexed tokenId,\\n        bool state\\n    );\\n    event PermsSetForAllowRelease(\\n        address indexed contractAddress,\\n        uint256 indexed tokenId,\\n        bool state\\n    );\\n    event PermsSetForRestrictBond(\\n        address indexed contractAddress,\\n        uint256 indexed tokenId,\\n        bool state\\n    );\\n    event PermsSetForAllowBreakBond(\\n        address indexed contractAddress,\\n        uint256 indexed tokenId,\\n        bool state\\n    );\\n}\\n\",\"keccak256\":\"0x3425b24ea258cabb1fb0244820487950704a0ddc62930e0f8315e75f2ebf7e17\",\"license\":\"MIT\"},\"contracts/interfaces/INonfungiblePositionManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity 0.8.17;\\npragma abicoder v2;\\ninterface INonfungiblePositionManager {\\n\\n    /// @notice Returns the position information associated with a given token ID.\\n    /// @dev Throws if the token ID is not valid.\\n    /// @param tokenId The ID of the token that represents the position\\n    /// @return nonce The nonce for permits\\n    /// @return operator The address that is approved for spending\\n    /// @return token0 The address of the token0 for a specific pool\\n    /// @return token1 The address of the token1 for a specific pool\\n    /// @return fee The fee associated with the pool\\n    /// @return tickLower The lower end of the tick range for the position\\n    /// @return tickUpper The higher end of the tick range for the position\\n    /// @return liquidity The liquidity of the position\\n    /// @return feeGrowthInside0LastX128 The fee growth of token0 as of the last action on the individual position\\n    /// @return feeGrowthInside1LastX128 The fee growth of token1 as of the last action on the individual position\\n    /// @return tokensOwed0 The uncollected amount of token0 owed to the position as of the last computation\\n    /// @return tokensOwed1 The uncollected amount of token1 owed to the position as of the last computation\\n    function positions(uint256 tokenId)\\n        external\\n        view\\n        returns (\\n            uint96 nonce,\\n            address operator,\\n            address token0,\\n            address token1,\\n            uint24 fee,\\n            int24 tickLower,\\n            int24 tickUpper,\\n            uint128 liquidity,\\n            uint256 feeGrowthInside0LastX128,\\n            uint256 feeGrowthInside1LastX128,\\n            uint128 tokensOwed0,\\n            uint128 tokensOwed1\\n        );\\n\\n    struct MintParams {\\n        address token0;\\n        address token1;\\n        // uint24 fee;\\n        int24 tickLower;\\n        int24 tickUpper;\\n        uint256 amount0Desired;\\n        uint256 amount1Desired;\\n        uint256 amount0Min;\\n        uint256 amount1Min;\\n        address recipient;\\n        uint256 deadline;\\n    }\\n\\n    /// @notice Creates a new position wrapped in a NFT\\n    /// @dev Call this when the pool does exist and is initialized. Note that if the pool is created but not initialized\\n    /// a method does not exist, i.e. the pool is assumed to be initialized.\\n    /// @param params The params necessary to mint a position, encoded as `MintParams` in calldata\\n    /// @return tokenId The ID of the token that represents the minted position\\n    /// @return liquidity The amount of liquidity for this position\\n    /// @return amount0 The amount of token0\\n    /// @return amount1 The amount of token1\\n    function mint(MintParams calldata params)\\n        external\\n        payable\\n        returns (\\n            uint256 tokenId,\\n            uint128 liquidity,\\n            uint256 amount0,\\n            uint256 amount1\\n        );\\n\\n    struct IncreaseLiquidityParams {\\n        uint256 tokenId;\\n        uint256 amount0Desired;\\n        uint256 amount1Desired;\\n        uint256 amount0Min;\\n        uint256 amount1Min;\\n        uint256 deadline;\\n    }\\n\\n    /// @notice Increases the amount of liquidity in a position, with tokens paid by the `msg.sender`\\n    /// @param params tokenId The ID of the token for which liquidity is being increased,\\n    /// amount0Desired The desired amount of token0 to be spent,\\n    /// amount1Desired The desired amount of token1 to be spent,\\n    /// amount0Min The minimum amount of token0 to spend, which serves as a slippage check,\\n    /// amount1Min The minimum amount of token1 to spend, which serves as a slippage check,\\n    /// deadline The time by which the transaction must be included to effect the change\\n    /// @return liquidity The new liquidity amount as a result of the increase\\n    /// @return amount0 The amount of token0 to acheive resulting liquidity\\n    /// @return amount1 The amount of token1 to acheive resulting liquidity\\n    function increaseLiquidity(IncreaseLiquidityParams calldata params)\\n        external\\n        payable\\n        returns (\\n            uint128 liquidity,\\n            uint256 amount0,\\n            uint256 amount1\\n        );\\n\\n    struct DecreaseLiquidityParams {\\n        uint256 tokenId;\\n        uint128 liquidity;\\n        uint256 amount0Min;\\n        uint256 amount1Min;\\n        uint256 deadline;\\n    }\\n\\n    /// @notice Decreases the amount of liquidity in a position and accounts it to the position\\n    /// @param params tokenId The ID of the token for which liquidity is being decreased,\\n    /// amount The amount by which liquidity will be decreased,\\n    /// amount0Min The minimum amount of token0 that should be accounted for the burned liquidity,\\n    /// amount1Min The minimum amount of token1 that should be accounted for the burned liquidity,\\n    /// deadline The time by which the transaction must be included to effect the change\\n    /// @return amount0 The amount of token0 accounted to the position's tokens owed\\n    /// @return amount1 The amount of token1 accounted to the position's tokens owed\\n    function decreaseLiquidity(DecreaseLiquidityParams calldata params)\\n        external\\n        payable\\n        returns (uint256 amount0, uint256 amount1);\\n\\n    struct CollectParams {\\n        uint256 tokenId;\\n        address recipient;\\n        uint128 amount0Max;\\n        uint128 amount1Max;\\n    }\\n\\n    /// @notice Collects up to a maximum amount of fees owed to a specific position to the recipient\\n    /// @param params tokenId The ID of the NFT for which tokens are being collected,\\n    /// recipient The account that should receive the tokens,\\n    /// amount0Max The maximum amount of token0 to collect,\\n    /// amount1Max The maximum amount of token1 to collect\\n    /// @return amount0 The amount of fees collected in token0\\n    /// @return amount1 The amount of fees collected in token1\\n    function collect(CollectParams calldata params) external payable returns (uint256 amount0, uint256 amount1);\\n\\n    /// @notice Burns a token ID, which deletes it from the NFT contract. The token must have 0 liquidity and all tokens\\n    /// must be collected first.\\n    /// @param tokenId The ID of the token that is being burned\\n    function burn(uint256 tokenId) external payable;\\n}\\n\",\"keccak256\":\"0x80c30d6b437334115daefc1084f364750f70e13c18eb0d4ecfe7f833c6fcbaba\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/IVelodrome.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IVelodrome {\\n  function poolFor(address tokenA, address tokenB, bool stable) external view returns (address pool);\\n\\n  function addLiquidity(\\n    address tokenA,\\n    address tokenB,\\n    bool stable,\\n    uint256 amountADesired,\\n    uint256 amountBDesired,\\n    uint256 amountAMin,\\n    uint256 amountBMin,\\n    address to,\\n    uint256 deadline\\n  ) external returns (uint256 amountA, uint256 amountB, uint256 liquidity);\\n\\n  function removeLiquidity(\\n    address tokenA,\\n    address tokenB,\\n    bool stable,\\n    uint256 liquidity,\\n    uint256 amountAMin,\\n    uint256 amountBMin,\\n    address to,\\n    uint256 deadline\\n  ) external returns (uint256 amountA, uint256 amountB);\\n}\",\"keccak256\":\"0x8d239e46802864273e6b4d73357f23e03100f82a351aad73546b5a6f59af5aab\",\"license\":\"MIT\"},\"contracts/interfaces/IWeb3Packs.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// IWeb3Packs.sol\\n// Copyright (c) 2023 Firma Lux, Inc. <https://charged.fi>\\n//\\n// Permission is hereby granted, free of charge, to any person obtaining a copy\\n// of this software and associated documentation files (the \\\"Software\\\"), to deal\\n// in the Software without restriction, including without limitation the rights\\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\n// copies of the Software, and to permit persons to whom the Software is\\n// furnished to do so, subject to the following conditions:\\n//\\n// The above copyright notice and this permission notice shall be included in all\\n// copies or substantial portions of the Software.\\n//\\n// THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n// FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n// SOFTWARE.\\npragma solidity 0.8.17;\\n\\nimport \\\"./IWeb3PacksDefs.sol\\\";\\n\\ninterface IWeb3Packs is IWeb3PacksDefs {\\n  function bundle(\\n    string calldata tokenMetaUri,\\n    ContractCallGeneric[] calldata contractCalls,\\n    ERC20SwapOrderGeneric[] calldata erc20SwapOrders,\\n    LiquidityOrderGeneric[] calldata liquidityOrders,\\n    LockState calldata lockState,\\n    uint256 ethPackPrice\\n  )\\n    external\\n    payable\\n    returns(uint256 tokenId);\\n\\n  function unbundle(\\n    address receiver,\\n    address contractAddress,\\n    uint256 tokenId,\\n    address[] calldata erc20s,\\n    NFT[] calldata nfts,\\n    TokenPairs[] calldata lps\\n  ) external\\n    payable;\\n}\\n\",\"keccak256\":\"0x8290ccb036e8fec13ba99d782d8c63e38e6c9f473b248e1ccb3bee918eea13e2\",\"license\":\"MIT\"},\"contracts/interfaces/IWeb3PacksDefs.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// IWeb3PacksDefs.sol\\n// Copyright (c) 2023 Firma Lux, Inc. <https://charged.fi>\\n//\\n// Permission is hereby granted, free of charge, to any person obtaining a copy\\n// of this software and associated documentation files (the \\\"Software\\\"), to deal\\n// in the Software without restriction, including without limitation the rights\\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\n// copies of the Software, and to permit persons to whom the Software is\\n// furnished to do so, subject to the following conditions:\\n//\\n// The above copyright notice and this permission notice shall be included in all\\n// copies or substantial portions of the Software.\\n//\\n// THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n// FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n// SOFTWARE.\\npragma solidity 0.8.17;\\n\\ninterface IWeb3PacksDefs {\\n  event ChargedParticlesSet(address indexed chargedParticles);\\n  event ChargedStateSet(address indexed chargedState);\\n  event RouterSet(address indexed router);\\n  event ProtonSet(address indexed proton);\\n  event PackBundled(uint256 indexed tokenId, address indexed receiver);\\n  event PackUnbundled(uint256 indexed tokenId, address indexed receiver);\\n  event ProtocolFeeSet(uint256 fee);\\n  event Web3PacksManagerSet(address indexed manager);\\n  event Web3PacksTreasurySet(address indexed treasury);\\n\\n  // Custom Errors\\n  error NotOwnerOrApproved();\\n  error FundingFailed();\\n  error NullReceiver();\\n  error ContractNotAllowed();\\n  error NativeAssetTransferFailed();\\n  error MismatchedTokens();\\n  error MissingLiquidityUUID(address tokenAddress);\\n  error UnsucessfulSwap(address tokenOut, uint256 amountIn, address router);\\n  error InsufficientForFee(uint256 value, uint256 ethPackPrice, uint256 protocolFee);\\n\\n  enum RouterType {\\n    UniswapV2,\\n    UniswapV3,\\n    Velodrome,\\n    Balancer\\n  }\\n\\n  /// @notice Represents the deposit of an NFT\\n  struct TokenAmount {\\n    address token;\\n    uint256 amount;\\n  }\\n  struct TokenPairs {\\n    TokenAmount token0;\\n    TokenAmount token1;\\n  }\\n\\n  struct ContractCallGeneric {\\n    bytes callData;\\n    address contractAddress;\\n    uint256 amountIn;\\n  }\\n\\n  struct ERC20SwapOrderGeneric {\\n    bytes callData;\\n    address router;\\n    address tokenIn;\\n    address tokenOut;\\n    uint256 tokenAmountIn;\\n    uint256 tokenAmountOutMin;\\n    uint256 payableAmountIn;\\n    bytes32 liquidityUuid;\\n    bytes32 poolId;\\n    RouterType routerType;\\n  }\\n\\n  struct LiquidityOrderGeneric {\\n    address router;\\n    address token0;\\n    address token1;\\n    bytes32 liquidityUuidToken0;\\n    bytes32 liquidityUuidToken1;\\n    uint256 percentToken0;\\n    uint256 percentToken1;\\n    uint256 minimumLpTokens;\\n    uint256 slippage;\\n    int24 tickLower;\\n    int24 tickUpper;\\n    bool stable;\\n    bytes32 poolId;\\n    RouterType routerType;\\n  }\\n\\n  struct LiquidityPosition {\\n    uint256 lpTokenId;\\n    uint256 liquidity;\\n    bool stable;\\n    address token0;\\n    address token1;\\n    bytes32 poolId;\\n    address router;\\n    RouterType routerType;\\n  }\\n\\n  struct LiquidityPositionResult {\\n    address token0;\\n    address token1;\\n    uint256 amount0;\\n    uint256 amount1;\\n  }\\n\\n  struct NFT {\\n    address tokenAddress;\\n    uint256 id;\\n  }\\n\\n  struct LockState {\\n    uint256 ERC20Timelock;\\n    uint256 ERC721Timelock;\\n  }\\n}\\n\",\"keccak256\":\"0x2b1f6e37a2fcdf53ff79ad17c9cef4fb39858599e72f8975e111516cb64fd464\",\"license\":\"MIT\"},\"contracts/interfaces/IWeb3PacksManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// IWeb3PacksManager.sol\\n// Copyright (c) 2023 Firma Lux, Inc. <https://charged.fi>\\n//\\n// Permission is hereby granted, free of charge, to any person obtaining a copy\\n// of this software and associated documentation files (the \\\"Software\\\"), to deal\\n// in the Software without restriction, including without limitation the rights\\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\n// copies of the Software, and to permit persons to whom the Software is\\n// furnished to do so, subject to the following conditions:\\n//\\n// The above copyright notice and this permission notice shall be included in all\\n// copies or substantial portions of the Software.\\n//\\n// THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n// FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n// SOFTWARE.\\npragma solidity 0.8.17;\\n\\nimport \\\"./IWeb3PacksDefs.sol\\\";\\n\\ninterface IWeb3PacksManager is IWeb3PacksDefs {\\n  function isContractAllowed(address contractAddress) external returns (bool isAllowed);\\n  function getLiquidityPositions(uint256 tokenId) external returns (LiquidityPosition[] memory positions);\\n  function saveLiquidityPosition(uint256 tokenId, LiquidityPosition memory position) external;\\n  function clearLiquidityPositions(uint256 tokenId) external;\\n  function setContractAllowlist(address contractAddress, bool isAllowed) external;\\n  function setWeb3PacksContract(address contractAddress, bool isAllowed) external ;\\n}\\n\",\"keccak256\":\"0x588fbf37c9fa21948ac8eaf4d2107a286ce982b8bb6eaa7c413612312b6f098c\",\"license\":\"MIT\"},\"contracts/lib/BlackholePrevention.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// BlackholePrevention.sol -- Part of the Charged Particles Protocol\\n// Copyright (c) 2021 Firma Lux, Inc. <https://charged.fi>\\n//\\n// Permission is hereby granted, free of charge, to any person obtaining a copy\\n// of this software and associated documentation files (the \\\"Software\\\"), to deal\\n// in the Software without restriction, including without limitation the rights\\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\n// copies of the Software, and to permit persons to whom the Software is\\n// furnished to do so, subject to the following conditions:\\n//\\n// The above copyright notice and this permission notice shall be included in all\\n// copies or substantial portions of the Software.\\n//\\n// THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n// FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n// SOFTWARE.\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\n\\n/**\\n * @notice Prevents ETH or Tokens from getting stuck in a contract by allowing\\n *  the Owner/DAO to pull them out on behalf of a user\\n * This is only meant to contracts that are not expected to hold tokens, but do handle transferring them.\\n */\\ncontract BlackholePrevention {\\n    using Address for address payable;\\n    using SafeERC20 for IERC20;\\n\\n    event WithdrawStuckEther(address indexed receiver, uint256 amount);\\n    event WithdrawStuckERC20(\\n        address indexed receiver,\\n        address indexed tokenAddress,\\n        uint256 amount\\n    );\\n    event WithdrawStuckERC721(\\n        address indexed receiver,\\n        address indexed tokenAddress,\\n        uint256 indexed tokenId\\n    );\\n    event WithdrawStuckERC1155(\\n        address indexed receiver,\\n        address indexed tokenAddress,\\n        uint256 indexed tokenId,\\n        uint256 amount\\n    );\\n\\n    function _withdrawEther(address payable receiver, uint256 amount)\\n        internal\\n        virtual\\n    {\\n        require(receiver != address(0x0), \\\"BHP:E-403\\\");\\n        if (address(this).balance >= amount) {\\n            receiver.sendValue(amount);\\n            emit WithdrawStuckEther(receiver, amount);\\n        }\\n    }\\n\\n    function _withdrawERC20(\\n        address payable receiver,\\n        address tokenAddress,\\n        uint256 amount\\n    ) internal virtual {\\n        require(receiver != address(0x0), \\\"BHP:E-403\\\");\\n        if (IERC20(tokenAddress).balanceOf(address(this)) >= amount) {\\n            IERC20(tokenAddress).safeTransfer(receiver, amount);\\n            emit WithdrawStuckERC20(receiver, tokenAddress, amount);\\n        }\\n    }\\n\\n    function _withdrawERC721(\\n        address payable receiver,\\n        address tokenAddress,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(receiver != address(0x0), \\\"BHP:E-403\\\");\\n        if (IERC721(tokenAddress).ownerOf(tokenId) == address(this)) {\\n            IERC721(tokenAddress).transferFrom(\\n                address(this),\\n                receiver,\\n                tokenId\\n            );\\n            emit WithdrawStuckERC721(receiver, tokenAddress, tokenId);\\n        }\\n    }\\n\\n    function _withdrawERC1155(\\n        address payable receiver,\\n        address tokenAddress,\\n        uint256 tokenId,\\n        uint256 amount\\n    ) internal virtual {\\n        require(receiver != address(0x0), \\\"BHP:E-403\\\");\\n        if (\\n            IERC1155(tokenAddress).balanceOf(address(this), tokenId) >= amount\\n        ) {\\n            IERC1155(tokenAddress).safeTransferFrom(\\n                address(this),\\n                receiver,\\n                tokenId,\\n                amount,\\n                \\\"\\\"\\n            );\\n            emit WithdrawStuckERC1155(receiver, tokenAddress, tokenId, amount);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaa7de406bd3b1092f8222d3eb1e2a990381429a5cb6bab48a811ff7118a43746\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setChargedParticles(address)": {
        "details": "Setup the ChargedParticles Interface"
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/Web3PacksMode.sol:Web3PacksMode",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 130,
        "contract": "contracts/Web3PacksMode.sol:Web3PacksMode",
        "label": "_paused",
        "offset": 20,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 231,
        "contract": "contracts/Web3PacksMode.sol:Web3PacksMode",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 2399,
        "contract": "contracts/Web3PacksMode.sol:Web3PacksMode",
        "label": "_weth",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 2401,
        "contract": "contracts/Web3PacksMode.sol:Web3PacksMode",
        "label": "_proton",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 2403,
        "contract": "contracts/Web3PacksMode.sol:Web3PacksMode",
        "label": "_web3PacksManager",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 2405,
        "contract": "contracts/Web3PacksMode.sol:Web3PacksMode",
        "label": "_nonfungiblePositionManager",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 2407,
        "contract": "contracts/Web3PacksMode.sol:Web3PacksMode",
        "label": "_chargedParticles",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 2409,
        "contract": "contracts/Web3PacksMode.sol:Web3PacksMode",
        "label": "_chargedState",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 2411,
        "contract": "contracts/Web3PacksMode.sol:Web3PacksMode",
        "label": "_treasury",
        "offset": 0,
        "slot": "8",
        "type": "t_address_payable"
      },
      {
        "astId": 2413,
        "contract": "contracts/Web3PacksMode.sol:Web3PacksMode",
        "label": "_protocolFee",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 2416,
        "contract": "contracts/Web3PacksMode.sol:Web3PacksMode",
        "label": "_cpWalletManager",
        "offset": 0,
        "slot": "10",
        "type": "t_string_storage"
      },
      {
        "astId": 2419,
        "contract": "contracts/Web3PacksMode.sol:Web3PacksMode",
        "label": "_cpBasketManager",
        "offset": 0,
        "slot": "11",
        "type": "t_string_storage"
      },
      {
        "astId": 2424,
        "contract": "contracts/Web3PacksMode.sol:Web3PacksMode",
        "label": "_swapForLiquidityAmount",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_bytes32,t_struct(TokenAmount)6206_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_bytes32,t_struct(TokenAmount)6206_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct IWeb3PacksDefs.TokenAmount)",
        "numberOfBytes": "32",
        "value": "t_struct(TokenAmount)6206_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(TokenAmount)6206_storage": {
        "encoding": "inplace",
        "label": "struct IWeb3PacksDefs.TokenAmount",
        "members": [
          {
            "astId": 6203,
            "contract": "contracts/Web3PacksMode.sol:Web3PacksMode",
            "label": "token",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 6205,
            "contract": "contracts/Web3PacksMode.sol:Web3PacksMode",
            "label": "amount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}