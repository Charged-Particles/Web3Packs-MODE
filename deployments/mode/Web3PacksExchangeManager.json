{
  "address": "0x395Bbb9776B0CC6F180862f814BF66e42894Ad61",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "weth",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "ContractNotAllowed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FundingFailed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "ethPackPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "protocolFee",
          "type": "uint256"
        }
      ],
      "name": "InsufficientForFee",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MismatchedTokens",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        }
      ],
      "name": "MissingLiquidityUUID",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NativeAssetTransferFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotOwnerOrApproved",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NullReceiver",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "router",
          "type": "address"
        }
      ],
      "name": "UnsucessfulSwap",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "chargedParticles",
          "type": "address"
        }
      ],
      "name": "ChargedParticlesSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "chargedState",
          "type": "address"
        }
      ],
      "name": "ChargedStateSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "packType",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "usdPackPrice",
          "type": "bytes32"
        }
      ],
      "name": "PackBundled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "ethAmount",
          "type": "uint256"
        }
      ],
      "name": "PackUnbundled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "ProtocolFeeSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "proton",
          "type": "address"
        }
      ],
      "name": "ProtonSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "router",
          "type": "address"
        }
      ],
      "name": "RouterSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "manager",
          "type": "address"
        }
      ],
      "name": "Web3PacksExchangeManagerSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "manager",
          "type": "address"
        }
      ],
      "name": "Web3PacksManagerSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "web3packs",
          "type": "address"
        }
      ],
      "name": "Web3PacksSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "treasury",
          "type": "address"
        }
      ],
      "name": "Web3PacksTreasurySet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "WithdrawStuckERC1155",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "WithdrawStuckERC20",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "WithdrawStuckERC721",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "WithdrawStuckEther",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "_web3Packs",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_web3PacksManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_weth",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "router",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "token0",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "token1",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "liquidityUuidToken0",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "liquidityUuidToken1",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "percentToken0",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "percentToken1",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minimumLpTokens",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "slippage",
              "type": "uint256"
            },
            {
              "internalType": "int24",
              "name": "tickLower",
              "type": "int24"
            },
            {
              "internalType": "int24",
              "name": "tickUpper",
              "type": "int24"
            },
            {
              "internalType": "bool",
              "name": "stable",
              "type": "bool"
            },
            {
              "internalType": "bytes32",
              "name": "poolId",
              "type": "bytes32"
            },
            {
              "internalType": "enum IWeb3PacksDefs.RouterType",
              "name": "routerType",
              "type": "uint8"
            }
          ],
          "internalType": "struct IWeb3PacksDefs.LiquidityOrderGeneric[]",
          "name": "orders",
          "type": "tuple[]"
        },
        {
          "internalType": "uint256",
          "name": "web3PacksTokenId",
          "type": "uint256"
        }
      ],
      "name": "depositLiquidity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "lpTokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "liquidity",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "stable",
              "type": "bool"
            },
            {
              "internalType": "address",
              "name": "token0",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "token1",
              "type": "address"
            },
            {
              "internalType": "int24",
              "name": "tickLower",
              "type": "int24"
            },
            {
              "internalType": "int24",
              "name": "tickUpper",
              "type": "int24"
            },
            {
              "internalType": "bytes32",
              "name": "poolId",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "router",
              "type": "address"
            },
            {
              "internalType": "enum IWeb3PacksDefs.RouterType",
              "name": "routerType",
              "type": "uint8"
            }
          ],
          "internalType": "struct IWeb3PacksDefs.LiquidityPosition",
          "name": "liquidityPosition",
          "type": "tuple"
        }
      ],
      "name": "getLiquidityTokenData",
      "outputs": [
        {
          "internalType": "address",
          "name": "lpTokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "lpTokenId",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            },
            {
              "internalType": "address",
              "name": "contractAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            }
          ],
          "internalType": "struct IWeb3PacksDefs.ContractCallGeneric[]",
          "name": "contractCalls",
          "type": "tuple[]"
        }
      ],
      "name": "performContractCalls",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            },
            {
              "internalType": "address",
              "name": "router",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenIn",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenOut",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenAmountIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tokenAmountOutMin",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "payableAmountIn",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "liquidityUuid",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "poolId",
              "type": "bytes32"
            },
            {
              "internalType": "bool",
              "name": "stable",
              "type": "bool"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "token0",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "token1",
                  "type": "address"
                }
              ],
              "internalType": "struct IWeb3PacksDefs.Route[]",
              "name": "reverseRoute",
              "type": "tuple[]"
            },
            {
              "internalType": "enum IWeb3PacksDefs.RouterType",
              "name": "routerType",
              "type": "uint8"
            }
          ],
          "internalType": "struct IWeb3PacksDefs.ERC20SwapOrderGeneric[]",
          "name": "orders",
          "type": "tuple[]"
        },
        {
          "internalType": "uint256",
          "name": "web3packsTokenId",
          "type": "uint256"
        }
      ],
      "name": "performSwaps",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "lpTokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "liquidity",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "stable",
              "type": "bool"
            },
            {
              "internalType": "address",
              "name": "token0",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "token1",
              "type": "address"
            },
            {
              "internalType": "int24",
              "name": "tickLower",
              "type": "int24"
            },
            {
              "internalType": "int24",
              "name": "tickUpper",
              "type": "int24"
            },
            {
              "internalType": "bytes32",
              "name": "poolId",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "router",
              "type": "address"
            },
            {
              "internalType": "enum IWeb3PacksDefs.RouterType",
              "name": "routerType",
              "type": "uint8"
            }
          ],
          "internalType": "struct IWeb3PacksDefs.LiquidityPosition",
          "name": "liquidityPosition",
          "type": "tuple"
        },
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "token",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IWeb3PacksDefs.TokenAmount",
              "name": "token0",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "token",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IWeb3PacksDefs.TokenAmount",
              "name": "token1",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "slippage",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "poolId",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "router",
              "type": "address"
            },
            {
              "internalType": "enum IWeb3PacksDefs.RouterType",
              "name": "routerType",
              "type": "uint8"
            },
            {
              "internalType": "bool",
              "name": "exitLpOnUnbundle",
              "type": "bool"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "token0",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "token1",
                  "type": "address"
                }
              ],
              "internalType": "struct IWeb3PacksDefs.Route[]",
              "name": "reverseRoute",
              "type": "tuple[]"
            },
            {
              "internalType": "bool",
              "name": "stable",
              "type": "bool"
            }
          ],
          "internalType": "struct IWeb3PacksDefs.LiquidityPairs",
          "name": "liquidityPair",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "sellAll",
          "type": "bool"
        }
      ],
      "name": "removeLiquidity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "web3packs",
          "type": "address"
        }
      ],
      "name": "setWeb3Packs",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "manager",
          "type": "address"
        }
      ],
      "name": "setWeb3PacksManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            },
            {
              "internalType": "address",
              "name": "router",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenIn",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenOut",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenAmountIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tokenAmountOutMin",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "payableAmountIn",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "liquidityUuid",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "poolId",
              "type": "bytes32"
            },
            {
              "internalType": "bool",
              "name": "stable",
              "type": "bool"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "token0",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "token1",
                  "type": "address"
                }
              ],
              "internalType": "struct IWeb3PacksDefs.Route[]",
              "name": "reverseRoute",
              "type": "tuple[]"
            },
            {
              "internalType": "enum IWeb3PacksDefs.RouterType",
              "name": "routerType",
              "type": "uint8"
            }
          ],
          "internalType": "struct IWeb3PacksDefs.ERC20SwapOrderGeneric[]",
          "name": "erc20SwapOrders",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "token",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IWeb3PacksDefs.TokenAmount",
              "name": "token0",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "token",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IWeb3PacksDefs.TokenAmount",
              "name": "token1",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "slippage",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "poolId",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "router",
              "type": "address"
            },
            {
              "internalType": "enum IWeb3PacksDefs.RouterType",
              "name": "routerType",
              "type": "uint8"
            },
            {
              "internalType": "bool",
              "name": "exitLpOnUnbundle",
              "type": "bool"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "token0",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "token1",
                  "type": "address"
                }
              ],
              "internalType": "struct IWeb3PacksDefs.Route[]",
              "name": "reverseRoute",
              "type": "tuple[]"
            },
            {
              "internalType": "bool",
              "name": "stable",
              "type": "bool"
            }
          ],
          "internalType": "struct IWeb3PacksDefs.LiquidityPairs[]",
          "name": "liquidityPairs",
          "type": "tuple[]"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "swapAllForEth",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "ethAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawERC1155",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "withdrawERC721",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawErc20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawEther",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x456c80d8200a8563bf8672130a38f7f587b5d72f5f9c6910f29f4234a08faa37",
  "receipt": {
    "to": null,
    "from": "0xb8D175F16742395F530e0b3bC1d30BD06B78CdA9",
    "contractAddress": "0x395Bbb9776B0CC6F180862f814BF66e42894Ad61",
    "transactionIndex": 1,
    "gasUsed": "5466340",
    "logsBloom": "0x
    "blockHash": "0xddf7f7a9b44a7bf10a64f5c62cdb1488d8d6757ba407e7254569527ba2fc1a66",
    "transactionHash": "0x456c80d8200a8563bf8672130a38f7f587b5d72f5f9c6910f29f4234a08faa37",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 17918896,
        "transactionHash": "0x456c80d8200a8563bf8672130a38f7f587b5d72f5f9c6910f29f4234a08faa37",
        "address": "0x395Bbb9776B0CC6F180862f814BF66e42894Ad61",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000b8d175f16742395f530e0b3bc1d30bd06b78cda9"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xddf7f7a9b44a7bf10a64f5c62cdb1488d8d6757ba407e7254569527ba2fc1a66"
      }
    ],
    "blockNumber": 17918896,
    "cumulativeGasUsed": "5510191",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x4200000000000000000000000000000000000006"
  ],
  "numDeployments": 3,
  "solcInputHash": "5e4a2495c3b8b307011f8f698a91a439",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"weth\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ContractNotAllowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FundingFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ethPackPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"protocolFee\",\"type\":\"uint256\"}],\"name\":\"InsufficientForFee\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MismatchedTokens\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"MissingLiquidityUUID\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NativeAssetTransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotOwnerOrApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NullReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"}],\"name\":\"UnsucessfulSwap\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"chargedParticles\",\"type\":\"address\"}],\"name\":\"ChargedParticlesSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"chargedState\",\"type\":\"address\"}],\"name\":\"ChargedStateSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"packType\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"usdPackPrice\",\"type\":\"bytes32\"}],\"name\":\"PackBundled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"}],\"name\":\"PackUnbundled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"ProtocolFeeSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proton\",\"type\":\"address\"}],\"name\":\"ProtonSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"}],\"name\":\"RouterSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"}],\"name\":\"Web3PacksExchangeManagerSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"}],\"name\":\"Web3PacksManagerSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"web3packs\",\"type\":\"address\"}],\"name\":\"Web3PacksSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"treasury\",\"type\":\"address\"}],\"name\":\"Web3PacksTreasurySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawStuckERC1155\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawStuckERC20\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"WithdrawStuckERC721\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawStuckEther\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"_web3Packs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_web3PacksManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_weth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"liquidityUuidToken0\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"liquidityUuidToken1\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"percentToken0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"percentToken1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimumLpTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slippage\",\"type\":\"uint256\"},{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"bool\",\"name\":\"stable\",\"type\":\"bool\"},{\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"internalType\":\"enum IWeb3PacksDefs.RouterType\",\"name\":\"routerType\",\"type\":\"uint8\"}],\"internalType\":\"struct IWeb3PacksDefs.LiquidityOrderGeneric[]\",\"name\":\"orders\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"web3PacksTokenId\",\"type\":\"uint256\"}],\"name\":\"depositLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"lpTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"stable\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"enum IWeb3PacksDefs.RouterType\",\"name\":\"routerType\",\"type\":\"uint8\"}],\"internalType\":\"struct IWeb3PacksDefs.LiquidityPosition\",\"name\":\"liquidityPosition\",\"type\":\"tuple\"}],\"name\":\"getLiquidityTokenData\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"lpTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lpTokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"internalType\":\"struct IWeb3PacksDefs.ContractCallGeneric[]\",\"name\":\"contractCalls\",\"type\":\"tuple[]\"}],\"name\":\"performContractCalls\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payableAmountIn\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"liquidityUuid\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"stable\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"}],\"internalType\":\"struct IWeb3PacksDefs.Route[]\",\"name\":\"reverseRoute\",\"type\":\"tuple[]\"},{\"internalType\":\"enum IWeb3PacksDefs.RouterType\",\"name\":\"routerType\",\"type\":\"uint8\"}],\"internalType\":\"struct IWeb3PacksDefs.ERC20SwapOrderGeneric[]\",\"name\":\"orders\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"web3packsTokenId\",\"type\":\"uint256\"}],\"name\":\"performSwaps\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"lpTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"stable\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"enum IWeb3PacksDefs.RouterType\",\"name\":\"routerType\",\"type\":\"uint8\"}],\"internalType\":\"struct IWeb3PacksDefs.LiquidityPosition\",\"name\":\"liquidityPosition\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct IWeb3PacksDefs.TokenAmount\",\"name\":\"token0\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct IWeb3PacksDefs.TokenAmount\",\"name\":\"token1\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"slippage\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"enum IWeb3PacksDefs.RouterType\",\"name\":\"routerType\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"exitLpOnUnbundle\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"}],\"internalType\":\"struct IWeb3PacksDefs.Route[]\",\"name\":\"reverseRoute\",\"type\":\"tuple[]\"},{\"internalType\":\"bool\",\"name\":\"stable\",\"type\":\"bool\"}],\"internalType\":\"struct IWeb3PacksDefs.LiquidityPairs\",\"name\":\"liquidityPair\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"sellAll\",\"type\":\"bool\"}],\"name\":\"removeLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"web3packs\",\"type\":\"address\"}],\"name\":\"setWeb3Packs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"}],\"name\":\"setWeb3PacksManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payableAmountIn\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"liquidityUuid\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"stable\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"}],\"internalType\":\"struct IWeb3PacksDefs.Route[]\",\"name\":\"reverseRoute\",\"type\":\"tuple[]\"},{\"internalType\":\"enum IWeb3PacksDefs.RouterType\",\"name\":\"routerType\",\"type\":\"uint8\"}],\"internalType\":\"struct IWeb3PacksDefs.ERC20SwapOrderGeneric[]\",\"name\":\"erc20SwapOrders\",\"type\":\"tuple[]\"},{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct IWeb3PacksDefs.TokenAmount\",\"name\":\"token0\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct IWeb3PacksDefs.TokenAmount\",\"name\":\"token1\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"slippage\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"enum IWeb3PacksDefs.RouterType\",\"name\":\"routerType\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"exitLpOnUnbundle\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"}],\"internalType\":\"struct IWeb3PacksDefs.Route[]\",\"name\":\"reverseRoute\",\"type\":\"tuple[]\"},{\"internalType\":\"bool\",\"name\":\"stable\",\"type\":\"bool\"}],\"internalType\":\"struct IWeb3PacksDefs.LiquidityPairs[]\",\"name\":\"liquidityPairs\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"swapAllForEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawERC1155\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"withdrawERC721\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawErc20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawEther\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setWeb3Packs(address)\":{\"details\":\"Setup the Web3Packs Interface\"},\"setWeb3PacksManager(address)\":{\"details\":\"Setup the Web3Packs Interface\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Web3PacksExchangeManager.sol\":\"Web3PacksExchangeManager\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x0849d93b16c9940beb286a7864ed02724b248b93e0d80ef6355af5ef15c64773\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x190dd6f8d592b7e4e930feb7f4313aeb8e1c4ad3154c27ce1cf6a512fc30d8cc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6392f2cfe3a5ee802227fe7a2dfd47096d881aec89bddd214b35c5b46d3cd941\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9b72f93be69ca894d8492c244259615c4a742afc8d63720dbc8bb81087d9b238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n}\\n\",\"keccak256\":\"0xe5905c0989cf5a865ed9bb7b9252536ca011c5b744017a82a7d4443b9c00a891\"},\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\":{\"content\":\"pragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\",\"keccak256\":\"0x8a3c5c449d4b7cd76513ed6995f4b86e4a86f222c770f8442f5fc128ce29b4d2\"},\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\":{\"content\":\"pragma solidity >=0.6.2;\\n\\nimport './IUniswapV2Router01.sol';\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\",\"keccak256\":\"0x744e30c133bd0f7ca9e7163433cf6d72f45c6bb1508c2c9c02f1a6db796ae59d\"},\"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.6.0;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\nlibrary TransferHelper {\\n    /// @notice Transfers tokens from the targeted address to the given destination\\n    /// @notice Errors with 'STF' if transfer fails\\n    /// @param token The contract address of the token to be transferred\\n    /// @param from The originating address from which the tokens will be transferred\\n    /// @param to The destination address of the transfer\\n    /// @param value The amount to be transferred\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) =\\n            token.call(abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'STF');\\n    }\\n\\n    /// @notice Transfers tokens from msg.sender to a recipient\\n    /// @dev Errors with ST if transfer fails\\n    /// @param token The contract address of the token which will be transferred\\n    /// @param to The recipient of the transfer\\n    /// @param value The value of the transfer\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.transfer.selector, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'ST');\\n    }\\n\\n    /// @notice Approves the stipulated contract to spend the given allowance in the given token\\n    /// @dev Errors with 'SA' if transfer fails\\n    /// @param token The contract address of the token to be approved\\n    /// @param to The target of the approval\\n    /// @param value The amount of the given token the target will be allowed to spend\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.approve.selector, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'SA');\\n    }\\n\\n    /// @notice Transfers ETH to the recipient address\\n    /// @dev Fails with `STE`\\n    /// @param to The destination of the transfer\\n    /// @param value The value to be transferred\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, 'STE');\\n    }\\n}\\n\",\"keccak256\":\"0x9af98b0908c96320ca6d08b22f0efca864742f6adbe5794cafe2d1d2e808b0cd\",\"license\":\"GPL-2.0-or-later\"},\"contracts/Web3PacksExchangeManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// Web3PacksExchangeManager.sol\\n// Copyright (c) 2023 Firma Lux, Inc. <https://charged.fi>\\n//\\n// Permission is hereby granted, free of charge, to any person obtaining a copy\\n// of this software and associated documentation files (the \\\"Software\\\"), to deal\\n// in the Software without restriction, including without limitation the rights\\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\n// copies of the Software, and to permit persons to whom the Software is\\n// furnished to do so, subject to the following conditions:\\n//\\n// The above copyright notice and this permission notice shall be included in all\\n// copies or substantial portions of the Software.\\n//\\n// THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n// FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n// SOFTWARE.\\n\\n//                _    ____                   _\\n//               | |  |___ \\\\                 | |\\n//  __      _____| |__  __) |_ __   __ _  ___| | _____\\n//  \\\\ \\\\ /\\\\ / / _ \\\\ '_ \\\\|__ <| '_ \\\\ / _` |/ __| |/ / __|\\n//   \\\\ V  V /  __/ |_) |__) | |_) | (_| | (__|   <\\\\__ \\\\\\n//    \\\\_/\\\\_/ \\\\___|_.__/____/| .__/ \\\\__,_|\\\\___|_|\\\\_\\\\___/\\n//                          | |\\n//                          |_|\\n\\npragma solidity 0.8.17;\\npragma abicoder v2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\\\";\\nimport \\\"./lib/BlackholePrevention.sol\\\";\\nimport \\\"./lib/Balancer.sol\\\";\\nimport \\\"./lib/UniswapV2.sol\\\";\\nimport \\\"./lib/UniswapV3.sol\\\";\\nimport \\\"./lib/Velodrome.sol\\\";\\nimport \\\"./lib/SwapMode.sol\\\";\\nimport \\\"./interfaces/IWeb3Packs.sol\\\";\\nimport \\\"./interfaces/IWeb3PacksManager.sol\\\";\\nimport \\\"./interfaces/IWeb3PacksExchangeManager.sol\\\";\\n\\ncontract Web3PacksExchangeManager is\\n  IWeb3PacksExchangeManager,\\n  Ownable,\\n  Pausable,\\n  BlackholePrevention,\\n  ReentrancyGuard,\\n  Balancer,\\n  UniswapV2,\\n  UniswapV3,\\n  Velodrome,\\n  SwapMode\\n{\\n  address public _weth;\\n  address public _web3Packs;\\n  address public _web3PacksManager;\\n  uint256 internal _receivedAmount;\\n\\n  mapping (bytes32 => TokenAmount) internal _swapForLiquidityAmount;\\n\\n  // TODO: Refactor router handling for better scalability and maintainability\\n  // Consider using an array of routers in the constructor and removing the RouterType enum\\n  constructor(address weth)\\n    Balancer(weth)\\n    UniswapV2(weth)\\n    UniswapV3(weth)\\n    Velodrome(weth)\\n    SwapMode(weth)\\n  {\\n    _weth = weth;\\n  }\\n\\n  receive() external payable {\\n    _receivedAmount = msg.value;\\n  }\\n\\n  fallback() external payable {\\n    _receivedAmount = msg.value;\\n  }\\n\\n  /***********************************|\\n  |          Public Functions         |\\n  |__________________________________*/\\n\\n  function performContractCalls(\\n    ContractCallGeneric[] calldata contractCalls\\n  )\\n    external\\n    override\\n    onlyWeb3Packs\\n  {\\n    for (uint256 i; i < contractCalls.length; i++) {\\n      _contractCall(contractCalls[i]);\\n    }\\n  }\\n\\n  function performSwaps(\\n    ERC20SwapOrderGeneric[] calldata orders,\\n    uint256 web3packsTokenId\\n  )\\n    external\\n    override\\n    onlyWeb3Packs\\n  {\\n    for (uint256 i; i < orders.length; i++) {\\n      _swapSingleOrder(orders[i], web3packsTokenId);\\n    }\\n  }\\n\\n  function depositLiquidity(\\n    LiquidityOrderGeneric[] calldata orders,\\n    uint256 web3PacksTokenId\\n  )\\n    external\\n    override\\n    onlyWeb3Packs\\n  {\\n    uint256 wethSplit;\\n    for (uint256 i; i < orders.length; i++) {\\n      if (orders[i].liquidityUuidToken0 == bytes32(\\\"WETH\\\") || orders[i].liquidityUuidToken1 == bytes32(\\\"WETH\\\")) {\\n        wethSplit++;\\n      }\\n    }\\n\\n    uint256 wethBalance = IERC20(_weth).balanceOf(address(this));\\n    uint256 wethPerLp = wethSplit > 1 ? wethBalance / wethSplit : 0;\\n\\n    for (uint256 i; i < orders.length; i++) {\\n      _createLiquidityPosition(orders[i], web3PacksTokenId, wethPerLp);\\n    }\\n  }\\n\\n  function removeLiquidity(\\n    LiquidityPosition calldata liquidityPosition,\\n    LiquidityPairs calldata liquidityPair,\\n    address receiver,\\n    bool sellAll\\n  )\\n    external\\n    override\\n    onlyWeb3Packs\\n  {\\n    (uint256 amount0, uint256 amount1) = _removeLiquidity(liquidityPosition, liquidityPair);\\n\\n    if (!sellAll) {\\n      TransferHelper.safeTransfer(liquidityPosition.token0, receiver, amount0);\\n      TransferHelper.safeTransfer(liquidityPosition.token1, receiver, amount1);\\n    }\\n  }\\n\\n  function swapAllForEth(\\n    ERC20SwapOrderGeneric[] calldata erc20SwapOrders,\\n    LiquidityPairs[] memory liquidityPairs,\\n    address receiver\\n  )\\n    external\\n    onlyWeb3Packs\\n    returns (uint ethAmount)\\n  {\\n    // Swaps\\n    for (uint256 i; i < erc20SwapOrders.length; i++) {\\n      ERC20SwapOrderGeneric memory swap = erc20SwapOrders[i];\\n      _requireAllowlisted(swap.router);\\n\\n      if (swap.routerType == RouterType.Balancer) {\\n        balancerSwapForEth(swap.tokenIn, swap.tokenOut, swap.router, swap.poolId);\\n      }\\n      if (swap.routerType == RouterType.Velodrome) {\\n        velodromeSwapForEth(swap.tokenIn, swap.tokenOut, swap.router, swap.reverseRoute, swap.stable);\\n      }\\n      if (swap.routerType == RouterType.SwapMode) {\\n        swapModeSwapForEth(swap.tokenIn, swap.tokenOut, swap.router, swap.reverseRoute);\\n      }\\n      if (swap.routerType == RouterType.UniswapV2) {\\n        uniswapV2SwapForEth(swap.tokenIn, swap.tokenOut, swap.router);\\n      }\\n      if (swap.routerType == RouterType.UniswapV3) {\\n        uniswapV3SwapForEth(swap.tokenIn, swap.tokenOut, swap.router);\\n      }\\n    }\\n\\n    // LPs\\n    for (uint256 i; i < liquidityPairs.length; i++) {\\n      LiquidityPairs memory lp = liquidityPairs[i];\\n      _requireAllowlisted(lp.router);\\n\\n      if (lp.routerType == RouterType.Balancer) {\\n        balancerSwapForEth(lp.token0.token, lp.token1.token, lp.router, lp.poolId);\\n      }\\n      if (lp.routerType == RouterType.Velodrome) {\\n        velodromeSwapForEth(lp.token0.token, lp.token1.token, lp.router, lp.reverseRoute, lp.stable);\\n      }\\n      if (lp.routerType == RouterType.SwapMode) {\\n        swapModeSwapForEth(lp.token0.token, lp.token1.token, lp.router, lp.reverseRoute);\\n      }\\n      if (lp.routerType == RouterType.UniswapV2) {\\n        uniswapV2SwapForEth(lp.token0.token, lp.token1.token, lp.router);\\n      }\\n      if (lp.routerType == RouterType.UniswapV3) {\\n        uniswapV3SwapForEth(lp.token0.token, lp.token1.token, lp.router);\\n      }\\n    }\\n\\n    // Transfer wETH to Receiver\\n    ethAmount = IERC20(_weth).balanceOf(address(this));\\n    TransferHelper.safeTransfer(_weth, receiver, ethAmount);\\n  }\\n\\n  function getLiquidityTokenData(LiquidityPosition calldata liquidityPosition)\\n    external\\n    view\\n    override\\n    returns (address lpTokenAddress, uint256 lpTokenId)\\n  {\\n    if (liquidityPosition.routerType == RouterType.Balancer) {\\n      return balancerGetLiquidityTokenAddress(liquidityPosition);\\n    }\\n    if (liquidityPosition.routerType == RouterType.Velodrome) {\\n      return velodromeGetLiquidityTokenAddress(liquidityPosition);\\n    }\\n    if (liquidityPosition.routerType == RouterType.SwapMode) {\\n      return swapModeGetLiquidityTokenAddress(liquidityPosition);\\n    }\\n    if (liquidityPosition.routerType == RouterType.UniswapV2) {\\n      return uniswapV2GetLiquidityTokenAddress(liquidityPosition);\\n    }\\n    if (liquidityPosition.routerType == RouterType.UniswapV3) {\\n      return uniswapV3GetLiquidityTokenAddress(liquidityPosition);\\n    }\\n  }\\n\\n\\n  /***********************************|\\n  |         Private Functions         |\\n  |__________________________________*/\\n\\n  function _contractCall(\\n    ContractCallGeneric memory contractCall\\n  ) internal {\\n    _requireAllowlisted(contractCall.contractAddress);\\n    require(_receivedAmount >= contractCall.amountIn, \\\"Invalid amount for ContractCall\\\");\\n\\n    (bool success, bytes memory data) = contractCall.contractAddress.call{value: contractCall.amountIn}(\\n      contractCall.callData\\n    );\\n    if (!success) {\\n      assembly {\\n        let dataSize := mload(data) // Load the size of the data\\n        let dataPtr := add(data, 0x20) // Advance data pointer to the next word\\n        revert(dataPtr, dataSize) // Revert with the given data\\n      }\\n    }\\n  }\\n\\n  function _swapSingleOrder(\\n    ERC20SwapOrderGeneric memory swapOrder,\\n    uint256 web3packsTokenId\\n  )\\n    internal\\n    returns (uint256 amountOut)\\n  {\\n    _requireAllowlisted(swapOrder.router);\\n\\n    TransferHelper.safeApprove(swapOrder.tokenIn, swapOrder.router, swapOrder.tokenAmountIn);\\n\\n    if (swapOrder.routerType == RouterType.Balancer) {\\n      amountOut = balancerSwapSingle(swapOrder);\\n    }\\n    if (swapOrder.routerType == RouterType.Velodrome) {\\n      amountOut = velodromeSwapSingle(swapOrder);\\n    }\\n    if (swapOrder.routerType == RouterType.SwapMode) {\\n      amountOut = swapModeSwapSingle(swapOrder);\\n    }\\n    if (swapOrder.routerType == RouterType.UniswapV2) {\\n      amountOut = uniswapV2SwapSingle(swapOrder);\\n    }\\n    if (swapOrder.routerType == RouterType.UniswapV3) {\\n      amountOut = uniswapV3SwapSingle(swapOrder);\\n    }\\n\\n    // Deposit the Assets into the Web3Packs NFT\\n    if (swapOrder.liquidityUuid == bytes32(\\\"\\\")) {\\n      _energize(web3packsTokenId, swapOrder.tokenOut, amountOut);\\n    } else {\\n      _swapForLiquidityAmount[swapOrder.liquidityUuid] = TokenAmount({token: swapOrder.tokenOut, amount: amountOut});\\n    }\\n  }\\n\\n  function _createLiquidityPosition(\\n    LiquidityOrderGeneric memory liquidityOrder,\\n    uint256 web3PacksTokenId,\\n    uint256 wethPerLp\\n  ) internal {\\n    _requireAllowlisted(liquidityOrder.router);\\n\\n    uint256 lpTokenId;\\n    uint256 liquidity;\\n    uint256 amount0;\\n    uint256 amount1;\\n\\n    (uint256 balanceAmount0, uint256 balanceAmount1) = _getAmountsForLiquidity(liquidityOrder, wethPerLp);\\n\\n    uint256 amount0Min = (balanceAmount0 * (10000 - liquidityOrder.slippage)) / 10000;\\n    uint256 amount1Min = (balanceAmount1 * (10000 - liquidityOrder.slippage)) / 10000;\\n\\n    TransferHelper.safeApprove(liquidityOrder.token0, address(liquidityOrder.router), balanceAmount0);\\n    TransferHelper.safeApprove(liquidityOrder.token1, address(liquidityOrder.router), balanceAmount1);\\n\\n    if (liquidityOrder.routerType == RouterType.Balancer) {\\n      (lpTokenId, liquidity, amount0, amount1) = balancerCreatePosition(liquidityOrder, balanceAmount0, balanceAmount1);\\n      _energize(web3PacksTokenId, address(uint160(lpTokenId)), liquidity);\\n    }\\n\\n    if (liquidityOrder.routerType == RouterType.Velodrome) {\\n      (lpTokenId, liquidity, amount0, amount1) = velodromeCreatePosition(liquidityOrder, balanceAmount0, balanceAmount1, amount0Min, amount1Min);\\n      _energize(web3PacksTokenId, address(uint160(lpTokenId)), 0);\\n    }\\n\\n    if (liquidityOrder.routerType == RouterType.SwapMode) {\\n      (lpTokenId, liquidity, amount0, amount1) = swapModeCreatePosition(liquidityOrder, balanceAmount0, balanceAmount1, amount0Min, amount1Min);\\n      _energize(web3PacksTokenId, address(uint160(lpTokenId)), 0);\\n    }\\n\\n    if (liquidityOrder.routerType == RouterType.UniswapV2) {\\n      (lpTokenId, liquidity, amount0, amount1) = uniswapV2CreatePosition(liquidityOrder, balanceAmount0, balanceAmount1, amount0Min, amount1Min);\\n      _energize(web3PacksTokenId, address(uint160(lpTokenId)), 0);\\n    }\\n\\n    if (liquidityOrder.routerType == RouterType.UniswapV3) {\\n      (lpTokenId, liquidity, amount0, amount1) = uniswapV3CreatePosition(liquidityOrder, balanceAmount0, balanceAmount1, amount0Min, amount1Min);\\n      _bond(web3PacksTokenId, liquidityOrder.router, lpTokenId);\\n    }\\n\\n    // Track Liquidity Positions\\n    LiquidityPosition memory position = LiquidityPosition({\\n      lpTokenId: lpTokenId,\\n      liquidity: liquidity,\\n      stable: liquidityOrder.stable,\\n      token0: liquidityOrder.token0,\\n      token1: liquidityOrder.token1,\\n      tickLower: liquidityOrder.tickLower,\\n      tickUpper: liquidityOrder.tickUpper,\\n      poolId: liquidityOrder.poolId,\\n      routerType: liquidityOrder.routerType,\\n      router: liquidityOrder.router\\n    });\\n    IWeb3PacksManager(_web3PacksManager).saveLiquidityPosition(web3PacksTokenId, position);\\n\\n    // Refund unused assets\\n    _refundUnusedAssets(\\n      liquidityOrder.token0,\\n      amount0,\\n      balanceAmount0,\\n      liquidityOrder.token1,\\n      amount1,\\n      balanceAmount1\\n    );\\n  }\\n\\n  function _removeLiquidity(\\n    LiquidityPosition memory liquidityPosition,\\n    LiquidityPairs memory liquidityPair\\n  )\\n    internal\\n    returns (uint amount0, uint amount1)\\n  {\\n    _requireAllowlisted(liquidityPosition.router);\\n\\n    if (liquidityPosition.routerType == RouterType.Balancer) {\\n      (amount0, amount1) = balancerRemoveLiquidity(liquidityPosition, liquidityPair);\\n    }\\n    if (liquidityPosition.routerType == RouterType.Velodrome) {\\n      (amount0, amount1) = velodromeRemoveLiquidity(liquidityPosition, liquidityPair);\\n    }\\n    if (liquidityPosition.routerType == RouterType.SwapMode) {\\n      (amount0, amount1) = swapModeRemoveLiquidity(liquidityPosition, liquidityPair);\\n    }\\n    if (liquidityPosition.routerType == RouterType.UniswapV2) {\\n      (amount0, amount1) = uniswapV2RemoveLiquidity(liquidityPosition, liquidityPair);\\n    }\\n    if (liquidityPosition.routerType == RouterType.UniswapV3) {\\n      (amount0, amount1) = uniswapV3RemoveLiquidity(liquidityPosition, liquidityPair);\\n      (amount0, amount1) = uniswapV3CollectLpFees(liquidityPosition);\\n    }\\n  }\\n\\n  function _getAmountsForLiquidity(\\n    LiquidityOrderGeneric memory liquidityOrder,\\n    uint256 wethPerLp\\n  )\\n    internal\\n    returns (uint256 balanceAmount0, uint256 balanceAmount1)\\n  {\\n    uint256 wethBalance = IERC20(_weth).balanceOf(address(this));\\n\\n    if (liquidityOrder.liquidityUuidToken0 == bytes32(\\\"\\\")) revert MissingLiquidityUUID(liquidityOrder.token0);\\n    if (liquidityOrder.liquidityUuidToken0 != bytes32(\\\"WETH\\\")) {\\n      if (liquidityOrder.token0 != _swapForLiquidityAmount[liquidityOrder.liquidityUuidToken0].token) revert MismatchedTokens();\\n      balanceAmount0 = _swapForLiquidityAmount[liquidityOrder.liquidityUuidToken0].amount;\\n      delete _swapForLiquidityAmount[liquidityOrder.liquidityUuidToken0];\\n    } else {\\n      balanceAmount0 = wethPerLp > 0 ? wethPerLp : wethBalance;\\n    }\\n\\n    if (liquidityOrder.liquidityUuidToken1 == bytes32(\\\"\\\")) revert MissingLiquidityUUID(liquidityOrder.token1);\\n    if (liquidityOrder.liquidityUuidToken1 != bytes32(\\\"WETH\\\")) {\\n      if (liquidityOrder.token1 != _swapForLiquidityAmount[liquidityOrder.liquidityUuidToken1].token) revert MismatchedTokens();\\n      balanceAmount1 = _swapForLiquidityAmount[liquidityOrder.liquidityUuidToken1].amount;\\n      delete _swapForLiquidityAmount[liquidityOrder.liquidityUuidToken1];\\n    } else {\\n      balanceAmount1 = wethPerLp > 0 ? wethPerLp : wethBalance;\\n    }\\n\\n    if (liquidityOrder.liquidityUuidToken0 != bytes32(\\\"WETH\\\") || wethPerLp == 0) {\\n      balanceAmount0 = (balanceAmount0 * liquidityOrder.percentToken0) / 10000;\\n    }\\n    if (liquidityOrder.liquidityUuidToken1 != bytes32(\\\"WETH\\\") || wethPerLp == 0) {\\n      balanceAmount1 = (balanceAmount1 * liquidityOrder.percentToken1) / 10000;\\n    }\\n  }\\n\\n  function _energize(\\n    uint256 tokenId,\\n    address tokenAddress,\\n    uint256 tokenAmount\\n  ) internal {\\n    if (tokenAmount == 0) {\\n      tokenAmount = IERC20(tokenAddress).balanceOf(address(this));\\n    }\\n    TransferHelper.safeTransfer(tokenAddress, _web3Packs, tokenAmount);\\n    IWeb3Packs(_web3Packs).energize(tokenId, tokenAddress, tokenAmount);\\n  }\\n\\n  function _bond(\\n    uint256 tokenId,\\n    address nftTokenAddress,\\n    uint256 mintedTokenId\\n  ) internal {\\n    IERC721(nftTokenAddress).safeTransferFrom(address(this), _web3Packs, mintedTokenId);\\n    IWeb3Packs(_web3Packs).bond(tokenId, nftTokenAddress, mintedTokenId);\\n  }\\n\\n  function _refundUnusedAssets(\\n    address token0,\\n    uint256 amount0,\\n    uint256 amount0ToMint,\\n    address token1,\\n    uint256 amount1,\\n    uint256 amount1ToMint\\n  ) internal {\\n    // Remove allowance and refund in both assets.\\n    if (amount0 < amount0ToMint) {\\n      uint256 refund0 = amount0ToMint - amount0;\\n      TransferHelper.safeTransfer(token0, _msgSender(), refund0);\\n    }\\n\\n    if (amount1 < amount1ToMint) {\\n      uint256 refund1 = amount1ToMint - amount1;\\n      TransferHelper.safeTransfer(token1, _msgSender(), refund1);\\n    }\\n  }\\n\\n  function _requireAllowlisted(address contractAddress) internal {\\n    if (!IWeb3PacksManager(_web3PacksManager).isContractAllowed(contractAddress)) {\\n      revert ContractNotAllowed();\\n    }\\n  }\\n\\n  /***********************************|\\n  |          Only Admin/DAO           |\\n  |__________________________________*/\\n\\n  /**\\n    * @dev Setup the Web3Packs Interface\\n  */\\n  function setWeb3Packs(address web3packs) external onlyOwner {\\n    require(web3packs != address(0), \\\"Invalid address for web3packs\\\");\\n    _web3Packs = web3packs;\\n    emit Web3PacksSet(web3packs);\\n  }\\n\\n  /**\\n    * @dev Setup the Web3Packs Interface\\n  */\\n  function setWeb3PacksManager(address manager) external onlyOwner {\\n    require(manager != address(0), \\\"Invalid address for web3packs manager\\\");\\n    _web3PacksManager = manager;\\n    emit Web3PacksManagerSet(manager);\\n  }\\n\\n  /***********************************|\\n  |          Only Admin/DAO           |\\n  |      (blackhole prevention)       |\\n  |__________________________________*/\\n\\n  function withdrawEther(address payable receiver, uint256 amount) external virtual onlyOwner {\\n    _withdrawEther(receiver, amount);\\n  }\\n\\n  function withdrawErc20(address payable receiver, address tokenAddress, uint256 amount) external virtual onlyOwner {\\n    _withdrawERC20(receiver, tokenAddress, amount);\\n  }\\n\\n  function withdrawERC721(address payable receiver, address tokenAddress, uint256 tokenId) external virtual onlyOwner {\\n    _withdrawERC721(receiver, tokenAddress, tokenId);\\n  }\\n\\n  function withdrawERC1155(address payable receiver, address tokenAddress, uint256 tokenId, uint256 amount) external virtual onlyOwner {\\n    _withdrawERC1155(receiver, tokenAddress, tokenId, amount);\\n  }\\n\\n  function onERC721Received(\\n    address,\\n    address,\\n    uint256,\\n    bytes calldata\\n  ) external pure returns(bytes4) {\\n    return this.onERC721Received.selector;\\n  }\\n\\n  modifier onlyWeb3Packs() {\\n    require(msg.sender == _web3Packs, \\\"Web3PacksExchangeManager - Invalid Web3Packs\\\");\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0xb17ff86b8dcb958b952b8ac050eee1a7b7b0d8f2c8cd6850412fb9638e9a394f\",\"license\":\"MIT\"},\"contracts/interfaces/IAlgebraRouter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\npragma abicoder v2;\\n\\nimport './IAlgebraSwapCallback.sol';\\n\\n/// @title Router token swapping functionality\\n/// @notice Functions for swapping tokens via Algebra\\n/// @dev Credit to Uniswap Labs under GPL-2.0-or-later license:\\n/// https://github.com/Uniswap/v3-periphery\\ninterface IAlgebraRouter is IAlgebraSwapCallback {\\n    struct ExactInputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n        uint160 limitSqrtPrice;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactInputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactOutputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n        uint160 limitSqrtPrice;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\\n    /// @dev If native token is used as input, this function should be accompanied by a `refundNativeToken` in multicall to avoid potential loss of native tokens\\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\\n\\n    struct ExactOutputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\n    /// @dev If native token is used as input, this function should be accompanied by a `refundNativeToken` in multicall to avoid potential loss of native tokens\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\n    /// @dev Unlike standard swaps, handles transferring from user before the actual swap.\\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInputSingleSupportingFeeOnTransferTokens(\\n        ExactInputSingleParams calldata params\\n    ) external payable returns (uint256 amountOut);\\n}\\n\",\"keccak256\":\"0x475a3a0d0e8d98d9253ed273e3859bec2036eb18cdfab559e1d0b47bf460f183\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/IAlgebraSwapCallback.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Callback for IAlgebraPoolActions#swap\\n/// @notice Any contract that calls IAlgebraPoolActions#swap must implement this interface\\n/// @dev Credit to Uniswap Labs under GPL-2.0-or-later license:\\n/// https://github.com/Uniswap/v3-core/tree/main/contracts/interfaces\\ninterface IAlgebraSwapCallback {\\n  /// @notice Called to `msg.sender` after executing a swap via IAlgebraPool#swap.\\n  /// @dev In the implementation you must pay the pool tokens owed for the swap.\\n  /// The caller of this method _must_ be checked to be a AlgebraPool deployed by the canonical AlgebraFactory.\\n  /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\\n  /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\\n  /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\\n  /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\\n  /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\\n  /// @param data Any data passed through by the caller via the IAlgebraPoolActions#swap call\\n  function algebraSwapCallback(int256 amount0Delta, int256 amount1Delta, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0xfc6f0afcc974c97155ac69a783b53d6a55d374f212a2bbe145500f1951cdd1e1\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/IBalancerV2Vault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IAsset {\\n    // solhint-disable-previous-line no-empty-blocks\\n}\\n\\ninterface IBalancerV2Vault {\\n    enum PoolSpecialization { GENERAL, MINIMAL_SWAP_INFO, TWO_TOKEN }\\n\\n    /**\\n     * @dev Returns a Pool's contract address and specialization setting.\\n     */\\n    function getPool(bytes32 poolId) external view returns (address, PoolSpecialization);\\n\\n    // Swaps\\n    //\\n    // Users can swap tokens with Pools by calling the `swap` and `batchSwap` functions. To do this,\\n    // they need not trust Pool contracts in any way: all security checks are made by the Vault. They must however be\\n    // aware of the Pools' pricing algorithms in order to estimate the prices Pools will quote.\\n    //\\n    // The `swap` function executes a single swap, while `batchSwap` can perform multiple swaps in sequence.\\n    // In each individual swap, tokens of one kind are sent from the sender to the Pool (this is the 'token in'),\\n    // and tokens of another kind are sent from the Pool to the recipient in exchange (this is the 'token out').\\n    // More complex swaps, such as one token in to multiple tokens out can be achieved by batching together\\n    // individual swaps.\\n    //\\n    // There are two swap kinds:\\n    //  - 'given in' swaps, where the amount of tokens in (sent to the Pool) is known, and the Pool determines (via the\\n    // `onSwap` hook) the amount of tokens out (to send to the recipient).\\n    //  - 'given out' swaps, where the amount of tokens out (received from the Pool) is known, and the Pool determines\\n    // (via the `onSwap` hook) the amount of tokens in (to receive from the sender).\\n    //\\n    // Additionally, it is possible to chain swaps using a placeholder input amount, which the Vault replaces with\\n    // the calculated output of the previous swap. If the previous swap was 'given in', this will be the calculated\\n    // tokenOut amount. If the previous swap was 'given out', it will use the calculated tokenIn amount. These extended\\n    // swaps are known as 'multihop' swaps, since they 'hop' through a number of intermediate tokens before arriving at\\n    // the final intended token.\\n    //\\n    // In all cases, tokens are only transferred in and out of the Vault (or withdrawn from and deposited into Internal\\n    // Balance) after all individual swaps have been completed, and the net token balance change computed. This makes\\n    // certain swap patterns, such as multihops, or swaps that interact with the same token pair in multiple Pools, cost\\n    // much less gas than they would otherwise.\\n    //\\n    // It also means that under certain conditions it is possible to perform arbitrage by swapping with multiple\\n    // Pools in a way that results in net token movement out of the Vault (profit), with no tokens being sent in (only\\n    // updating the Pool's internal accounting).\\n    //\\n    // To protect users from front-running or the market changing rapidly, they supply a list of 'limits' for each token\\n    // involved in the swap, where either the maximum number of tokens to send (by passing a positive value) or the\\n    // minimum amount of tokens to receive (by passing a negative value) is specified.\\n    //\\n    // Additionally, a 'deadline' timestamp can also be provided, forcing the swap to fail if it occurs after\\n    // this point in time (e.g. if the transaction failed to be included in a block promptly).\\n    //\\n    // If interacting with Pools that hold WETH, it is possible to both send and receive ETH directly: the Vault will do\\n    // the wrapping and unwrapping. To enable this mechanism, the IAsset sentinel value (the zero address) must be\\n    // passed in the `assets` array instead of the WETH address. Note that it is possible to combine ETH and WETH in the\\n    // same swap. Any excess ETH will be sent back to the caller (not the sender, which is relevant for relayers).\\n    //\\n    // Finally, Internal Balance can be used when either sending or receiving tokens.\\n\\n    enum SwapKind { GIVEN_IN, GIVEN_OUT }\\n\\n    /**\\n     * @dev Performs a swap with a single Pool.\\n     *\\n     * If the swap is 'given in' (the number of tokens to send to the Pool is known), it returns the amount of tokens\\n     * taken from the Pool, which must be greater than or equal to `limit`.\\n     *\\n     * If the swap is 'given out' (the number of tokens to take from the Pool is known), it returns the amount of tokens\\n     * sent to the Pool, which must be less than or equal to `limit`.\\n     *\\n     * Internal Balance usage and the recipient are determined by the `funds` struct.\\n     *\\n     * Emits a `Swap` event.\\n     */\\n    function swap(\\n        SingleSwap memory singleSwap,\\n        FundManagement memory funds,\\n        uint256 limit,\\n        uint256 deadline\\n    ) external payable returns (uint256);\\n\\n    /**\\n     * @dev Data for a single swap executed by `swap`. `amount` is either `amountIn` or `amountOut` depending on\\n     * the `kind` value.\\n     *\\n     * `assetIn` and `assetOut` are either token addresses, or the IAsset sentinel value for ETH (the zero address).\\n     * Note that Pools never interact with ETH directly: it will be wrapped to or unwrapped from WETH by the Vault.\\n     *\\n     * The `userData` field is ignored by the Vault, but forwarded to the Pool in the `onSwap` hook, and may be\\n     * used to extend swap behavior.\\n     */\\n    struct SingleSwap {\\n        bytes32 poolId;\\n        SwapKind kind;\\n        IAsset assetIn;\\n        IAsset assetOut;\\n        uint256 amount;\\n        bytes userData;\\n    }\\n\\n\\n    /**\\n     * @dev Called by users to join a Pool, which transfers tokens from `sender` into the Pool's balance. This will\\n     * trigger custom Pool behavior, which will typically grant something in return to `recipient` - often tokenized\\n     * Pool shares.\\n     *\\n     * If the caller is not `sender`, it must be an authorized relayer for them.\\n     *\\n     * The `assets` and `maxAmountsIn` arrays must have the same length, and each entry indicates the maximum amount\\n     * to send for each asset. The amounts to send are decided by the Pool and not the Vault: it just enforces\\n     * these maximums.\\n     *\\n     * If joining a Pool that holds WETH, it is possible to send ETH directly: the Vault will do the wrapping. To enable\\n     * this mechanism, the IAsset sentinel value (the zero address) must be passed in the `assets` array instead of the\\n     * WETH address. Note that it is not possible to combine ETH and WETH in the same join. Any excess ETH will be sent\\n     * back to the caller (not the sender, which is important for relayers).\\n     *\\n     * `assets` must have the same length and order as the array returned by `getPoolTokens`. This prevents issues when\\n     * interacting with Pools that register and deregister tokens frequently. If sending ETH however, the array must be\\n     * sorted *before* replacing the WETH address with the ETH sentinel value (the zero address), which means the final\\n     * `assets` array might not be sorted. Pools with no registered tokens cannot be joined.\\n     *\\n     * If `fromInternalBalance` is true, the caller's Internal Balance will be preferred: ERC20 transfers will only\\n     * be made for the difference between the requested amount and Internal Balance (if any). Note that ETH cannot be\\n     * withdrawn from Internal Balance: attempting to do so will trigger a revert.\\n     *\\n     * This causes the Vault to call the `IBasePool.onJoinPool` hook on the Pool's contract, where Pools implement\\n     * their own custom logic. This typically requires additional information from the user (such as the expected number\\n     * of Pool shares). This can be encoded in the `userData` argument, which is ignored by the Vault and passed\\n     * directly to the Pool's contract, as is `recipient`.\\n     *\\n     * Emits a `PoolBalanceChanged` event.\\n     */\\n    function joinPool(\\n        bytes32 poolId,\\n        address sender,\\n        address recipient,\\n        JoinPoolRequest memory request\\n    ) external payable;\\n\\n    struct JoinPoolRequest {\\n        IAsset[] assets;\\n        uint256[] maxAmountsIn;\\n        bytes userData;\\n        bool fromInternalBalance;\\n    }\\n\\n    enum JoinKind {\\n        INIT,\\n        EXACT_TOKENS_IN_FOR_BPT_OUT,\\n        TOKEN_IN_FOR_EXACT_BPT_OUT,\\n        ALL_TOKENS_IN_FOR_EXACT_BPT_OUT\\n    }\\n\\n    /**\\n     * @dev Called by users to exit a Pool, which transfers tokens from the Pool's balance to `recipient`. This will\\n     * trigger custom Pool behavior, which will typically ask for something in return from `sender` - often tokenized\\n     * Pool shares. The amount of tokens that can be withdrawn is limited by the Pool's `cash` balance (see\\n     * `getPoolTokenInfo`).\\n     *\\n     * If the caller is not `sender`, it must be an authorized relayer for them.\\n     *\\n     * The `tokens` and `minAmountsOut` arrays must have the same length, and each entry in these indicates the minimum\\n     * token amount to receive for each token contract. The amounts to send are decided by the Pool and not the Vault:\\n     * it just enforces these minimums.\\n     *\\n     * If exiting a Pool that holds WETH, it is possible to receive ETH directly: the Vault will do the unwrapping. To\\n     * enable this mechanism, the IAsset sentinel value (the zero address) must be passed in the `assets` array instead\\n     * of the WETH address. Note that it is not possible to combine ETH and WETH in the same exit.\\n     *\\n     * `assets` must have the same length and order as the array returned by `getPoolTokens`. This prevents issues when\\n     * interacting with Pools that register and deregister tokens frequently. If receiving ETH however, the array must\\n     * be sorted *before* replacing the WETH address with the ETH sentinel value (the zero address), which means the\\n     * final `assets` array might not be sorted. Pools with no registered tokens cannot be exited.\\n     *\\n     * If `toInternalBalance` is true, the tokens will be deposited to `recipient`'s Internal Balance. Otherwise,\\n     * an ERC20 transfer will be performed. Note that ETH cannot be deposited to Internal Balance: attempting to\\n     * do so will trigger a revert.\\n     *\\n     * `minAmountsOut` is the minimum amount of tokens the user expects to get out of the Pool, for each token in the\\n     * `tokens` array. This array must match the Pool's registered tokens.\\n     *\\n     * This causes the Vault to call the `IBasePool.onExitPool` hook on the Pool's contract, where Pools implement\\n     * their own custom logic. This typically requires additional information from the user (such as the expected number\\n     * of Pool shares to return). This can be encoded in the `userData` argument, which is ignored by the Vault and\\n     * passed directly to the Pool's contract.\\n     *\\n     * Emits a `PoolBalanceChanged` event.\\n     */\\n    function exitPool(\\n        bytes32 poolId,\\n        address sender,\\n        address payable recipient,\\n        ExitPoolRequest memory request\\n    ) external;\\n\\n    struct ExitPoolRequest {\\n        IAsset[] assets;\\n        uint256[] minAmountsOut;\\n        bytes userData;\\n        bool toInternalBalance;\\n    }\\n\\n    enum ExitKind {\\n        EXACT_BPT_IN_FOR_ONE_TOKEN_OUT,\\n        EXACT_BPT_IN_FOR_TOKENS_OUT,\\n        BPT_IN_FOR_EXACT_TOKENS_OUT,\\n        MANAGEMENT_FEE_TOKENS_OUT // for InvestmentPool\\n    }\\n\\n    /**\\n     * @dev All tokens in a swap are either sent from the `sender` account to the Vault, or from the Vault to the\\n     * `recipient` account.\\n     *\\n     * If the caller is not `sender`, it must be an authorized relayer for them.\\n     *\\n     * If `fromInternalBalance` is true, the `sender`'s Internal Balance will be preferred, performing an ERC20\\n     * transfer for the difference between the requested amount and the User's Internal Balance (if any). The `sender`\\n     * must have allowed the Vault to use their tokens via `IERC20.approve()`. This matches the behavior of\\n     * `joinPool`.\\n     *\\n     * If `toInternalBalance` is true, tokens will be deposited to `recipient`'s internal balance instead of\\n     * transferred. This matches the behavior of `exitPool`.\\n     *\\n     * Note that ETH cannot be deposited to or withdrawn from Internal Balance: attempting to do so will trigger a\\n     * revert.\\n     */\\n    struct FundManagement {\\n        address sender;\\n        bool fromInternalBalance;\\n        address payable recipient;\\n        bool toInternalBalance;\\n    }\\n}\\n\",\"keccak256\":\"0x724496a5bf4b14d6ef184a3f1d4915cf38e13b181b809a7ebed3e0f8aad8d615\",\"license\":\"MIT\"},\"contracts/interfaces/INonfungiblePositionManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity 0.8.17;\\npragma abicoder v2;\\ninterface INonfungiblePositionManager {\\n\\n    /// @notice Returns the position information associated with a given token ID.\\n    /// @dev Throws if the token ID is not valid.\\n    /// @param tokenId The ID of the token that represents the position\\n    /// @return nonce The nonce for permits\\n    /// @return operator The address that is approved for spending\\n    /// @return token0 The address of the token0 for a specific pool\\n    /// @return token1 The address of the token1 for a specific pool\\n    /// @return fee The fee associated with the pool\\n    /// @return tickLower The lower end of the tick range for the position\\n    /// @return tickUpper The higher end of the tick range for the position\\n    /// @return liquidity The liquidity of the position\\n    /// @return feeGrowthInside0LastX128 The fee growth of token0 as of the last action on the individual position\\n    /// @return feeGrowthInside1LastX128 The fee growth of token1 as of the last action on the individual position\\n    /// @return tokensOwed0 The uncollected amount of token0 owed to the position as of the last computation\\n    /// @return tokensOwed1 The uncollected amount of token1 owed to the position as of the last computation\\n    function positions(uint256 tokenId)\\n        external\\n        view\\n        returns (\\n            uint96 nonce,\\n            address operator,\\n            address token0,\\n            address token1,\\n            uint24 fee,\\n            int24 tickLower,\\n            int24 tickUpper,\\n            uint128 liquidity,\\n            uint256 feeGrowthInside0LastX128,\\n            uint256 feeGrowthInside1LastX128,\\n            uint128 tokensOwed0,\\n            uint128 tokensOwed1\\n        );\\n\\n    struct MintParams {\\n        address token0;\\n        address token1;\\n        // uint24 fee;\\n        int24 tickLower;\\n        int24 tickUpper;\\n        uint256 amount0Desired;\\n        uint256 amount1Desired;\\n        uint256 amount0Min;\\n        uint256 amount1Min;\\n        address recipient;\\n        uint256 deadline;\\n    }\\n\\n    /// @notice Creates a new position wrapped in a NFT\\n    /// @dev Call this when the pool does exist and is initialized. Note that if the pool is created but not initialized\\n    /// a method does not exist, i.e. the pool is assumed to be initialized.\\n    /// @param params The params necessary to mint a position, encoded as `MintParams` in calldata\\n    /// @return tokenId The ID of the token that represents the minted position\\n    /// @return liquidity The amount of liquidity for this position\\n    /// @return amount0 The amount of token0\\n    /// @return amount1 The amount of token1\\n    function mint(MintParams calldata params)\\n        external\\n        payable\\n        returns (\\n            uint256 tokenId,\\n            uint128 liquidity,\\n            uint256 amount0,\\n            uint256 amount1\\n        );\\n\\n    struct IncreaseLiquidityParams {\\n        uint256 tokenId;\\n        uint256 amount0Desired;\\n        uint256 amount1Desired;\\n        uint256 amount0Min;\\n        uint256 amount1Min;\\n        uint256 deadline;\\n    }\\n\\n    /// @notice Increases the amount of liquidity in a position, with tokens paid by the `msg.sender`\\n    /// @param params tokenId The ID of the token for which liquidity is being increased,\\n    /// amount0Desired The desired amount of token0 to be spent,\\n    /// amount1Desired The desired amount of token1 to be spent,\\n    /// amount0Min The minimum amount of token0 to spend, which serves as a slippage check,\\n    /// amount1Min The minimum amount of token1 to spend, which serves as a slippage check,\\n    /// deadline The time by which the transaction must be included to effect the change\\n    /// @return liquidity The new liquidity amount as a result of the increase\\n    /// @return amount0 The amount of token0 to acheive resulting liquidity\\n    /// @return amount1 The amount of token1 to acheive resulting liquidity\\n    function increaseLiquidity(IncreaseLiquidityParams calldata params)\\n        external\\n        payable\\n        returns (\\n            uint128 liquidity,\\n            uint256 amount0,\\n            uint256 amount1\\n        );\\n\\n    struct DecreaseLiquidityParams {\\n        uint256 tokenId;\\n        uint128 liquidity;\\n        uint256 amount0Min;\\n        uint256 amount1Min;\\n        uint256 deadline;\\n    }\\n\\n    /// @notice Decreases the amount of liquidity in a position and accounts it to the position\\n    /// @param params tokenId The ID of the token for which liquidity is being decreased,\\n    /// amount The amount by which liquidity will be decreased,\\n    /// amount0Min The minimum amount of token0 that should be accounted for the burned liquidity,\\n    /// amount1Min The minimum amount of token1 that should be accounted for the burned liquidity,\\n    /// deadline The time by which the transaction must be included to effect the change\\n    /// @return amount0 The amount of token0 accounted to the position's tokens owed\\n    /// @return amount1 The amount of token1 accounted to the position's tokens owed\\n    function decreaseLiquidity(DecreaseLiquidityParams calldata params)\\n        external\\n        payable\\n        returns (uint256 amount0, uint256 amount1);\\n\\n    struct CollectParams {\\n        uint256 tokenId;\\n        address recipient;\\n        uint128 amount0Max;\\n        uint128 amount1Max;\\n    }\\n\\n    /// @notice Collects up to a maximum amount of fees owed to a specific position to the recipient\\n    /// @param params tokenId The ID of the NFT for which tokens are being collected,\\n    /// recipient The account that should receive the tokens,\\n    /// amount0Max The maximum amount of token0 to collect,\\n    /// amount1Max The maximum amount of token1 to collect\\n    /// @return amount0 The amount of fees collected in token0\\n    /// @return amount1 The amount of fees collected in token1\\n    function collect(CollectParams calldata params) external payable returns (uint256 amount0, uint256 amount1);\\n\\n    /// @notice Burns a token ID, which deletes it from the NFT contract. The token must have 0 liquidity and all tokens\\n    /// must be collected first.\\n    /// @param tokenId The ID of the token that is being burned\\n    function burn(uint256 tokenId) external payable;\\n}\\n\",\"keccak256\":\"0x80c30d6b437334115daefc1084f364750f70e13c18eb0d4ecfe7f833c6fcbaba\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/IPancakeFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IFeeSharing {\\n    function assign(uint256 _tokenId) external returns (uint256);\\n}\\n\\ninterface IProtocolToken {\\n    function feeShareContract() external view returns (IFeeSharing);\\n\\n    function feeShareTokenId() external view returns (uint256);\\n}\\n\\ninterface IPancakeFactory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint256);\\n\\n    function feeTo() external view returns (address);\\n\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n\\n    function allPairs(uint256) external view returns (address pair);\\n\\n    function allPairsLength() external view returns (uint256);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n\\n    function setFeeToSetter(address) external;\\n\\n    function INIT_CODE_PAIR_HASH() external view returns (bytes32);\\n\\n    function protocolToken() external view returns (IProtocolToken);\\n}\\n\",\"keccak256\":\"0xc373654ec50f3f91191ad6a71891f817606447438c863f691f7b1555e9ad7c8a\",\"license\":\"MIT\"},\"contracts/interfaces/IPancakeRouter02.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IPancakeRouter01 {\\n    function factory() external pure returns (address);\\n\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 amountADesired,\\n        uint256 amountBDesired,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountA, uint256 amountB, uint256 liquidity);\\n\\n    function addLiquidityETH(\\n        address token,\\n        uint256 amountTokenDesired,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256 amountToken, uint256 amountETH, uint256 liquidity);\\n\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function removeLiquidityETH(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactTokens(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactETHForTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactETH(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactTokensForETH(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapETHForExactTokens(\\n        uint256 amountOut,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function quote(uint256 amountA, uint256 reserveA, uint256 reserveB) external pure returns (uint256 amountB);\\n\\n    function getAmountOut(\\n        uint256 amountIn,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external pure returns (uint256 amountOut);\\n\\n    function getAmountIn(\\n        uint256 amountOut,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external pure returns (uint256 amountIn);\\n\\n    function getAmountsOut(uint256 amountIn, address[] calldata path) external view returns (uint256[] memory amounts);\\n\\n    function getAmountsIn(uint256 amountOut, address[] calldata path) external view returns (uint256[] memory amounts);\\n}\\n\\ninterface IPancakeRouter02 is IPancakeRouter01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountETH);\\n\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable;\\n\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n}\\n\",\"keccak256\":\"0xfe19e4e8a6b7b761e5df7b386af4794eeeec7d87667f79031087c95cbe2cc161\",\"license\":\"MIT\"},\"contracts/interfaces/IVelodrome.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IVelodrome {\\n    struct Route {\\n        address from;\\n        address to;\\n        bool stable;\\n    }\\n\\n    error ETHTransferFailed();\\n    error Expired();\\n    error InsufficientAmount();\\n    error InsufficientAmountA();\\n    error InsufficientAmountB();\\n    error InsufficientAmountADesired();\\n    error InsufficientAmountBDesired();\\n    error InsufficientLiquidity();\\n    error InsufficientOutputAmount();\\n    error InvalidPath();\\n    error OnlyWETH();\\n    error SameAddresses();\\n    error ZeroAddress();\\n\\n    /// @notice Address of Velodrome v2 pool factory\\n    function factory() external view returns (address);\\n\\n    /// @notice Address of Velodrome v2 pool implementation\\n    function poolImplementation() external view returns (address);\\n\\n    /// @notice Sort two tokens by which address value is less than the other\\n    /// @param tokenA   Address of token to sort\\n    /// @param tokenB   Address of token to sort\\n    /// @return token0  Lower address value between tokenA and tokenB\\n    /// @return token1  Higher address value between tokenA and tokenB\\n    function sortTokens(address tokenA, address tokenB) external pure returns (address token0, address token1);\\n\\n    /// @notice Calculate the address of a pool by its' factory.\\n    /// @dev Returns a randomly generated address for a nonexistent pool\\n    /// @param tokenA   Address of token to query\\n    /// @param tokenB   Address of token to query\\n    /// @param stable   True if pool is stable, false if volatile\\n    function poolFor(address tokenA, address tokenB, bool stable) external view returns (address pool);\\n\\n    /// @notice Fetch and sort the reserves for a pool\\n    /// @param tokenA       .\\n    /// @param tokenB       .\\n    /// @param stable       True if pool is stable, false if volatile\\n    /// @return reserveA    Amount of reserves of the sorted token A\\n    /// @return reserveB    Amount of reserves of the sorted token B\\n    function getReserves(address tokenA, address tokenB, bool stable)\\n        external\\n        view\\n        returns (uint256 reserveA, uint256 reserveB);\\n\\n    /// @notice Perform chained getAmountOut calculations on any number of pools\\n    function getAmountsOut(uint256 amountIn, Route[] memory routes) external view returns (uint256[] memory amounts);\\n\\n    // **** ADD LIQUIDITY ****\\n\\n    /// @notice Quote the amount deposited into a Pool\\n    /// @param tokenA           .\\n    /// @param tokenB           .\\n    /// @param stable           True if pool is stable, false if volatile\\n    /// @param amountADesired   Amount of tokenA desired to deposit\\n    /// @param amountBDesired   Amount of tokenB desired to deposit\\n    /// @return amountA         Amount of tokenA to actually deposit\\n    /// @return amountB         Amount of tokenB to actually deposit\\n    /// @return liquidity       Amount of liquidity token returned from deposit\\n    function quoteAddLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        bool stable,\\n        uint256 amountADesired,\\n        uint256 amountBDesired\\n    ) external view returns (uint256 amountA, uint256 amountB, uint256 liquidity);\\n\\n    /// @notice Quote the amount of liquidity removed from a Pool\\n    /// @param tokenA       .\\n    /// @param tokenB       .\\n    /// @param stable       True if pool is stable, false if volatile\\n    /// @param liquidity    Amount of liquidity to remove\\n    /// @return amountA     Amount of tokenA received\\n    /// @return amountB     Amount of tokenB received\\n    function quoteRemoveLiquidity(address tokenA, address tokenB, bool stable, uint256 liquidity)\\n        external\\n        view\\n        returns (uint256 amountA, uint256 amountB);\\n\\n    /// @notice Add liquidity of two tokens to a Pool\\n    /// @param tokenA           .\\n    /// @param tokenB           .\\n    /// @param stable           True if pool is stable, false if volatile\\n    /// @param amountADesired   Amount of tokenA desired to deposit\\n    /// @param amountBDesired   Amount of tokenB desired to deposit\\n    /// @param amountAMin       Minimum amount of tokenA to deposit\\n    /// @param amountBMin       Minimum amount of tokenB to deposit\\n    /// @param to               Recipient of liquidity token\\n    /// @param deadline         Deadline to receive liquidity\\n    /// @return amountA         Amount of tokenA to actually deposit\\n    /// @return amountB         Amount of tokenB to actually deposit\\n    /// @return liquidity       Amount of liquidity token returned from deposit\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        bool stable,\\n        uint256 amountADesired,\\n        uint256 amountBDesired,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountA, uint256 amountB, uint256 liquidity);\\n\\n    /// @notice Add liquidity of a token and WETH (transferred as ETH) to a Pool\\n    /// @param token                .\\n    /// @param stable               True if pool is stable, false if volatile\\n    /// @param amountTokenDesired   Amount of token desired to deposit\\n    /// @param amountTokenMin       Minimum amount of token to deposit\\n    /// @param amountETHMin         Minimum amount of ETH to deposit\\n    /// @param to                   Recipient of liquidity token\\n    /// @param deadline             Deadline to add liquidity\\n    /// @return amountToken         Amount of token to actually deposit\\n    /// @return amountETH           Amount of tokenETH to actually deposit\\n    /// @return liquidity           Amount of liquidity token returned from deposit\\n    function addLiquidityETH(\\n        address token,\\n        bool stable,\\n        uint256 amountTokenDesired,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256 amountToken, uint256 amountETH, uint256 liquidity);\\n\\n    // **** REMOVE LIQUIDITY ****\\n\\n    /// @notice Remove liquidity of two tokens from a Pool\\n    /// @param tokenA       .\\n    /// @param tokenB       .\\n    /// @param stable       True if pool is stable, false if volatile\\n    /// @param liquidity    Amount of liquidity to remove\\n    /// @param amountAMin   Minimum amount of tokenA to receive\\n    /// @param amountBMin   Minimum amount of tokenB to receive\\n    /// @param to           Recipient of tokens received\\n    /// @param deadline     Deadline to remove liquidity\\n    /// @return amountA     Amount of tokenA received\\n    /// @return amountB     Amount of tokenB received\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        bool stable,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    /// @notice Remove liquidity of a token and WETH (returned as ETH) from a Pool\\n    /// @param token            .\\n    /// @param stable           True if pool is stable, false if volatile\\n    /// @param liquidity        Amount of liquidity to remove\\n    /// @param amountTokenMin   Minimum amount of token to receive\\n    /// @param amountETHMin     Minimum amount of ETH to receive\\n    /// @param to               Recipient of liquidity token\\n    /// @param deadline         Deadline to receive liquidity\\n    /// @return amountToken     Amount of token received\\n    /// @return amountETH       Amount of ETH received\\n    function removeLiquidityETH(\\n        address token,\\n        bool stable,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n    /// @notice Remove liquidity of a fee-on-transfer token and WETH (returned as ETH) from a Pool\\n    /// @param token            .\\n    /// @param stable           True if pool is stable, false if volatile\\n    /// @param liquidity        Amount of liquidity to remove\\n    /// @param amountTokenMin   Minimum amount of token to receive\\n    /// @param amountETHMin     Minimum amount of ETH to receive\\n    /// @param to               Recipient of liquidity token\\n    /// @param deadline         Deadline to receive liquidity\\n    /// @return amountETH       Amount of ETH received\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        bool stable,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountETH);\\n\\n    /// @notice Swap one token for another\\n    /// @param amountIn     Amount of token in\\n    /// @param amountOutMin Minimum amount of desired token received\\n    /// @param routes       Array of trade routes used in the swap\\n    /// @param to           Recipient of the tokens received\\n    /// @param deadline     Deadline to receive tokens\\n    /// @return amounts     Array of amounts returned per route\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        Route[] calldata routes,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    /// @notice Swap ETH for a token\\n    /// @param amountOutMin Minimum amount of desired token received\\n    /// @param routes       Array of trade routes used in the swap\\n    /// @param to           Recipient of the tokens received\\n    /// @param deadline     Deadline to receive tokens\\n    /// @return amounts     Array of amounts returned per route\\n    function swapExactETHForTokens(uint256 amountOutMin, Route[] calldata routes, address to, uint256 deadline)\\n        external\\n        payable\\n        returns (uint256[] memory amounts);\\n\\n    /// @notice Swap a token for WETH (returned as ETH)\\n    /// @param amountIn     Amount of token in\\n    /// @param amountOutMin Minimum amount of desired ETH\\n    /// @param routes       Array of trade routes used in the swap\\n    /// @param to           Recipient of the tokens received\\n    /// @param deadline     Deadline to receive tokens\\n    /// @return amounts     Array of amounts returned per route\\n    function swapExactTokensForETH(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        Route[] calldata routes,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n}\\n\",\"keccak256\":\"0x6bf43df51e474ad9a07b54fc66e20064e76e3084ac1a647234de8461e803242a\",\"license\":\"MIT\"},\"contracts/interfaces/IWeb3Packs.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// IWeb3Packs.sol\\n// Copyright (c) 2023 Firma Lux, Inc. <https://charged.fi>\\n//\\n// Permission is hereby granted, free of charge, to any person obtaining a copy\\n// of this software and associated documentation files (the \\\"Software\\\"), to deal\\n// in the Software without restriction, including without limitation the rights\\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\n// copies of the Software, and to permit persons to whom the Software is\\n// furnished to do so, subject to the following conditions:\\n//\\n// The above copyright notice and this permission notice shall be included in all\\n// copies or substantial portions of the Software.\\n//\\n// THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n// FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n// SOFTWARE.\\npragma solidity 0.8.17;\\n\\nimport \\\"./IWeb3PacksDefs.sol\\\";\\n\\ninterface IWeb3Packs is IWeb3PacksDefs {\\n  function bundle(\\n    string calldata tokenMetaUri,\\n    ContractCallGeneric[] calldata contractCalls,\\n    ERC20SwapOrderGeneric[] calldata erc20SwapOrders,\\n    LiquidityOrderGeneric[] calldata liquidityOrders,\\n    LockState calldata lockState,\\n    uint256 ethPackPrice,\\n    bytes32 usdPackPrice,\\n    bytes32 packType\\n  )\\n    external\\n    payable\\n    returns(uint256 tokenId);\\n\\n  function unbundle(\\n    address receiver,\\n    address tokenAddress,\\n    uint256 tokenId,\\n    ERC20SwapOrderGeneric[] calldata erc20SwapOrders,\\n    LiquidityPairs[] calldata liquidityPairs,\\n    bool sellAll\\n  ) external\\n    payable;\\n\\n  function unbundleFromManager(\\n    address receiver,\\n    address tokenAddress,\\n    uint256 tokenId,\\n    string calldata walletManager,\\n    ERC20SwapOrderGeneric[] calldata erc20SwapOrders,\\n    LiquidityPairs[] calldata liquidityPairs,\\n    bool sellAll\\n  )\\n    external\\n    payable;\\n\\n  function energize(\\n    uint256 tokenId,\\n    address tokenAddress,\\n    uint256 tokenAmount\\n  )\\n    external;\\n\\n  function bond(\\n    uint256 tokenId,\\n    address nftTokenAddress,\\n    uint256 mintedTokenId\\n  )\\n    external;\\n}\\n\",\"keccak256\":\"0x3bba78da11aa89e0179053997024f6c3989b71d90bbf7ec786831e1001fc27ef\",\"license\":\"MIT\"},\"contracts/interfaces/IWeb3PacksDefs.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// IWeb3PacksDefs.sol\\n// Copyright (c) 2023 Firma Lux, Inc. <https://charged.fi>\\n//\\n// Permission is hereby granted, free of charge, to any person obtaining a copy\\n// of this software and associated documentation files (the \\\"Software\\\"), to deal\\n// in the Software without restriction, including without limitation the rights\\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\n// copies of the Software, and to permit persons to whom the Software is\\n// furnished to do so, subject to the following conditions:\\n//\\n// The above copyright notice and this permission notice shall be included in all\\n// copies or substantial portions of the Software.\\n//\\n// THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n// FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n// SOFTWARE.\\npragma solidity 0.8.17;\\n\\ninterface IWeb3PacksDefs {\\n  event ChargedParticlesSet(address indexed chargedParticles);\\n  event ChargedStateSet(address indexed chargedState);\\n  event RouterSet(address indexed router);\\n  event ProtonSet(address indexed proton);\\n  event PackBundled(uint256 indexed tokenId, address indexed receiver, bytes32 packType, bytes32 usdPackPrice);\\n  event PackUnbundled(uint256 indexed tokenId, address indexed receiver, uint256 ethAmount);\\n  event ProtocolFeeSet(uint256 fee);\\n  event Web3PacksSet(address indexed web3packs);\\n  event Web3PacksManagerSet(address indexed manager);\\n  event Web3PacksExchangeManagerSet(address indexed manager);\\n  event Web3PacksTreasurySet(address indexed treasury);\\n\\n  // Custom Errors\\n  error NotOwnerOrApproved();\\n  error FundingFailed();\\n  error NullReceiver();\\n  error ContractNotAllowed();\\n  error NativeAssetTransferFailed();\\n  error MismatchedTokens();\\n  error MissingLiquidityUUID(address tokenAddress);\\n  error UnsucessfulSwap(address tokenOut, uint256 amountIn, address router);\\n  error InsufficientForFee(uint256 value, uint256 ethPackPrice, uint256 protocolFee);\\n\\n  enum RouterType {\\n    UniswapV2,\\n    UniswapV3,\\n    Velodrome,\\n    Balancer,\\n    SwapMode\\n  }\\n\\n  struct TokenAmount {\\n    address token;\\n    uint256 amount;\\n  }\\n\\n  struct Route {\\n    address token0;\\n    address token1;\\n  }\\n\\n  struct LiquidityPairs {\\n    TokenAmount token0;\\n    TokenAmount token1;\\n    uint256 slippage;\\n    bytes32 poolId;\\n    address router;\\n    RouterType routerType;\\n    bool exitLpOnUnbundle;\\n    Route[] reverseRoute;\\n    bool stable;\\n  }\\n\\n  struct ContractCallGeneric {\\n    bytes callData;\\n    address contractAddress;\\n    uint256 amountIn;\\n  }\\n\\n  struct ERC20SwapOrderGeneric {\\n    bytes callData;\\n    address router;\\n    address tokenIn;\\n    address tokenOut;\\n    uint256 tokenAmountIn;\\n    uint256 tokenAmountOutMin;\\n    uint256 payableAmountIn;\\n    bytes32 liquidityUuid;\\n    bytes32 poolId;\\n    bool stable;\\n    Route[] reverseRoute;\\n    RouterType routerType;\\n  }\\n\\n  struct LiquidityOrderGeneric {\\n    address router;\\n    address token0;\\n    address token1;\\n    bytes32 liquidityUuidToken0;\\n    bytes32 liquidityUuidToken1;\\n    uint256 percentToken0;\\n    uint256 percentToken1;\\n    uint256 minimumLpTokens;\\n    uint256 slippage;\\n    int24 tickLower;\\n    int24 tickUpper;\\n    bool stable;\\n    bytes32 poolId;\\n    RouterType routerType;\\n  }\\n\\n  struct LiquidityPosition {\\n    uint256 lpTokenId;\\n    uint256 liquidity;\\n    bool stable;\\n    address token0;\\n    address token1;\\n    int24 tickLower;\\n    int24 tickUpper;\\n    bytes32 poolId;\\n    address router;\\n    RouterType routerType;\\n  }\\n\\n  struct LiquidityPositionResult {\\n    address token0;\\n    address token1;\\n    uint256 amount0;\\n    uint256 amount1;\\n  }\\n\\n  struct NFT {\\n    address tokenAddress;\\n    uint256 id;\\n  }\\n\\n  struct LockState {\\n    uint256 ERC20Timelock;\\n    uint256 ERC721Timelock;\\n  }\\n}\\n\",\"keccak256\":\"0xb3994b533fc9ff38cec1145b114a2ec1f99c5f190afba9d056d7aa30ba000816\",\"license\":\"MIT\"},\"contracts/interfaces/IWeb3PacksExchangeManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// Web3PacksExchangeManager.sol\\n// Copyright (c) 2023 Firma Lux, Inc. <https://charged.fi>\\n//\\n// Permission is hereby granted, free of charge, to any person obtaining a copy\\n// of this software and associated documentation files (the \\\"Software\\\"), to deal\\n// in the Software without restriction, including without limitation the rights\\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\n// copies of the Software, and to permit persons to whom the Software is\\n// furnished to do so, subject to the following conditions:\\n//\\n// The above copyright notice and this permission notice shall be included in all\\n// copies or substantial portions of the Software.\\n//\\n// THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n// FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n// SOFTWARE.\\n\\n//                _    ____                   _\\n//               | |  |___ \\\\                 | |\\n//  __      _____| |__  __) |_ __   __ _  ___| | _____\\n//  \\\\ \\\\ /\\\\ / / _ \\\\ '_ \\\\|__ <| '_ \\\\ / _` |/ __| |/ / __|\\n//   \\\\ V  V /  __/ |_) |__) | |_) | (_| | (__|   <\\\\__ \\\\\\n//    \\\\_/\\\\_/ \\\\___|_.__/____/| .__/ \\\\__,_|\\\\___|_|\\\\_\\\\___/\\n//                          | |\\n//                          |_|\\n\\npragma solidity 0.8.17;\\npragma abicoder v2;\\n\\nimport \\\"./IWeb3PacksDefs.sol\\\";\\n\\ninterface IWeb3PacksExchangeManager is IWeb3PacksDefs {\\n  function performContractCalls(\\n    ContractCallGeneric[] calldata contractCalls\\n  ) external;\\n\\n  function performSwaps(\\n    ERC20SwapOrderGeneric[] calldata orders,\\n    uint256 web3packsTokenId\\n  ) external;\\n\\n  function depositLiquidity(\\n    LiquidityOrderGeneric[] calldata orders,\\n    uint256 web3packsTokenId\\n  ) external;\\n\\n  function removeLiquidity(\\n    LiquidityPosition calldata liquidityPosition,\\n    LiquidityPairs calldata liquidityPair,\\n    address receiver,\\n    bool sellAll\\n  ) external;\\n\\n  function swapAllForEth(\\n    ERC20SwapOrderGeneric[] calldata erc20SwapOrders,\\n    LiquidityPairs[] memory liquidityPairs,\\n    address receiver\\n  ) external returns (uint ethAmount);\\n\\n  function getLiquidityTokenData(\\n    LiquidityPosition calldata liquidityPosition\\n  ) external returns (address lpTokenAddress, uint256 lpTokenId);\\n}\\n\",\"keccak256\":\"0x6254efc800c99722371d159273f7839415f956d1ef9b3c445edbc797231d8c40\",\"license\":\"MIT\"},\"contracts/interfaces/IWeb3PacksManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// IWeb3PacksManager.sol\\n// Copyright (c) 2023 Firma Lux, Inc. <https://charged.fi>\\n//\\n// Permission is hereby granted, free of charge, to any person obtaining a copy\\n// of this software and associated documentation files (the \\\"Software\\\"), to deal\\n// in the Software without restriction, including without limitation the rights\\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\n// copies of the Software, and to permit persons to whom the Software is\\n// furnished to do so, subject to the following conditions:\\n//\\n// The above copyright notice and this permission notice shall be included in all\\n// copies or substantial portions of the Software.\\n//\\n// THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n// FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n// SOFTWARE.\\npragma solidity 0.8.17;\\n\\nimport \\\"./IWeb3PacksDefs.sol\\\";\\n\\ninterface IWeb3PacksManager is IWeb3PacksDefs {\\n  function isContractAllowed(address contractAddress) external returns (bool isAllowed);\\n  function getLiquidityPositions(uint256 tokenId) external returns (LiquidityPosition[] memory positions);\\n  function saveLiquidityPosition(uint256 tokenId, LiquidityPosition memory position) external;\\n  function clearLiquidityPositions(uint256 tokenId) external;\\n  function setContractAllowlist(address contractAddress, bool isAllowed) external;\\n  function setWeb3PacksContract(address contractAddress, bool isAllowed) external ;\\n}\\n\",\"keccak256\":\"0x588fbf37c9fa21948ac8eaf4d2107a286ce982b8bb6eaa7c413612312b6f098c\",\"license\":\"MIT\"},\"contracts/lib/Balancer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// Balancer.sol\\n// Copyright (c) 2023 Firma Lux, Inc. <https://charged.fi>\\n//\\n// Permission is hereby granted, free of charge, to any person obtaining a copy\\n// of this software and associated documentation files (the \\\"Software\\\"), to deal\\n// in the Software without restriction, including without limitation the rights\\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\n// copies of the Software, and to permit persons to whom the Software is\\n// furnished to do so, subject to the following conditions:\\n//\\n// The above copyright notice and this permission notice shall be included in all\\n// copies or substantial portions of the Software.\\n//\\n// THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n// FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n// SOFTWARE.\\n\\n//                _    ____                   _\\n//               | |  |___ \\\\                 | |\\n//  __      _____| |__  __) |_ __   __ _  ___| | _____\\n//  \\\\ \\\\ /\\\\ / / _ \\\\ '_ \\\\|__ <| '_ \\\\ / _` |/ __| |/ / __|\\n//   \\\\ V  V /  __/ |_) |__) | |_) | (_| | (__|   <\\\\__ \\\\\\n//    \\\\_/\\\\_/ \\\\___|_.__/____/| .__/ \\\\__,_|\\\\___|_|\\\\_\\\\___/\\n//                          | |\\n//                          |_|\\n\\npragma solidity 0.8.17;\\npragma abicoder v2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\\\";\\nimport {IAsset, IBalancerV2Vault} from \\\"../interfaces/IBalancerV2Vault.sol\\\";\\nimport \\\"../interfaces/IWeb3Packs.sol\\\";\\n\\ncontract Balancer {\\n  address private _weth;\\n\\n  constructor(address weth) {\\n    _weth = weth;\\n  }\\n\\n  function balancerSwapSingle(\\n    IWeb3Packs.ERC20SwapOrderGeneric memory swapOrder\\n  )\\n    internal\\n    returns (uint256 amountOut)\\n  {\\n    IBalancerV2Vault.SingleSwap memory swapData = IBalancerV2Vault.SingleSwap({\\n      poolId: swapOrder.poolId,\\n      kind: IBalancerV2Vault.SwapKind.GIVEN_IN,\\n      assetIn: IAsset(swapOrder.tokenIn),\\n      assetOut: IAsset(swapOrder.tokenOut),\\n      amount: swapOrder.tokenAmountIn,\\n      userData: bytes(\\\"\\\")\\n    });\\n\\n    IBalancerV2Vault.FundManagement memory fundData = IBalancerV2Vault.FundManagement({\\n      sender: address(this),\\n      fromInternalBalance: false,\\n      recipient: payable(address(this)),\\n      toInternalBalance: false\\n    });\\n    amountOut = IBalancerV2Vault(swapOrder.router).swap(swapData, fundData, swapOrder.tokenAmountOutMin, block.timestamp);\\n  }\\n\\n  function balancerSwapForEth(\\n    address token0,\\n    address token1,\\n    address router,\\n    bytes32 poolId\\n  )\\n    internal\\n  {\\n    uint256 balance;\\n\\n    if (token0 != _weth) {\\n      balance = IERC20(token0).balanceOf(address(this));\\n      TransferHelper.safeApprove(token0, router, balance);\\n\\n      if (balance > 0) {\\n        IBalancerV2Vault.SingleSwap memory swapData = IBalancerV2Vault.SingleSwap({\\n          poolId: poolId,\\n          kind: IBalancerV2Vault.SwapKind.GIVEN_IN,\\n          assetIn: IAsset(token0),\\n          assetOut: IAsset(_weth),\\n          amount: balance,\\n          userData: bytes(\\\"\\\")\\n        });\\n\\n        IBalancerV2Vault.FundManagement memory fundData = IBalancerV2Vault.FundManagement({\\n          sender: address(this),\\n          fromInternalBalance: false,\\n          recipient: payable(address(this)),\\n          toInternalBalance: false\\n        });\\n        IBalancerV2Vault(router).swap(swapData, fundData, 0, block.timestamp);\\n      }\\n    }\\n    if (token1 != _weth) {\\n      balance = IERC20(token1).balanceOf(address(this));\\n      TransferHelper.safeApprove(token1, router, balance);\\n\\n      if (balance > 0) {\\n        IBalancerV2Vault.SingleSwap memory swapData = IBalancerV2Vault.SingleSwap({\\n          poolId: poolId,\\n          kind: IBalancerV2Vault.SwapKind.GIVEN_IN,\\n          assetIn: IAsset(token1),\\n          assetOut: IAsset(_weth),\\n          amount: balance,\\n          userData: bytes(\\\"\\\")\\n        });\\n\\n        IBalancerV2Vault.FundManagement memory fundData = IBalancerV2Vault.FundManagement({\\n          sender: address(this),\\n          fromInternalBalance: false,\\n          recipient: payable(address(this)),\\n          toInternalBalance: false\\n        });\\n        IBalancerV2Vault(router).swap(swapData, fundData, 0, block.timestamp);\\n      }\\n    }\\n  }\\n\\n  function balancerCreatePosition(\\n    IWeb3Packs.LiquidityOrderGeneric memory liquidityOrder,\\n    uint256 balanceAmount0,\\n    uint256 balanceAmount1\\n  ) internal returns (\\n    uint256 lpTokenId,\\n    uint256 liquidity,\\n    uint256 amount0,\\n    uint256 amount1\\n  ) {\\n    (address poolAddress, ) = IBalancerV2Vault(liquidityOrder.router).getPool(liquidityOrder.poolId);\\n\\n    (IAsset[] memory assets, uint256[] memory amounts) = _getAssetsAndAmounts(\\n      liquidityOrder.token0,\\n      liquidityOrder.token1,\\n      poolAddress,\\n      balanceAmount0,\\n      balanceAmount1,\\n      liquidityOrder.stable\\n    );\\n\\n    // Add Liquidity\\n    bytes memory userData = abi.encode(IBalancerV2Vault.JoinKind.EXACT_TOKENS_IN_FOR_BPT_OUT, amounts, liquidityOrder.minimumLpTokens);\\n    IBalancerV2Vault.JoinPoolRequest memory joinData = IBalancerV2Vault.JoinPoolRequest({\\n      assets: assets,\\n      maxAmountsIn: amounts,\\n      userData: userData,\\n      fromInternalBalance: false\\n    });\\n    IBalancerV2Vault(liquidityOrder.router).joinPool(liquidityOrder.poolId, address(this), address(this), joinData);\\n\\n    lpTokenId = uint256(uint160(poolAddress));\\n    liquidity = IERC20(poolAddress).balanceOf(address(this));\\n    amount0 = balanceAmount0 - IERC20(liquidityOrder.token0).balanceOf(address(this));\\n    amount1 = balanceAmount1 - IERC20(liquidityOrder.token1).balanceOf(address(this));\\n  }\\n\\n  function balancerRemoveLiquidity(\\n    IWeb3Packs.LiquidityPosition memory liquidityPosition,\\n    IWeb3Packs.LiquidityPairs memory liquidityPairs\\n  )\\n    internal\\n    returns (uint amount0, uint amount1)\\n  {\\n    (address poolAddress, ) = IBalancerV2Vault(liquidityPosition.router).getPool(liquidityPosition.poolId);\\n    (IAsset[] memory assets, uint256[] memory amounts) = _getAssetsAndAmounts(\\n      liquidityPosition.token0,\\n      liquidityPosition.token1,\\n      poolAddress,\\n      liquidityPairs.token0.amount,\\n      liquidityPairs.token1.amount,\\n      liquidityPosition.stable\\n    );\\n\\n    TransferHelper.safeApprove(\\n      poolAddress,\\n      liquidityPosition.router,\\n      liquidityPosition.liquidity\\n    );\\n\\n    // Remove Liquidity\\n    bytes memory userData = abi.encode(IBalancerV2Vault.ExitKind.EXACT_BPT_IN_FOR_TOKENS_OUT, liquidityPosition.liquidity);\\n    IBalancerV2Vault.ExitPoolRequest memory exitData = IBalancerV2Vault.ExitPoolRequest({\\n      assets: assets,\\n      minAmountsOut: amounts,\\n      userData: userData,\\n      toInternalBalance: false\\n    });\\n    IBalancerV2Vault(liquidityPosition.router).exitPool(liquidityPosition.poolId, address(this), payable(address(this)), exitData);\\n\\n    amount0 = IERC20(liquidityPosition.token0).balanceOf(address(this));\\n    amount1 = IERC20(liquidityPosition.token1).balanceOf(address(this));\\n  }\\n\\n  function balancerGetLiquidityTokenAddress(\\n    IWeb3Packs.LiquidityPosition memory liquidityPosition\\n  )\\n    internal\\n    view\\n    returns (address lpTokenAddress, uint256 lpTokenId)\\n  {\\n    (address poolAddress, ) = IBalancerV2Vault(liquidityPosition.router).getPool(liquidityPosition.poolId);\\n    lpTokenAddress = poolAddress;\\n    lpTokenId = 0;\\n  }\\n\\n  function _getAssetsAndAmounts(\\n    address token0,\\n    address token1,\\n    address poolAddress,\\n    uint256 balanceAmount0,\\n    uint256 balanceAmount1,\\n    bool isStable\\n  )\\n    internal\\n    pure\\n    returns (\\n      IAsset[] memory assets,\\n      uint256[] memory amounts\\n    )\\n  {\\n    // Balancer LPs must be entered into with Tokens ordered from Smallest to Largest.\\n    // Stable LPs also require the Pool Address, which also must be sorted.\\n    if (isStable) {\\n      assets = new IAsset[](3);\\n      amounts = new uint256[](3);\\n\\n      if (uint160(token0) <= uint160(token1) && uint160(token0) <= uint160(poolAddress)) {\\n        assets[0] = IAsset(token0);\\n        amounts[0] = balanceAmount0;\\n        if (uint160(token1) <= uint160(poolAddress)) {\\n          assets[1] = IAsset(token1);\\n          assets[2] = IAsset(poolAddress);\\n          amounts[1] = balanceAmount1;\\n          amounts[2] = 0;\\n        } else {\\n          assets[1] = IAsset(poolAddress);\\n          assets[2] = IAsset(token1);\\n          amounts[1] = 0;\\n          amounts[2] = balanceAmount1;\\n        }\\n      } else if (uint160(token1) <= uint160(token0) && uint160(token1) <= uint160(poolAddress)) {\\n        assets[0] = IAsset(token1);\\n        amounts[0] = balanceAmount1;\\n        if (uint160(token0) <= uint160(poolAddress)) {\\n          assets[1] = IAsset(token0);\\n          assets[2] = IAsset(poolAddress);\\n          amounts[1] = balanceAmount0;\\n          amounts[2] = 0;\\n        } else {\\n          assets[1] = IAsset(poolAddress);\\n          assets[2] = IAsset(token0);\\n          amounts[1] = 0;\\n          amounts[2] = balanceAmount0;\\n        }\\n      } else {\\n        assets[0] = IAsset(poolAddress);\\n        amounts[0] = 0;\\n        if (uint160(token0) <= uint160(token1)) {\\n          assets[1] = IAsset(token0);\\n          assets[2] = IAsset(token1);\\n          amounts[1] = balanceAmount0;\\n          amounts[2] = balanceAmount1;\\n        } else {\\n          assets[1] = IAsset(token1);\\n          assets[2] = IAsset(token0);\\n          amounts[1] = balanceAmount1;\\n          amounts[2] = balanceAmount0;\\n        }\\n      }\\n    } else {\\n      assets = new IAsset[](2);\\n      amounts = new uint256[](2);\\n\\n      if (uint160(token0) < uint160(token1)) {\\n        assets[0] = IAsset(token0);\\n        assets[1] = IAsset(token1);\\n\\n        amounts[0] = balanceAmount0;\\n        amounts[1] = balanceAmount1;\\n      } else {\\n        assets[0] = IAsset(token1);\\n        assets[1] = IAsset(token0);\\n\\n        amounts[0] = balanceAmount1;\\n        amounts[1] = balanceAmount0;\\n      }\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xaedd95a2f93e5bad8727d92e97deccd0f0dd7aaa844cc07d61c22c2a9005627f\",\"license\":\"MIT\"},\"contracts/lib/BlackholePrevention.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// BlackholePrevention.sol -- Part of the Charged Particles Protocol\\n// Copyright (c) 2021 Firma Lux, Inc. <https://charged.fi>\\n//\\n// Permission is hereby granted, free of charge, to any person obtaining a copy\\n// of this software and associated documentation files (the \\\"Software\\\"), to deal\\n// in the Software without restriction, including without limitation the rights\\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\n// copies of the Software, and to permit persons to whom the Software is\\n// furnished to do so, subject to the following conditions:\\n//\\n// The above copyright notice and this permission notice shall be included in all\\n// copies or substantial portions of the Software.\\n//\\n// THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n// FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n// SOFTWARE.\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\n\\n/**\\n * @notice Prevents ETH or Tokens from getting stuck in a contract by allowing\\n *  the Owner/DAO to pull them out on behalf of a user\\n * This is only meant to contracts that are not expected to hold tokens, but do handle transferring them.\\n */\\ncontract BlackholePrevention {\\n    using Address for address payable;\\n    using SafeERC20 for IERC20;\\n\\n    event WithdrawStuckEther(address indexed receiver, uint256 amount);\\n    event WithdrawStuckERC20(\\n        address indexed receiver,\\n        address indexed tokenAddress,\\n        uint256 amount\\n    );\\n    event WithdrawStuckERC721(\\n        address indexed receiver,\\n        address indexed tokenAddress,\\n        uint256 indexed tokenId\\n    );\\n    event WithdrawStuckERC1155(\\n        address indexed receiver,\\n        address indexed tokenAddress,\\n        uint256 indexed tokenId,\\n        uint256 amount\\n    );\\n\\n    function _withdrawEther(address payable receiver, uint256 amount)\\n        internal\\n        virtual\\n    {\\n        require(receiver != address(0x0), \\\"BHP:E-403\\\");\\n        if (address(this).balance >= amount) {\\n            receiver.sendValue(amount);\\n            emit WithdrawStuckEther(receiver, amount);\\n        }\\n    }\\n\\n    function _withdrawERC20(\\n        address payable receiver,\\n        address tokenAddress,\\n        uint256 amount\\n    ) internal virtual {\\n        require(receiver != address(0x0), \\\"BHP:E-403\\\");\\n        if (IERC20(tokenAddress).balanceOf(address(this)) >= amount) {\\n            IERC20(tokenAddress).safeTransfer(receiver, amount);\\n            emit WithdrawStuckERC20(receiver, tokenAddress, amount);\\n        }\\n    }\\n\\n    function _withdrawERC721(\\n        address payable receiver,\\n        address tokenAddress,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(receiver != address(0x0), \\\"BHP:E-403\\\");\\n        if (IERC721(tokenAddress).ownerOf(tokenId) == address(this)) {\\n            IERC721(tokenAddress).transferFrom(\\n                address(this),\\n                receiver,\\n                tokenId\\n            );\\n            emit WithdrawStuckERC721(receiver, tokenAddress, tokenId);\\n        }\\n    }\\n\\n    function _withdrawERC1155(\\n        address payable receiver,\\n        address tokenAddress,\\n        uint256 tokenId,\\n        uint256 amount\\n    ) internal virtual {\\n        require(receiver != address(0x0), \\\"BHP:E-403\\\");\\n        if (\\n            IERC1155(tokenAddress).balanceOf(address(this), tokenId) >= amount\\n        ) {\\n            IERC1155(tokenAddress).safeTransferFrom(\\n                address(this),\\n                receiver,\\n                tokenId,\\n                amount,\\n                \\\"\\\"\\n            );\\n            emit WithdrawStuckERC1155(receiver, tokenAddress, tokenId, amount);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaa7de406bd3b1092f8222d3eb1e2a990381429a5cb6bab48a811ff7118a43746\",\"license\":\"MIT\"},\"contracts/lib/SwapMode.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// SwapMode.sol\\n// Copyright (c) 2023 Firma Lux, Inc. <https://charged.fi>\\n//\\n// Permission is hereby granted, free of charge, to any person obtaining a copy\\n// of this software and associated documentation files (the \\\"Software\\\"), to deal\\n// in the Software without restriction, including without limitation the rights\\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\n// copies of the Software, and to permit persons to whom the Software is\\n// furnished to do so, subject to the following conditions:\\n//\\n// The above copyright notice and this permission notice shall be included in all\\n// copies or substantial portions of the Software.\\n//\\n// THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n// FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n// SOFTWARE.\\n\\n//                _    ____                   _\\n//               | |  |___ \\\\                 | |\\n//  __      _____| |__  __) |_ __   __ _  ___| | _____\\n//  \\\\ \\\\ /\\\\ / / _ \\\\ '_ \\\\|__ <| '_ \\\\ / _` |/ __| |/ / __|\\n//   \\\\ V  V /  __/ |_) |__) | |_) | (_| | (__|   <\\\\__ \\\\\\n//    \\\\_/\\\\_/ \\\\___|_.__/____/| .__/ \\\\__,_|\\\\___|_|\\\\_\\\\___/\\n//                          | |\\n//                          |_|\\n\\npragma solidity 0.8.17;\\npragma abicoder v2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\\\";\\nimport \\\"../interfaces/IWeb3PacksDefs.sol\\\";\\nimport \\\"../interfaces/IWeb3Packs.sol\\\";\\nimport \\\"../interfaces/IPancakeRouter02.sol\\\";\\nimport \\\"../interfaces/IPancakeFactory.sol\\\";\\n\\ncontract SwapMode {\\n  address private weth;\\n\\n  constructor(address _weth) {\\n    weth = _weth;\\n  }\\n\\n  function swapModeSwapSingle(\\n    IWeb3Packs.ERC20SwapOrderGeneric memory swapOrder\\n  )\\n    internal\\n    returns (uint256 amountOut)\\n  {\\n    (bool success, bytes memory data ) = swapOrder.router.call{value: swapOrder.payableAmountIn}(\\n      swapOrder.callData\\n    );\\n    if (!success) {\\n      assembly {\\n        let dataSize := mload(data) // Load the size of the data\\n        let dataPtr := add(data, 0x20) // Advance data pointer to the next word\\n        revert(dataPtr, dataSize) // Revert with the given data\\n      }\\n    }\\n\\n    uint[] memory amounts = abi.decode(data, (uint[]));\\n    amountOut = amounts[amounts.length-1];\\n  }\\n\\n  function swapModeSwapForEth(\\n    address token0,\\n    address token1,\\n    address router,\\n    IWeb3PacksDefs.Route[] memory reverseRoutes\\n  )\\n    internal\\n  {\\n    uint256 balance;\\n    address[] memory routes = new address[](1);\\n    routes[0] = reverseRoutes[0].token0;\\n    routes[1] = reverseRoutes[0].token0;\\n\\n    if (token0 != weth) {\\n      balance = IERC20(token0).balanceOf(address(this));\\n      if (balance > 0) {\\n        TransferHelper.safeApprove(token0, router, balance);\\n        IPancakeRouter02(router).swapExactTokensForTokens(\\n          balance,\\n          0,\\n          routes,\\n          address(this),\\n          block.timestamp\\n        );\\n      }\\n    }\\n    if (token1 != weth) {\\n      balance = IERC20(token1).balanceOf(address(this));\\n      if (balance > 0) {\\n        TransferHelper.safeApprove(token1, router, balance);\\n        IPancakeRouter02(router).swapExactTokensForTokens(\\n          balance,\\n          0,\\n          routes,\\n          address(this),\\n          block.timestamp\\n        );\\n      }\\n    }\\n  }\\n\\n  function swapModeCreatePosition(\\n    IWeb3Packs.LiquidityOrderGeneric memory liquidityOrder,\\n    uint256 balanceAmount0,\\n    uint256 balanceAmount1,\\n    uint256 minAmount0,\\n    uint256 minAmount1\\n  )\\n    internal\\n    returns (\\n      uint256 lpTokenId,\\n      uint256 liquidity,\\n      uint256 amount0,\\n      uint256 amount1\\n    )\\n  {\\n    // Add Liquidity\\n    (amount0, amount1, liquidity) = IPancakeRouter02(liquidityOrder.router).addLiquidity(\\n      liquidityOrder.token0,\\n      liquidityOrder.token1,\\n      balanceAmount0,\\n      balanceAmount1,\\n      minAmount0,\\n      minAmount1,\\n      address(this),\\n      block.timestamp\\n    );\\n\\n    // Deposit the LP tokens into the Web3Packs NFT\\n    address lpTokenAddress = _getSwapModePairAddress(liquidityOrder.router, liquidityOrder.token0, liquidityOrder.token1);\\n    lpTokenId = uint256(uint160(lpTokenAddress));\\n  }\\n\\n  function swapModeRemoveLiquidity(\\n    IWeb3Packs.LiquidityPosition memory liquidityPosition,\\n    IWeb3Packs.LiquidityPairs memory liquidityPairs\\n  )\\n    internal\\n    returns (uint amount0, uint amount1)\\n  {\\n    address lpTokenAddress = _getSwapModePairAddress(liquidityPosition.router, liquidityPosition.token0, liquidityPosition.token1);\\n\\n    TransferHelper.safeApprove(\\n      lpTokenAddress,\\n      liquidityPosition.router,\\n      liquidityPosition.liquidity\\n    );\\n\\n    (amount0, amount1) = IPancakeRouter02(liquidityPosition.router).removeLiquidity(\\n      liquidityPosition.token0,\\n      liquidityPosition.token1,\\n      liquidityPosition.liquidity,\\n      liquidityPairs.token0.amount,\\n      liquidityPairs.token1.amount,\\n      address(this),\\n      block.timestamp\\n    );\\n  }\\n\\n  function swapModeGetLiquidityTokenAddress(\\n    IWeb3Packs.LiquidityPosition memory liquidityPosition\\n  )\\n    internal\\n    view\\n    returns (address lpTokenAddress, uint256 lpTokenId)\\n  {\\n    lpTokenAddress = _getSwapModePairAddress(liquidityPosition.router, liquidityPosition.token0, liquidityPosition.token1);\\n    lpTokenId = 0;\\n  }\\n\\n  function _getSwapModeFactory(address router) private pure returns (address) {\\n    return IPancakeRouter02(router).factory();\\n  }\\n\\n  function _getSwapModePairAddress(address router, address token0, address token1) private view returns (address) {\\n    IPancakeFactory _factory = IPancakeFactory(_getSwapModeFactory(router));\\n    return _factory.getPair(token0, token1);\\n  }\\n}\\n\",\"keccak256\":\"0xec632a69933e7c60eea2bc3f58be13ca6e16f6f95cb33be6359a6d8478e7c262\",\"license\":\"MIT\"},\"contracts/lib/UniswapV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// UniswapV2.sol\\n// Copyright (c) 2023 Firma Lux, Inc. <https://charged.fi>\\n//\\n// Permission is hereby granted, free of charge, to any person obtaining a copy\\n// of this software and associated documentation files (the \\\"Software\\\"), to deal\\n// in the Software without restriction, including without limitation the rights\\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\n// copies of the Software, and to permit persons to whom the Software is\\n// furnished to do so, subject to the following conditions:\\n//\\n// The above copyright notice and this permission notice shall be included in all\\n// copies or substantial portions of the Software.\\n//\\n// THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n// FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n// SOFTWARE.\\n\\n//                _    ____                   _\\n//               | |  |___ \\\\                 | |\\n//  __      _____| |__  __) |_ __   __ _  ___| | _____\\n//  \\\\ \\\\ /\\\\ / / _ \\\\ '_ \\\\|__ <| '_ \\\\ / _` |/ __| |/ / __|\\n//   \\\\ V  V /  __/ |_) |__) | |_) | (_| | (__|   <\\\\__ \\\\\\n//    \\\\_/\\\\_/ \\\\___|_.__/____/| .__/ \\\\__,_|\\\\___|_|\\\\_\\\\___/\\n//                          | |\\n//                          |_|\\n\\npragma solidity 0.8.17;\\npragma abicoder v2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\\\";\\nimport \\\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\\\";\\nimport \\\"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\\\";\\nimport \\\"../interfaces/IWeb3Packs.sol\\\";\\n\\ncontract UniswapV2 {\\n  address private _weth;\\n\\n  constructor(address weth) {\\n    _weth = weth;\\n  }\\n\\n  function uniswapV2SwapSingle(\\n    IWeb3Packs.ERC20SwapOrderGeneric memory swapOrder\\n  )\\n    internal\\n    returns (uint256 amountOut)\\n  {\\n    (bool success, bytes memory data ) = swapOrder.router.call{value: swapOrder.payableAmountIn}(\\n      swapOrder.callData\\n    );\\n    if (!success) {\\n      assembly {\\n        let dataSize := mload(data) // Load the size of the data\\n        let dataPtr := add(data, 0x20) // Advance data pointer to the next word\\n        revert(dataPtr, dataSize) // Revert with the given data\\n      }\\n    }\\n\\n    uint[] memory amounts = abi.decode(data, (uint[]));\\n    amountOut = amounts[amounts.length-1];\\n  }\\n\\n  function uniswapV2SwapForEth(\\n    address token0,\\n    address token1,\\n    address router\\n  )\\n    internal\\n  {\\n    uint256 balance;\\n    address[] memory path;\\n\\n    if (token0 != _weth) {\\n      balance = IERC20(token0).balanceOf(address(this));\\n      path[0] = token0;\\n      path[1] = _weth;\\n      if (balance > 0) {\\n        TransferHelper.safeApprove(token0, router, balance);\\n        IUniswapV2Router02(router).swapExactTokensForETHSupportingFeeOnTransferTokens(\\n          balance,\\n          0,\\n          path,\\n          address(this),\\n          block.timestamp\\n        );\\n      }\\n    }\\n    if (token1 != _weth) {\\n      balance = IERC20(token1).balanceOf(address(this));\\n      path[0] = token1;\\n      path[1] = _weth;\\n      if (balance > 0) {\\n        TransferHelper.safeApprove(token1, router, balance);\\n        IUniswapV2Router02(router).swapExactTokensForETHSupportingFeeOnTransferTokens(\\n          balance,\\n          0,\\n          path,\\n          address(this),\\n          block.timestamp\\n        );\\n      }\\n    }\\n  }\\n\\n  function uniswapV2CreatePosition(\\n    IWeb3Packs.LiquidityOrderGeneric memory liquidityOrder,\\n    uint256 balanceAmount0,\\n    uint256 balanceAmount1,\\n    uint256 minAmount0,\\n    uint256 minAmount1\\n  ) internal returns (\\n    uint256 lpTokenId,\\n    uint256 liquidity,\\n    uint256 amount0,\\n    uint256 amount1\\n  ) {\\n    // Add Liquidity\\n    (amount0, amount1, liquidity) = IUniswapV2Router02(liquidityOrder.router).addLiquidity(\\n      liquidityOrder.token0,\\n      liquidityOrder.token1,\\n      balanceAmount0,\\n      balanceAmount1,\\n      minAmount0,\\n      minAmount1,\\n      address(this),\\n      block.timestamp\\n    );\\n\\n    // Deposit the LP tokens into the Web3Packs NFT\\n    address lpTokenAddress = _getUniswapV2PairAddress(liquidityOrder.router, liquidityOrder.token0, liquidityOrder.token1);\\n    lpTokenId = uint256(uint160(lpTokenAddress));\\n  }\\n\\n  function uniswapV2RemoveLiquidity(\\n    IWeb3Packs.LiquidityPosition memory liquidityPosition,\\n    IWeb3Packs.LiquidityPairs memory liquidityPairs\\n  )\\n    internal\\n    returns (uint amount0, uint amount1)\\n  {\\n    address lpTokenAddress = _getUniswapV2PairAddress(liquidityPosition.router, liquidityPosition.token0, liquidityPosition.token1);\\n\\n    TransferHelper.safeApprove(\\n      lpTokenAddress,\\n      liquidityPosition.router,\\n      liquidityPosition.liquidity\\n    );\\n\\n    (amount0, amount1) = IUniswapV2Router02(liquidityPosition.router).removeLiquidity(\\n      liquidityPosition.token0,\\n      liquidityPosition.token1,\\n      liquidityPosition.liquidity,\\n      liquidityPairs.token0.amount,\\n      liquidityPairs.token1.amount,\\n      address(this),\\n      block.timestamp\\n    );\\n  }\\n\\n  function uniswapV2GetLiquidityTokenAddress(\\n    IWeb3Packs.LiquidityPosition memory liquidityPosition\\n  )\\n    internal\\n    view\\n    returns (address lpTokenAddress, uint256 lpTokenId)\\n  {\\n    lpTokenAddress = _getUniswapV2PairAddress(liquidityPosition.router, liquidityPosition.token0, liquidityPosition.token1);\\n    lpTokenId = 0;\\n  }\\n\\n  function _getUniswapV2Factory(address router) private pure returns (address) {\\n    IUniswapV2Router02 _router = IUniswapV2Router02(router);\\n    return _router.factory();\\n  }\\n\\n  function _getUniswapV2PairAddress(address router, address token0, address token1) private view returns (address) {\\n    IUniswapV2Factory _factory = IUniswapV2Factory(_getUniswapV2Factory(router));\\n    return _factory.getPair(token0, token1);\\n  }\\n}\\n\",\"keccak256\":\"0xd5a35969fa658347f5f1c657e02fbaf8bd886d311ca3d93402de455ab6b1983f\",\"license\":\"MIT\"},\"contracts/lib/UniswapV3.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// UniswapV3.sol\\n// Copyright (c) 2023 Firma Lux, Inc. <https://charged.fi>\\n//\\n// Permission is hereby granted, free of charge, to any person obtaining a copy\\n// of this software and associated documentation files (the \\\"Software\\\"), to deal\\n// in the Software without restriction, including without limitation the rights\\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\n// copies of the Software, and to permit persons to whom the Software is\\n// furnished to do so, subject to the following conditions:\\n//\\n// The above copyright notice and this permission notice shall be included in all\\n// copies or substantial portions of the Software.\\n//\\n// THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n// FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n// SOFTWARE.\\n\\n//                _    ____                   _\\n//               | |  |___ \\\\                 | |\\n//  __      _____| |__  __) |_ __   __ _  ___| | _____\\n//  \\\\ \\\\ /\\\\ / / _ \\\\ '_ \\\\|__ <| '_ \\\\ / _` |/ __| |/ / __|\\n//   \\\\ V  V /  __/ |_) |__) | |_) | (_| | (__|   <\\\\__ \\\\\\n//    \\\\_/\\\\_/ \\\\___|_.__/____/| .__/ \\\\__,_|\\\\___|_|\\\\_\\\\___/\\n//                          | |\\n//                          |_|\\n\\npragma solidity 0.8.17;\\npragma abicoder v2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\\\";\\nimport \\\"../interfaces/IWeb3Packs.sol\\\";\\nimport \\\"../interfaces/IAlgebraRouter.sol\\\";\\nimport \\\"../interfaces/INonfungiblePositionManager.sol\\\";\\n\\ncontract UniswapV3 {\\n  address private _weth;\\n\\n  constructor(address weth) {\\n    _weth = weth;\\n  }\\n\\n  function uniswapV3SwapSingle(\\n    IWeb3Packs.ERC20SwapOrderGeneric memory swapOrder\\n  )\\n    internal\\n    returns (uint256 amountOut)\\n  {\\n    (bool success, bytes memory data ) = swapOrder.router.call{value: swapOrder.payableAmountIn}(\\n      swapOrder.callData\\n    );\\n    if (!success) {\\n      assembly {\\n        let dataSize := mload(data) // Load the size of the data\\n        let dataPtr := add(data, 0x20) // Advance data pointer to the next word\\n        revert(dataPtr, dataSize) // Revert with the given data\\n      }\\n    }\\n    amountOut = abi.decode(data, (uint256));\\n  }\\n\\n  function uniswapV3SwapForEth(\\n    address token0,\\n    address token1,\\n    address router\\n  )\\n    internal\\n  {\\n    uint256 balance;\\n    IAlgebraRouter.ExactInputSingleParams memory params;\\n\\n    if (token0 != _weth) {\\n      balance = IERC20(token0).balanceOf(address(this));\\n      if (balance > 0) {\\n        TransferHelper.safeApprove(token0, router, balance);\\n        params = IAlgebraRouter.ExactInputSingleParams(token0, _weth, address(this), block.timestamp, balance, 0, 0);\\n        IAlgebraRouter(router).exactInputSingle(params);\\n      }\\n    }\\n\\n    if (token1 != _weth) {\\n      balance = IERC20(token1).balanceOf(address(this));\\n      if (balance > 0) {\\n        TransferHelper.safeApprove(token1, router, balance);\\n        params = IAlgebraRouter.ExactInputSingleParams(token1, _weth, address(this), block.timestamp, balance, 0, 0);\\n        IAlgebraRouter(router).exactInputSingle(params);\\n      }\\n    }\\n  }\\n\\n  function uniswapV3CreatePosition(\\n    IWeb3Packs.LiquidityOrderGeneric memory liquidityOrder,\\n    uint256 balanceAmount0,\\n    uint256 balanceAmount1,\\n    uint256 minAmount0,\\n    uint256 minAmount1\\n  ) internal returns (\\n    uint256 lpTokenId,\\n    uint256 liquidity,\\n    uint256 amount0,\\n    uint256 amount1\\n  ) {\\n    // Add Liquidity\\n    INonfungiblePositionManager.MintParams memory params =\\n      INonfungiblePositionManager.MintParams({\\n        token0: liquidityOrder.token0,\\n        token1: liquidityOrder.token1,\\n        tickLower: liquidityOrder.tickLower,\\n        tickUpper: liquidityOrder.tickUpper,\\n        amount0Desired: balanceAmount0,\\n        amount1Desired: balanceAmount1,\\n        amount0Min: minAmount0,\\n        amount1Min: minAmount1,\\n        recipient: address(this),\\n        deadline: block.timestamp\\n      });\\n    (lpTokenId, liquidity, amount0, amount1) = INonfungiblePositionManager(liquidityOrder.router).mint(params);\\n  }\\n\\n\\n  function uniswapV3CollectLpFees(\\n    IWeb3Packs.LiquidityPosition memory liquidityPosition\\n  )\\n    internal\\n    returns (uint256 amount0, uint256 amount1)\\n  {\\n    INonfungiblePositionManager.CollectParams memory params =\\n      INonfungiblePositionManager.CollectParams({\\n        tokenId: liquidityPosition.lpTokenId,\\n        recipient: address(this),\\n        amount0Max: type(uint128).max,\\n        amount1Max: type(uint128).max\\n      });\\n\\n    (amount0, amount1) = INonfungiblePositionManager(liquidityPosition.router).collect(params);\\n  }\\n\\n  function uniswapV3RemoveLiquidity(\\n    IWeb3Packs.LiquidityPosition memory liquidityPosition,\\n    IWeb3Packs.LiquidityPairs memory liquidityPairs\\n  )\\n    internal\\n    returns (uint amount0, uint amount1)\\n  {\\n    // Release Liquidity\\n    INonfungiblePositionManager.DecreaseLiquidityParams memory params =\\n      INonfungiblePositionManager.DecreaseLiquidityParams({\\n        tokenId: liquidityPosition.lpTokenId,\\n        liquidity: uint128(liquidityPosition.liquidity),\\n        amount0Min: liquidityPairs.token0.amount,\\n        amount1Min: liquidityPairs.token1.amount,\\n        deadline: block.timestamp\\n      });\\n    (amount0, amount1) = INonfungiblePositionManager(liquidityPosition.router).decreaseLiquidity(params);\\n  }\\n\\n  function uniswapV3GetLiquidityTokenAddress(\\n    IWeb3Packs.LiquidityPosition memory liquidityPosition\\n  )\\n    internal\\n    pure\\n    returns (address lpTokenAddress, uint256 lpTokenId)\\n  {\\n    lpTokenAddress = liquidityPosition.router;\\n    lpTokenId = liquidityPosition.lpTokenId;\\n  }\\n}\\n\",\"keccak256\":\"0x7ca9445a0ab7fd36790d37eb3accf7c07e5855c726a8e23aba7cb660a5456289\",\"license\":\"MIT\"},\"contracts/lib/Velodrome.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// Velodrome.sol\\n// Copyright (c) 2023 Firma Lux, Inc. <https://charged.fi>\\n//\\n// Permission is hereby granted, free of charge, to any person obtaining a copy\\n// of this software and associated documentation files (the \\\"Software\\\"), to deal\\n// in the Software without restriction, including without limitation the rights\\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\n// copies of the Software, and to permit persons to whom the Software is\\n// furnished to do so, subject to the following conditions:\\n//\\n// The above copyright notice and this permission notice shall be included in all\\n// copies or substantial portions of the Software.\\n//\\n// THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n// FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n// SOFTWARE.\\n\\n//                _    ____                   _\\n//               | |  |___ \\\\                 | |\\n//  __      _____| |__  __) |_ __   __ _  ___| | _____\\n//  \\\\ \\\\ /\\\\ / / _ \\\\ '_ \\\\|__ <| '_ \\\\ / _` |/ __| |/ / __|\\n//   \\\\ V  V /  __/ |_) |__) | |_) | (_| | (__|   <\\\\__ \\\\\\n//    \\\\_/\\\\_/ \\\\___|_.__/____/| .__/ \\\\__,_|\\\\___|_|\\\\_\\\\___/\\n//                          | |\\n//                          |_|\\n\\npragma solidity 0.8.17;\\npragma abicoder v2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\\\";\\nimport \\\"../interfaces/IWeb3PacksDefs.sol\\\";\\nimport \\\"../interfaces/IWeb3Packs.sol\\\";\\nimport \\\"../interfaces/IVelodrome.sol\\\";\\n\\ncontract Velodrome {\\n  address private weth;\\n\\n  constructor(address _weth) {\\n    weth = _weth;\\n  }\\n\\n  function velodromeSwapSingle(\\n    IWeb3Packs.ERC20SwapOrderGeneric memory swapOrder\\n  )\\n    internal\\n    returns (uint256 amountOut)\\n  {\\n    (bool success, bytes memory data ) = swapOrder.router.call{value: swapOrder.payableAmountIn}(\\n      swapOrder.callData\\n    );\\n    if (!success) {\\n      assembly {\\n        let dataSize := mload(data) // Load the size of the data\\n        let dataPtr := add(data, 0x20) // Advance data pointer to the next word\\n        revert(dataPtr, dataSize) // Revert with the given data\\n      }\\n    }\\n\\n    uint[] memory amounts = abi.decode(data, (uint[]));\\n    amountOut = amounts[amounts.length-1];\\n  }\\n\\n  function velodromeSwapForEth(\\n    address token0,\\n    address token1,\\n    address router,\\n    IWeb3PacksDefs.Route[] memory reverseRoutes,\\n    bool stable\\n  )\\n    internal\\n  {\\n    uint256 balance;\\n    IVelodrome.Route[] memory routes = new IVelodrome.Route[](reverseRoutes.length);\\n    for (uint i = 0; i < reverseRoutes.length; i++) {\\n      routes[i] = IVelodrome.Route({from: reverseRoutes[i].token0, to: reverseRoutes[i].token1, stable: stable});\\n    }\\n\\n    if (token0 != weth) {\\n      balance = IERC20(token0).balanceOf(address(this));\\n      if (balance > 0) {\\n        TransferHelper.safeApprove(token0, router, balance);\\n        IVelodrome(router).swapExactTokensForTokens(\\n          balance,\\n          0,\\n          routes,\\n          address(this),\\n          block.timestamp\\n        );\\n      }\\n    }\\n    if (token1 != weth) {\\n      balance = IERC20(token1).balanceOf(address(this));\\n      if (balance > 0) {\\n        TransferHelper.safeApprove(token1, router, balance);\\n        IVelodrome(router).swapExactTokensForTokens(\\n          balance,\\n          0,\\n          routes,\\n          address(this),\\n          block.timestamp\\n        );\\n      }\\n    }\\n  }\\n\\n  function velodromeCreatePosition(\\n    IWeb3Packs.LiquidityOrderGeneric memory liquidityOrder,\\n    uint256 balanceAmount0,\\n    uint256 balanceAmount1,\\n    uint256 minAmount0,\\n    uint256 minAmount1\\n  )\\n    internal\\n    returns (\\n      uint256 lpTokenId,\\n      uint256 liquidity,\\n      uint256 amount0,\\n      uint256 amount1\\n    )\\n  {\\n    // Add Liquidity\\n    (amount0, amount1, liquidity) = IVelodrome(liquidityOrder.router).addLiquidity(\\n      liquidityOrder.token0,\\n      liquidityOrder.token1,\\n      liquidityOrder.stable,\\n      balanceAmount0,\\n      balanceAmount1,\\n      minAmount0,\\n      minAmount1,\\n      address(this),\\n      block.timestamp\\n    );\\n\\n    // Deposit the LP tokens into the Web3Packs NFT\\n    address lpTokenAddress = _getVelodromePairAddress(liquidityOrder.router, liquidityOrder.token0, liquidityOrder.token1);\\n    lpTokenId = uint256(uint160(lpTokenAddress));\\n  }\\n\\n  function velodromeRemoveLiquidity(\\n    IWeb3Packs.LiquidityPosition memory liquidityPosition,\\n    IWeb3Packs.LiquidityPairs memory liquidityPairs\\n  )\\n    internal\\n    returns (uint amount0, uint amount1)\\n  {\\n    address lpTokenAddress = _getVelodromePairAddress(liquidityPosition.router, liquidityPosition.token0, liquidityPosition.token1);\\n\\n    TransferHelper.safeApprove(\\n      lpTokenAddress,\\n      liquidityPosition.router,\\n      liquidityPosition.liquidity\\n    );\\n\\n    (amount0, amount1) = IVelodrome(liquidityPosition.router).removeLiquidity(\\n      liquidityPosition.token0,\\n      liquidityPosition.token1,\\n      liquidityPosition.stable,\\n      liquidityPosition.liquidity,\\n      liquidityPairs.token0.amount,\\n      liquidityPairs.token1.amount,\\n      address(this),\\n      block.timestamp\\n    );\\n  }\\n\\n  function velodromeGetLiquidityTokenAddress(\\n    IWeb3Packs.LiquidityPosition memory liquidityPosition\\n  )\\n    internal\\n    view\\n    returns (address lpTokenAddress, uint256 lpTokenId)\\n  {\\n    lpTokenAddress = _getVelodromePairAddress(liquidityPosition.router, liquidityPosition.token0, liquidityPosition.token1);\\n    lpTokenId = 0;\\n  }\\n\\n  function _getVelodromePairAddress(address router, address token0, address token1) private view returns (address) {\\n    return IVelodrome(router).poolFor(token0, token1, false);\\n  }\\n}\\n\",\"keccak256\":\"0x1b182c00e4de661800a25ba12d5fb2745f1efec88aa9b567ca16faa5da33f7e8\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162005fea38038062005fea83398101604081905262000034916200011b565b80808080806200004433620000cb565b6000805460ff60a01b1916905560018055600280546001600160a01b03199081166001600160a01b03938416179091556003805482169383169390931790925560048054831693821693909317909255600580548216938316939093179092556006805483169382169390931790925560078054909116929091169190911790556200014d565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000602082840312156200012e57600080fd5b81516001600160a01b03811681146200014657600080fd5b9392505050565b615e8d806200015d6000396000f3fe6080604052600436106101235760003560e01c8063684433fb116100a0578063a0edb48b11610064578063a0edb48b14610367578063a176459514610387578063a93bd512146103a7578063b6a9cb7e146103e6578063f2fde38b1461040657610130565b8063684433fb146102d457806369d09c4c146102f4578063715018a6146103145780638da5cb5b146103295780639bd5c43a1461034757610130565b806345b315cf116100e757806345b315cf14610204578063522f6815146102325780635c975abb14610252578063645290651461027c578063669d09211461029c57610130565b80630846f99e14610138578063150b7a021461015a5780631593dee1146101a45780633bffd3b8146101c45780634025feb2146101e457610130565b366101305734600a819055005b34600a819055005b34801561014457600080fd5b50610158610153366004614ab7565b610426565b005b34801561016657600080fd5b50610186610175366004614ad4565b630a85bd0160e11b95945050505050565b6040516001600160e01b031990911681526020015b60405180910390f35b3480156101b057600080fd5b506101586101bf366004614b72565b6104e1565b3480156101d057600080fd5b506101586101df366004614be5565b6104f9565b3480156101f057600080fd5b506101586101ff366004614b72565b61058b565b34801561021057600080fd5b5061022461021f366004614f74565b61059e565b60405190815260200161019b565b34801561023e57600080fd5b5061015861024d36600461505e565b610949565b34801561025e57600080fd5b50600054600160a01b900460ff16604051901515815260200161019b565b34801561028857600080fd5b50610158610297366004614ab7565b61095f565b3480156102a857600080fd5b506008546102bc906001600160a01b031681565b6040516001600160a01b03909116815260200161019b565b3480156102e057600080fd5b506101586102ef36600461508a565b610a07565b34801561030057600080fd5b506009546102bc906001600160a01b031681565b34801561032057600080fd5b50610158610b9b565b34801561033557600080fd5b506000546001600160a01b03166102bc565b34801561035357600080fd5b50610158610362366004615105565b610baf565b34801561037357600080fd5b5061015861038236600461513a565b610c2b565b34801561039357600080fd5b506007546102bc906001600160a01b031681565b3480156103b357600080fd5b506103c76103c2366004615180565b610c45565b604080516001600160a01b03909316835260208301919091520161019b565b3480156103f257600080fd5b5061015861040136600461519d565b610da2565b34801561041257600080fd5b50610158610421366004614ab7565b610e20565b61042e610e99565b6001600160a01b0381166104975760405162461bcd60e51b815260206004820152602560248201527f496e76616c6964206164647265737320666f7220776562337061636b73206d616044820152643730b3b2b960d91b60648201526084015b60405180910390fd5b600980546001600160a01b0319166001600160a01b0383169081179091556040517f29c3be2a07cd721ad5a371231bdf132e57fbe87625b604811898342f90c9582f90600090a250565b6104e9610e99565b6104f4838383610ef3565b505050565b6008546001600160a01b031633146105235760405162461bcd60e51b815260040161048e906151e8565b60008061054661053836889003880188615246565b610541876152f9565b610fee565b9150915082610583576105696105626080880160608901614ab7565b85846110fa565b61058361057c60a0880160808901614ab7565b85836110fa565b505050505050565b610593610e99565b6104f48383836111fa565b6008546000906001600160a01b031633146105cb5760405162461bcd60e51b815260040161048e906151e8565b60005b848110156107485760008686838181106105ea576105ea615305565b90506020028101906105fc919061531b565b610605906153ab565b90506106148160200151611347565b6003816101600151600481111561062d5761062d61549e565b0361064f5761064f8160400151826060015183602001518461010001516113d4565b600281610160015160048111156106685761066861549e565b03610690576106908160400151826060015183602001518461014001518561012001516116b5565b600481610160015160048111156106a9576106a961549e565b036106cb576106cb8160400151826060015183602001518461014001516119df565b600081610160015160048111156106e4576106e461549e565b0361070057610700816040015182606001518360200151611cb0565b600181610160015160048111156107195761071961549e565b0361073557610735816040015182606001518360200151611f66565b5080610740816154ca565b9150506105ce565b5060005b83518110156108ba57600084828151811061076957610769615305565b602002602001015190506107808160800151611347565b60038160a0015160048111156107985761079861549e565b036107bc57805151602082015151608083015160608401516107bc939291906113d4565b60028160a0015160048111156107d4576107d461549e565b036107ff57805151602082015151608083015160e08401516101008501516107ff94939291906116b5565b60048160a0015160048111156108175761081761549e565b0361083b57805151602082015151608083015160e084015161083b939291906119df565b60008160a0015160048111156108535761085361549e565b03610871578051516020820151516080830151610871929190611cb0565b60018160a0015160048111156108895761088961549e565b036108a75780515160208201515160808301516108a7929190611f66565b50806108b2816154ca565b91505061074c565b506007546040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa158015610903573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061092791906154e3565b600754909150610941906001600160a01b031683836110fa565b949350505050565b610951610e99565b61095b8282612214565b5050565b610967610e99565b6001600160a01b0381166109bd5760405162461bcd60e51b815260206004820152601d60248201527f496e76616c6964206164647265737320666f7220776562337061636b73000000604482015260640161048e565b600880546001600160a01b0319166001600160a01b0383169081179091556040517f68ca72fc2a01b105d181de42d44a6c7a3c1061d13fa12f95feb7bc55ffd6d07590600090a250565b6008546001600160a01b03163314610a315760405162461bcd60e51b815260040161048e906151e8565b6000805b83811015610ab557630ae8aa8960e31b858583818110610a5757610a57615305565b90506101c00201606001351480610a905750630ae8aa8960e31b858583818110610a8357610a83615305565b90506101c0020160800135145b15610aa35781610a9f816154ca565b9250505b80610aad816154ca565b915050610a35565b506007546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa158015610aff573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b2391906154e3565b9050600060018311610b36576000610b40565b610b4083836154fc565b905060005b85811015610b9257610b80878783818110610b6257610b62615305565b90506101c00201803603810190610b79919061551e565b868461229a565b80610b8a816154ca565b915050610b45565b50505050505050565b610ba3610e99565b610bad60006125ab565b565b6008546001600160a01b03163314610bd95760405162461bcd60e51b815260040161048e906151e8565b60005b818110156104f457610c19838383818110610bf957610bf9615305565b9050602002810190610c0b91906155f3565b610c1490615609565b6125fb565b80610c23816154ca565b915050610bdc565b610c33610e99565b610c3f848484846126dc565b50505050565b6000806003610c5c61014085016101208601615687565b6004811115610c6d57610c6d61549e565b03610c9257610c89610c8436859003850185615246565b612847565b91509150915091565b6002610ca661014085016101208601615687565b6004811115610cb757610cb761549e565b03610cd357610c89610cce36859003850185615246565b6128cf565b6004610ce761014085016101208601615687565b6004811115610cf857610cf861549e565b03610d1457610c89610d0f36859003850185615246565b6128f4565b6000610d2861014085016101208601615687565b6004811115610d3957610d3961549e565b03610d5557610c89610d5036859003850185615246565b61290f565b6001610d6961014085016101208601615687565b6004811115610d7a57610d7a61549e565b03610d9d57610c89610d9136859003850185615246565b61010081015190519091565b915091565b6008546001600160a01b03163314610dcc5760405162461bcd60e51b815260040161048e906151e8565b60005b82811015610c3f57610e0d848483818110610dec57610dec615305565b9050602002810190610dfe919061531b565b610e07906153ab565b8361292a565b5080610e18816154ca565b915050610dcf565b610e28610e99565b6001600160a01b038116610e8d5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161048e565b610e96816125ab565b50565b6000546001600160a01b03163314610bad5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161048e565b6001600160a01b038316610f195760405162461bcd60e51b815260040161048e906156a2565b6040516370a0823160e01b815230600482015281906001600160a01b038416906370a0823190602401602060405180830381865afa158015610f5f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f8391906154e3565b106104f457610f9c6001600160a01b0383168483612a96565b816001600160a01b0316836001600160a01b03167f6c9d637297625e945b296ff73a71fcfbd0a9e062652b6491a921c4c60194176b83604051610fe191815260200190565b60405180910390a3505050565b600080610fff846101000151611347565b600384610120015160048111156110185761101861549e565b0361102d576110278484612ae8565b90925090505b600284610120015160048111156110465761104661549e565b0361105b576110558484612d4a565b90925090505b600484610120015160048111156110745761107461549e565b03611089576110838484612e4c565b90925090505b600084610120015160048111156110a2576110a261549e565b036110b7576110b18484612ef9565b90925090505b600184610120015160048111156110d0576110d061549e565b036110f3576110df8484612f16565b90925090506110ed84612fb4565b90925090505b9250929050565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663a9059cbb60e01b179052915160009283929087169161115691906156e9565b6000604051808303816000865af19150503d8060008114611193576040519150601f19603f3d011682016040523d82523d6000602084013e611198565b606091505b50915091508180156111c25750805115806111c25750808060200190518101906111c291906156fb565b6111f35760405162461bcd60e51b815260206004820152600260248201526114d560f21b604482015260640161048e565b5050505050565b6001600160a01b0383166112205760405162461bcd60e51b815260040161048e906156a2565b6040516331a9108f60e11b81526004810182905230906001600160a01b03841690636352211e90602401602060405180830381865afa158015611267573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061128b9190615718565b6001600160a01b0316036104f4576040516323b872dd60e01b81523060048201526001600160a01b038481166024830152604482018390528316906323b872dd90606401600060405180830381600087803b1580156112e957600080fd5b505af11580156112fd573d6000803e3d6000fd5b5050505080826001600160a01b0316846001600160a01b03167ffefe036cac4ee3a4aca074a81cbcc4376e1484693289078dbec149c890101d5b60405160405180910390a4505050565b600954604051636f2ddb5f60e01b81526001600160a01b03838116600483015290911690636f2ddb5f906024016020604051808303816000875af1158015611393573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113b791906156fb565b610e96576040516311970e2d60e31b815260040160405180910390fd5b6002546000906001600160a01b03868116911614611543576040516370a0823160e01b81523060048201526001600160a01b038616906370a0823190602401602060405180830381865afa158015611430573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061145491906154e3565b905061146185848361307b565b8015611543576040805160c081018252838152600060208083018290526001600160a01b0389811684860152600254811660608086019190915260808086018890528651808501885285815260a0870152865190810187523080825293810185905280870193909352820183905293516352bbbe2960e01b815292939092908716916352bbbe29916114fc91869186919042906004016157c8565b6020604051808303816000875af115801561151b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061153f91906154e3565b5050505b6002546001600160a01b038581169116146111f3576040516370a0823160e01b81523060048201526001600160a01b038516906370a0823190602401602060405180830381865afa15801561159c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115c091906154e3565b90506115cd84848361307b565b80156111f3576040805160c081018252838152600060208083018290526001600160a01b0388811684860152600254811660608086019190915260808086018890528651808501885285815260a0870152865190810187523080825293810185905280870193909352820183905293516352bbbe2960e01b815292939092908716916352bbbe299161166891869186919042906004016157c8565b6020604051808303816000875af1158015611687573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116ab91906154e3565b5050505050505050565b60008083516001600160401b038111156116d1576116d1614ca5565b60405190808252806020026020018201604052801561171c57816020015b60408051606081018252600080825260208083018290529282015282526000199092019101816116ef5790505b50905060005b84518110156117c457604051806060016040528086838151811061174857611748615305565b6020026020010151600001516001600160a01b0316815260200186838151811061177457611774615305565b6020026020010151602001516001600160a01b031681526020018515158152508282815181106117a6576117a6615305565b602002602001018190525080806117bc906154ca565b915050611722565b506005546001600160a01b038881169116146118d3576040516370a0823160e01b81523060048201526001600160a01b038816906370a0823190602401602060405180830381865afa15801561181e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061184291906154e3565b915081156118d35761185587868461307b565b604051631e82ecdb60e31b81526001600160a01b0386169063f41766d89061188a90859060009086903090429060040161582c565b6000604051808303816000875af11580156118a9573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526118d191908101906158c1565b505b6005546001600160a01b03878116911614610b92576040516370a0823160e01b81523060048201526001600160a01b038716906370a0823190602401602060405180830381865afa15801561192c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061195091906154e3565b91508115610b925761196386868461307b565b604051631e82ecdb60e31b81526001600160a01b0386169063f41766d89061199890859060009086903090429060040161582c565b6000604051808303816000875af11580156119b7573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526116ab91908101906158c1565b6040805160018082528183019092526000918291906020808301908036833701905050905082600081518110611a1757611a17615305565b60200260200101516000015181600081518110611a3657611a36615305565b60200260200101906001600160a01b031690816001600160a01b03168152505082600081518110611a6957611a69615305565b60200260200101516000015181600181518110611a8857611a88615305565b6001600160a01b039283166020918202929092010152600654878216911614611ba4576040516370a0823160e01b81523060048201526001600160a01b038716906370a0823190602401602060405180830381865afa158015611aef573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b1391906154e3565b91508115611ba457611b2686858461307b565b6040516338ed173960e01b81526001600160a01b038516906338ed173990611b5b908590600090869030904290600401615946565b6000604051808303816000875af1158015611b7a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611ba291908101906158c1565b505b6006546001600160a01b03868116911614610583576040516370a0823160e01b81523060048201526001600160a01b038616906370a0823190602401602060405180830381865afa158015611bfd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c2191906154e3565b9150811561058357611c3485858461307b565b6040516338ed173960e01b81526001600160a01b038516906338ed173990611c69908590600090869030904290600401615946565b6000604051808303816000875af1158015611c88573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610b9291908101906158c1565b6003546000906060906001600160a01b03868116911614611e0b576040516370a0823160e01b81523060048201526001600160a01b038616906370a0823190602401602060405180830381865afa158015611d0f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d3391906154e3565b91508481600081518110611d4957611d49615305565b6001600160a01b039283166020918202929092010152600354825191169082906001908110611d7a57611d7a615305565b6001600160a01b03909216602092830291909101909101528115611e0b57611da385848461307b565b60405163791ac94760e01b81526001600160a01b0384169063791ac94790611dd8908590600090869030904290600401615946565b600060405180830381600087803b158015611df257600080fd5b505af1158015611e06573d6000803e3d6000fd5b505050505b6003546001600160a01b038581169116146111f3576040516370a0823160e01b81523060048201526001600160a01b038516906370a0823190602401602060405180830381865afa158015611e64573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e8891906154e3565b91508381600081518110611e9e57611e9e615305565b6001600160a01b039283166020918202929092010152600354825191169082906001908110611ecf57611ecf615305565b6001600160a01b039092166020928302919091019091015281156111f357611ef884848461307b565b60405163791ac94760e01b81526001600160a01b0384169063791ac94790611f2d908590600090869030904290600401615946565b600060405180830381600087803b158015611f4757600080fd5b505af1158015611f5b573d6000803e3d6000fd5b505050505050505050565b6040805160e081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c081018290526004546001600160a01b038681169116146120da576040516370a0823160e01b81523060048201526001600160a01b038616906370a0823190602401602060405180830381865afa158015611ff7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061201b91906154e3565b915081156120da5761202e85848461307b565b506040805160e0810182526001600160a01b0380871682526004805482166020840152308385015242606084015260808301859052600060a0840181905260c0840152925163178ca23160e31b815291929085169163bc65118891612095918591016159b7565b6020604051808303816000875af11580156120b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120d891906154e3565b505b6004546001600160a01b038581169116146111f3576040516370a0823160e01b81523060048201526001600160a01b038516906370a0823190602401602060405180830381865afa158015612133573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061215791906154e3565b915081156111f35761216a84848461307b565b506040805160e0810182526001600160a01b0380861682526004805482166020840152308385015242606084015260808301859052600060a0840181905260c0840152925163178ca23160e31b815291929085169163bc651188916121d1918591016159b7565b6020604051808303816000875af11580156121f0573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061058391906154e3565b6001600160a01b03821661223a5760405162461bcd60e51b815260040161048e906156a2565b80471061095b576122546001600160a01b03831682613174565b816001600160a01b03167eddb683bb45cd5d0ad8a200c6fae7152b1c236ee90a4a37db692407f5cc38bd8260405161228e91815260200190565b60405180910390a25050565b82516122a590611347565b6000806000806000806122b8898861328d565b9150915060006127108a61010001516127106122d49190615a10565b6122de9085615a23565b6122e891906154fc565b905060006127108b61010001516127106123029190615a10565b61230c9085615a23565b61231691906154fc565b905061232b8b602001518c600001518661307b565b61233e8b604001518c600001518561307b565b60038b6101a0015160048111156123575761235761549e565b0361237c576123678b8585613530565b929a509098509650945061237c8a89896137f3565b60028b6101a0015160048111156123955761239561549e565b036123bd576123a78b858585856138e8565b929a50909850965094506123bd8a8960006137f3565b60048b6101a0015160048111156123d6576123d661549e565b036123fe576123e88b858585856139e7565b929a50909850965094506123fe8a8960006137f3565b60008b6101a0015160048111156124175761241761549e565b0361243f576124298b85858585613a98565b929a509098509650945061243f8a8960006137f3565b60018b6101a0015160048111156124585761245861549e565b036124825761246a8b85858585613b49565b8e51939b5091995097509550612482908b908a613c5d565b60006040518061014001604052808a81526020018981526020018d6101600151151581526020018d602001516001600160a01b031681526020018d604001516001600160a01b031681526020018d610120015160020b81526020018d610140015160020b81526020018d610180015181526020018d600001516001600160a01b031681526020018d6101a0015160048111156125205761252061549e565b905260095460405163759a46d760e11b81529192506001600160a01b03169063eb348dae90612555908e908590600401615a4e565b600060405180830381600087803b15801561256f57600080fd5b505af1158015612583573d6000803e3d6000fd5b5050505061259d8c6020015188878f604001518a89613d09565b505050505050505050505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6126088160200151611347565b8060400151600a54101561265e5760405162461bcd60e51b815260206004820152601f60248201527f496e76616c696420616d6f756e7420666f7220436f6e747261637443616c6c00604482015260640161048e565b60008082602001516001600160a01b03168360400151846000015160405161268691906156e9565b60006040518083038185875af1925050503d80600081146126c3576040519150601f19603f3d011682016040523d82523d6000602084013e6126c8565b606091505b5091509150816104f4578051602082018181fd5b6001600160a01b0384166127025760405162461bcd60e51b815260040161048e906156a2565b604051627eeac760e11b81523060048201526024810183905281906001600160a01b0385169062fdd58e90604401602060405180830381865afa15801561274d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061277191906154e3565b10610c3f57604051637921219560e11b81523060048201526001600160a01b038581166024830152604482018490526064820183905260a06084830152600060a483015284169063f242432a9060c401600060405180830381600087803b1580156127db57600080fd5b505af11580156127ef573d6000803e3d6000fd5b5050505081836001600160a01b0316856001600160a01b03167f620337bf89eea2b9ae2657beead83b5fa620452817118348aff96e201d52598b8460405161283991815260200190565b60405180910390a450505050565b60008060008361010001516001600160a01b031663f6c009278560e001516040518263ffffffff1660e01b815260040161288391815260200190565b6040805180830381865afa15801561289f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128c39190615b17565b50946000945092505050565b6000806128ea83610100015184606001518560800151613d4d565b9360009350915050565b6000806128ea83610100015184606001518560800151613dca565b6000806128ea83610100015184606001518560800151613e55565b60006129398360200151611347565b61295083604001518460200151856080015161307b565b600383610160015160048111156129695761296961549e565b0361297a5761297783613e61565b90505b600283610160015160048111156129935761299361549e565b036129a4576129a183613f62565b90505b600483610160015160048111156129bd576129bd61549e565b036129ce576129cb83613f62565b90505b600083610160015160048111156129e7576129e761549e565b036129f8576129f583613f62565b90505b60018361016001516004811115612a1157612a1161549e565b03612a2257612a1f8361402b565b90505b60e0830151612a3f57612a3a828460600151836137f3565b612a90565b60408051808201825260608501516001600160a01b039081168252602080830185815260e08801516000908152600b909252939020915182546001600160a01b031916911617815590516001909101555b92915050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b1790526104f49084906140bf565b60008060008461010001516001600160a01b031663f6c009278660e001516040518263ffffffff1660e01b8152600401612b2491815260200190565b6040805180830381865afa158015612b40573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b649190615b17565b509050600080612b9487606001518860800151858960000151602001518a60200151602001518c60400151614191565b91509150612bac83886101000151896020015161307b565b600060018860200151604051602001612bc6929190615b65565b60408051601f1981840301815260808301825285835260208301859052828201819052600060608401526101008b015160e08c01519251638bdb391360e01b81529194506001600160a01b031691638bdb391391612c2d9190309081908790600401615c46565b600060405180830381600087803b158015612c4757600080fd5b505af1158015612c5b573d6000803e3d6000fd5b50505060608a01516040516370a0823160e01b81523060048201526001600160a01b0390911691506370a0823190602401602060405180830381865afa158015612ca9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ccd91906154e3565b60808a01516040516370a0823160e01b81523060048201529198506001600160a01b0316906370a0823190602401602060405180830381865afa158015612d18573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d3c91906154e3565b955050505050509250929050565b6000806000612d6785610100015186606001518760800151613d4d565b9050612d7d81866101000151876020015161307b565b610100850151606086015160808701516040808901516020808b01518a518201518b83015190920151935163037b79b160e21b81526001600160a01b039687166004820152948616602486015291151560448501526064840191909152608483015260a48201523060c48201524260e4820152911690630dede6c490610104015b60408051808303816000875af1158015612e1c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e409190615c82565b90969095509350505050565b6000806000612e6985610100015186606001518760800151613dca565b9050612e7f81866101000151876020015161307b565b6101008501516060860151608087015160208089015188518201518983015190920151604051635d5155ef60e11b81526001600160a01b03958616600482015293851660248501526044840191909152606483019190915260848201523060a48201524260c482015291169063baa2abde9060e401612dfe565b6000806000612e6985610100015186606001518760800151613e55565b6040805160a081018252835181526020808501516001600160801b03908116828401908152855183015184860190815286840151909301516060850190815242608086019081526101008901519651630624e65f60e11b8152865160048201529251909316602483015292516044820152915160648301525160848201526000928392916001600160a01b0390911690630c49ccbe9060a401612dfe565b604080516080810182528251815230602082019081526001600160801b0382840181815260608401828152610100870151955163fc6f786560e01b81528551600482015293516001600160a01b03908116602486015291518316604485015251909116606483015260009384939291169063fc6f78659060840160408051808303816000875af115801561304c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130709190615c82565b909590945092505050565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663095ea7b360e01b17905291516000928392908716916130d791906156e9565b6000604051808303816000865af19150503d8060008114613114576040519150601f19603f3d011682016040523d82523d6000602084013e613119565b606091505b509150915081801561314357508051158061314357508080602001905181019061314391906156fb565b6111f35760405162461bcd60e51b8152602060048201526002602482015261534160f01b604482015260640161048e565b804710156131c45760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e6365000000604482015260640161048e565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114613211576040519150601f19603f3d011682016040523d82523d6000602084013e613216565b606091505b50509050806104f45760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d61792068617665207265766572746564000000000000606482015260840161048e565b6007546040516370a0823160e01b8152306004820152600091829182916001600160a01b0316906370a0823190602401602060405180830381865afa1580156132da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132fe91906154e3565b606086015190915061333457602085015160405163bf6ada5160e01b81526001600160a01b03909116600482015260240161048e565b630ae8aa8960e31b8560600151146133c55760608501516000908152600b6020908152604090912054908601516001600160a01b0390811691161461338c5760405163d0e96f5b60e01b815260040160405180910390fd5b6060850180516000908152600b60205260408082206001908101549351835290822080546001600160a01b0319168155015592506133d8565b600084116133d357806133d5565b835b92505b608085015161340b57604080860151905163bf6ada5160e01b81526001600160a01b03909116600482015260240161048e565b630ae8aa8960e31b85608001511461349b5760808501516000908152600b60205260409081902054908601516001600160a01b039081169116146134625760405163d0e96f5b60e01b815260040160405180910390fd5b6080850180516000908152600b60205260408082206001908101549351835290822080546001600160a01b0319168155015591506134ae565b600084116134a957806134ab565b835b91505b630ae8aa8960e31b85606001511415806134c6575083155b156134eb576127108560a00151846134de9190615a23565b6134e891906154fc565b92505b630ae8aa8960e31b8560800151141580613503575083155b15613528576127108560c001518361351b9190615a23565b61352591906154fc565b91505b509250929050565b600080600080600087600001516001600160a01b031663f6c009278961018001516040518263ffffffff1660e01b815260040161356f91815260200190565b6040805180830381865afa15801561358b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135af9190615b17565b5090506000806135d08a602001518b60400151858c8c8f6101600151614191565b9150915060006001828c60e001516040516020016135f093929190615ca6565b60408051601f1981840301815260808301825285835260208301859052828201819052600060608401528d516101808f0151925163172b958560e31b81529194506001600160a01b03169163b95cac28916136549190309081908790600401615c46565b600060405180830381600087803b15801561366e57600080fd5b505af1158015613682573d6000803e3d6000fd5b50506040516370a0823160e01b81523060048201526001600160a01b0388169b508b92506370a082319150602401602060405180830381865afa1580156136cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136f191906154e3565b60208d01516040516370a0823160e01b81523060048201529199506001600160a01b0316906370a0823190602401602060405180830381865afa15801561373c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061376091906154e3565b61376a908c615a10565b6040808e015190516370a0823160e01b81523060048201529198506001600160a01b0316906370a0823190602401602060405180830381865afa1580156137b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137d991906154e3565b6137e3908b615a10565b9550505050505093509350935093565b80600003613866576040516370a0823160e01b81523060048201526001600160a01b038316906370a0823190602401602060405180830381865afa15801561383f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061386391906154e3565b90505b60085461387e9083906001600160a01b0316836110fa565b600854604051639261968560e01b8152600481018590526001600160a01b03848116602483015260448201849052909116906392619685906064015b600060405180830381600087803b1580156138d457600080fd5b505af1158015610b92573d6000803e3d6000fd5b845160208601516040808801516101608901519151635a47ddc360e01b81526001600160a01b03938416600482015290831660248201529015156044820152606481018790526084810186905260a4810185905260c481018490523060e4820152426101048201526000928392839283929190911690635a47ddc390610124016060604051808303816000875af1158015613987573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139ab9190615cd8565b8b5160208d015160408e01519297509395509193506000926139cd9291613d4d565b6001600160a01b03169a9399509197509550909350505050565b60008060008088600001516001600160a01b031663e8e337008a602001518b604001518b8b8b8b30426040518963ffffffff1660e01b8152600401613a33989796959493929190615d06565b6060604051808303816000875af1158015613a52573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a769190615cd8565b8b5160208d015160408e01519297509395509193506000926139cd9291613dca565b60008060008088600001516001600160a01b031663e8e337008a602001518b604001518b8b8b8b30426040518963ffffffff1660e01b8152600401613ae4989796959493929190615d06565b6060604051808303816000875af1158015613b03573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b279190615cd8565b8b5160208d015160408e01519297509395509193506000926139cd9291613e55565b60008060008060006040518061014001604052808b602001516001600160a01b031681526020018b604001516001600160a01b031681526020018b610120015160020b81526020018b610140015160020b81526020018a8152602001898152602001888152602001878152602001306001600160a01b0316815260200142815250905089600001516001600160a01b0316639cc1a283826040518263ffffffff1660e01b8152600401613bfc9190615d4f565b6080604051808303816000875af1158015613c1b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c3f9190615dfa565b929d6001600160801b039092169c509a509098509650505050505050565b600854604051632142170760e11b81523060048201526001600160a01b03918216602482015260448101839052908316906342842e0e90606401600060405180830381600087803b158015613cb157600080fd5b505af1158015613cc5573d6000803e3d6000fd5b5050600854604051636069c4af60e11b8152600481018790526001600160a01b03868116602483015260448201869052909116925063c0d3895e91506064016138ba565b83851015613d2d576000613d1d8686615a10565b9050613d2b87335b836110fa565b505b80821015610583576000613d418383615a10565b9050610b928433613d25565b60405163147585a560e11b81526001600160a01b038381166004830152828116602483015260006044830181905291908516906328eb0b4a90606401602060405180830381865afa158015613da6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109419190615718565b600080613dd68561489c565b60405163e6a4390560e01b81526001600160a01b03868116600483015285811660248301529192509082169063e6a4390590604401602060405180830381865afa158015613e28573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613e4c9190615718565b95945050505050565b600080613dd685614900565b6000806040518060c00160405280846101000151815260200160006001811115613e8d57613e8d61549e565b81526040808601516001600160a01b039081166020808501919091526060808901518316848601526080808a015182870152845180840186526000808252968201528451908101855230808252818401879052818601529081019490945287015160a088015192516352bbbe2960e01b815294955092939216916352bbbe2991613f1f918691869142906004016157c8565b6020604051808303816000875af1158015613f3e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061094191906154e3565b600080600083602001516001600160a01b03168460c001518560000151604051613f8c91906156e9565b60006040518083038185875af1925050503d8060008114613fc9576040519150601f19603f3d011682016040523d82523d6000602084013e613fce565b606091505b509150915081613fe2578051602082018181fd5b600081806020019051810190613ff891906158c1565b905080600182516140099190615a10565b8151811061401957614019615305565b60200260200101519350505050919050565b600080600083602001516001600160a01b03168460c00151856000015160405161405591906156e9565b60006040518083038185875af1925050503d8060008114614092576040519150601f19603f3d011682016040523d82523d6000602084013e614097565b606091505b5091509150816140ab578051602082018181fd5b8080602001905181019061094191906154e3565b6000614114826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661496f9092919063ffffffff16565b8051909150156104f4578080602001905181019061413291906156fb565b6104f45760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161048e565b60608082156146f257604080516003808252608082019092529060208201606080368337505060408051600380825260808201909252929450905060208201606080368337019050509050866001600160a01b0316886001600160a01b0316111580156142105750856001600160a01b0316886001600160a01b031611155b156143cd57878260008151811061422957614229615305565b60200260200101906001600160a01b031690816001600160a01b031681525050848160008151811061425d5761425d615305565b602002602001018181525050856001600160a01b0316876001600160a01b03161161433057868260018151811061429657614296615305565b60200260200101906001600160a01b031690816001600160a01b03168152505085826002815181106142ca576142ca615305565b60200260200101906001600160a01b031690816001600160a01b03168152505083816001815181106142fe576142fe615305565b60200260200101818152505060008160028151811061431f5761431f615305565b602002602001018181525050614891565b858260018151811061434457614344615305565b60200260200101906001600160a01b031690816001600160a01b031681525050868260028151811061437857614378615305565b60200260200101906001600160a01b031690816001600160a01b0316815250506000816001815181106143ad576143ad615305565b602002602001018181525050838160028151811061431f5761431f615305565b876001600160a01b0316876001600160a01b0316111580156144015750856001600160a01b0316876001600160a01b031611155b1561458c57868260008151811061441a5761441a615305565b60200260200101906001600160a01b031690816001600160a01b031681525050838160008151811061444e5761444e615305565b602002602001018181525050856001600160a01b0316886001600160a01b0316116144ef57878260018151811061448757614487615305565b60200260200101906001600160a01b031690816001600160a01b03168152505085826002815181106144bb576144bb615305565b60200260200101906001600160a01b031690816001600160a01b03168152505084816001815181106142fe576142fe615305565b858260018151811061450357614503615305565b60200260200101906001600160a01b031690816001600160a01b031681525050878260028151811061453757614537615305565b60200260200101906001600160a01b031690816001600160a01b03168152505060008160018151811061456c5761456c615305565b602002602001018181525050848160028151811061431f5761431f615305565b85826000815181106145a0576145a0615305565b60200260200101906001600160a01b031690816001600160a01b0316815250506000816000815181106145d5576145d5615305565b602002602001018181525050866001600160a01b0316886001600160a01b03161161467657878260018151811061460e5761460e615305565b60200260200101906001600160a01b031690816001600160a01b031681525050868260028151811061464257614642615305565b60200260200101906001600160a01b031690816001600160a01b03168152505084816001815181106143ad576143ad615305565b868260018151811061468a5761468a615305565b60200260200101906001600160a01b031690816001600160a01b03168152505087826002815181106146be576146be615305565b60200260200101906001600160a01b031690816001600160a01b031681525050838160018151811061456c5761456c615305565b60408051600280825260608201835290916020830190803683375050604080516002808252606082018352939550929150602083019080368337019050509050866001600160a01b0316886001600160a01b031610156147e857878260008151811061476057614760615305565b60200260200101906001600160a01b031690816001600160a01b031681525050868260018151811061479457614794615305565b60200260200101906001600160a01b031690816001600160a01b03168152505084816000815181106147c8576147c8615305565b602002602001018181525050838160018151811061431f5761431f615305565b86826000815181106147fc576147fc615305565b60200260200101906001600160a01b031690816001600160a01b031681525050878260018151811061483057614830615305565b60200260200101906001600160a01b031690816001600160a01b031681525050838160008151811061486457614864615305565b602002602001018181525050848160018151811061488457614884615305565b6020026020010181815250505b965096945050505050565b6000816001600160a01b031663c45a01556040518163ffffffff1660e01b8152600401602060405180830381865afa1580156148dc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a909190615718565b600080829050806001600160a01b031663c45a01556040518163ffffffff1660e01b8152600401602060405180830381865afa158015614944573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906149689190615718565b9392505050565b6060610941848460008585600080866001600160a01b0316858760405161499691906156e9565b60006040518083038185875af1925050503d80600081146149d3576040519150601f19603f3d011682016040523d82523d6000602084013e6149d8565b606091505b50915091506149e9878383876149f4565b979650505050505050565b60608315614a63578251600003614a5c576001600160a01b0385163b614a5c5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161048e565b5081610941565b6109418383815115614a785781518083602001fd5b8060405162461bcd60e51b815260040161048e9190615e44565b6001600160a01b0381168114610e9657600080fd5b8035614ab281614a92565b919050565b600060208284031215614ac957600080fd5b813561496881614a92565b600080600080600060808688031215614aec57600080fd5b8535614af781614a92565b94506020860135614b0781614a92565b93506040860135925060608601356001600160401b0380821115614b2a57600080fd5b818801915088601f830112614b3e57600080fd5b813581811115614b4d57600080fd5b896020828501011115614b5f57600080fd5b9699959850939650602001949392505050565b600080600060608486031215614b8757600080fd5b8335614b9281614a92565b92506020840135614ba281614a92565b929592945050506040919091013590565b60006101408284031215614bc657600080fd5b50919050565b8015158114610e9657600080fd5b8035614ab281614bcc565b6000806000806101a08587031215614bfc57600080fd5b614c068686614bb3565b93506101408501356001600160401b03811115614c2257600080fd5b8501610160818803811315614c3657600080fd5b909350850135614c4581614a92565b9150610180850135614c5681614bcc565b939692955090935050565b60008083601f840112614c7357600080fd5b5081356001600160401b03811115614c8a57600080fd5b6020830191508360208260051b85010111156110f357600080fd5b634e487b7160e01b600052604160045260246000fd5b604080519081016001600160401b0381118282101715614cdd57614cdd614ca5565b60405290565b60405161012081016001600160401b0381118282101715614cdd57614cdd614ca5565b60405161014081016001600160401b0381118282101715614cdd57614cdd614ca5565b60405161018081016001600160401b0381118282101715614cdd57614cdd614ca5565b6040516101c081016001600160401b0381118282101715614cdd57614cdd614ca5565b604051601f8201601f191681016001600160401b0381118282101715614d9757614d97614ca5565b604052919050565b60006001600160401b03821115614db857614db8614ca5565b5060051b60200190565b600060408284031215614dd457600080fd5b614ddc614cbb565b90508135614de981614a92565b808252506020820135602082015292915050565b803560058110614ab257600080fd5b600082601f830112614e1d57600080fd5b81356020614e32614e2d83614d9f565b614d6f565b82815260069290921b84018101918181019086841115614e5157600080fd5b8286015b84811015614ea25760408189031215614e6e5760008081fd5b614e76614cbb565b8135614e8181614a92565b815281850135614e9081614a92565b81860152835291830191604001614e55565b509695505050505050565b60006101608284031215614ec057600080fd5b614ec8614ce3565b9050614ed48383614dc2565b8152614ee38360408401614dc2565b60208201526080820135604082015260a08201356060820152614f0860c08301614aa7565b6080820152614f1960e08301614dfd565b60a0820152610100614f2c818401614bda565b60c08301526101208301356001600160401b03811115614f4b57600080fd5b614f5785828601614e0c565b60e084015250614f6a6101408401614bda565b9082015292915050565b60008060008060608587031215614f8a57600080fd5b84356001600160401b0380821115614fa157600080fd5b614fad88838901614c61565b9096509450602091508682013581811115614fc757600080fd5b8701601f81018913614fd857600080fd5b8035614fe6614e2d82614d9f565b81815260059190911b8201840190848101908b83111561500557600080fd5b8584015b8381101561503d578035868111156150215760008081fd5b61502f8e8983890101614ead565b845250918601918601615009565b5080975050505050505061505360408601614aa7565b905092959194509250565b6000806040838503121561507157600080fd5b823561507c81614a92565b946020939093013593505050565b60008060006040848603121561509f57600080fd5b83356001600160401b03808211156150b657600080fd5b818601915086601f8301126150ca57600080fd5b8135818111156150d957600080fd5b8760206101c0830285010111156150ef57600080fd5b6020928301989097509590910135949350505050565b6000806020838503121561511857600080fd5b82356001600160401b0381111561512e57600080fd5b612e4085828601614c61565b6000806000806080858703121561515057600080fd5b843561515b81614a92565b9350602085013561516b81614a92565b93969395505050506040820135916060013590565b6000610140828403121561519357600080fd5b6149688383614bb3565b6000806000604084860312156151b257600080fd5b83356001600160401b038111156151c857600080fd5b6151d486828701614c61565b909790965060209590950135949350505050565b6020808252602c908201527f576562335061636b7345786368616e67654d616e61676572202d20496e76616c60408201526b696420576562335061636b7360a01b606082015260800190565b8035600281900b8114614ab257600080fd5b6000610140828403121561525957600080fd5b615261614d06565b823581526020830135602082015261527b60408401614bda565b604082015261528c60608401614aa7565b606082015261529d60808401614aa7565b60808201526152ae60a08401615234565b60a08201526152bf60c08401615234565b60c082015260e083013560e08201526101006152dc818501614aa7565b908201526101206152ee848201614dfd565b908201529392505050565b6000612a903683614ead565b634e487b7160e01b600052603260045260246000fd5b6000823561017e1983360301811261533257600080fd5b9190910192915050565b600082601f83011261534d57600080fd5b81356001600160401b0381111561536657615366614ca5565b615379601f8201601f1916602001614d6f565b81815284602083860101111561538e57600080fd5b816020850160208301376000918101602001919091529392505050565b600061018082360312156153be57600080fd5b6153c6614d29565b82356001600160401b03808211156153dd57600080fd5b6153e93683870161533c565b83526153f760208601614aa7565b602084015261540860408601614aa7565b604084015261541960608601614aa7565b60608401526080850135608084015260a085013560a084015260c085013560c084015260e085013560e0840152610100915081850135828401526101209150615463828601614bda565b828401526101409150818501358181111561547d57600080fd5b61548936828801614e0c565b83850152505050610160614f6a818501614dfd565b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600182016154dc576154dc6154b4565b5060010190565b6000602082840312156154f557600080fd5b5051919050565b60008261551957634e487b7160e01b600052601260045260246000fd5b500490565b60006101c0828403121561553157600080fd5b615539614d4c565b61554283614aa7565b815261555060208401614aa7565b602082015261556160408401614aa7565b6040820152606083013560608201526080830135608082015260a083013560a082015260c083013560c082015260e083013560e08201526101008084013581830152506101206155b2818501615234565b908201526101406155c4848201615234565b908201526101606155d6848201614bda565b9082015261018083810135908201526101a06152ee818501614dfd565b60008235605e1983360301811261533257600080fd5b60006060823603121561561b57600080fd5b604051606081016001600160401b03828210818311171561563e5761563e614ca5565b81604052843591508082111561565357600080fd5b506156603682860161533c565b825250602083013561567181614a92565b6020820152604092830135928101929092525090565b60006020828403121561569957600080fd5b61496882614dfd565b6020808252600990820152684248503a452d34303360b81b604082015260600190565b60005b838110156156e05781810151838201526020016156c8565b50506000910152565b600082516153328184602087016156c5565b60006020828403121561570d57600080fd5b815161496881614bcc565b60006020828403121561572a57600080fd5b815161496881614a92565b6000815180845261574d8160208601602086016156c5565b601f01601f19169290920160200192915050565b80518252600060208201516002811061577c5761577c61549e565b80602085015250604082015160018060a01b03808216604086015280606085015116606086015250506080820151608084015260a082015160c060a085015261094160c0850182615735565b60e0815260006157db60e0830187615761565b905061581a602083018680516001600160a01b039081168352602080830151151590840152604080830151909116908301526060908101511515910152565b60a082019390935260c0015292915050565b600060a0820187835260208781850152604060a08186015282885180855260c087019150838a01945060005b8181101561589557855180516001600160a01b03908116855286820151168685015284015115158484015294840194606090920191600101615858565b50506001600160a01b038816606087015293506158b192505050565b8260808301529695505050505050565b600060208083850312156158d457600080fd5b82516001600160401b038111156158ea57600080fd5b8301601f810185136158fb57600080fd5b8051615909614e2d82614d9f565b81815260059190911b8201830190838101908783111561592857600080fd5b928401925b828410156149e95783518252928401929084019061592d565b600060a082018783526020878185015260a0604085015281875180845260c086019150828901935060005b818110156159965784516001600160a01b031683529383019391830191600101615971565b50506001600160a01b03969096166060850152505050608001529392505050565b81516001600160a01b039081168252602080840151821690830152604080840151821690830152606080840151908301526080808401519083015260a0838101519083015260c092830151169181019190915260e00190565b81810381811115612a9057612a906154b4565b8082028115828204841417612a9057612a906154b4565b60058110615a4a57615a4a61549e565b9052565b60006101608201905083825282516020830152602083015160408301526040830151615a7e606084018215159052565b5060608301516001600160a01b03811660808401525060808301516001600160a01b03811660a08401525060a0830151615abd60c084018260020b9052565b5060c0830151615ad260e084018260020b9052565b5060e083015161010083810191909152830151610120615afc818501836001600160a01b03169052565b8401519050615b0f610140840182615a3a565b509392505050565b60008060408385031215615b2a57600080fd5b8251615b3581614a92565b602084015190925060038110615b4a57600080fd5b809150509250929050565b60048110610e9657610e9661549e565b60408101615b7284615b55565b9281526020015290565b600081518084526020808501945080840160005b83811015615bac57815187529582019590820190600101615b90565b509495945050505050565b8051608080845281519084018190526000916020919082019060a0860190845b81811015615bfc5783516001600160a01b031683529284019291840191600101615bd7565b505082850151915085810383870152615c158183615b7c565b9250505060408301518482036040860152615c308282615735565b9150506060830151615b0f606086018215159052565b8481526001600160a01b03848116602083015283166040820152608060608201819052600090615c7890830184615bb7565b9695505050505050565b60008060408385031215615c9557600080fd5b505080516020909101519092909150565b615caf84615b55565b838152606060208201526000615cc86060830185615b7c565b9050826040830152949350505050565b600080600060608486031215615ced57600080fd5b8351925060208401519150604084015190509250925092565b6001600160a01b039889168152968816602088015260408701959095526060860193909352608085019190915260a084015290921660c082015260e08101919091526101000190565b81516001600160a01b0316815261014081016020830151615d7b60208401826001600160a01b03169052565b506040830151615d90604084018260020b9052565b506060830151615da5606084018260020b9052565b506080830151608083015260a083015160a083015260c083015160c083015260e083015160e083015261010080840151615de9828501826001600160a01b03169052565b505061012092830151919092015290565b60008060008060808587031215615e1057600080fd5b8451935060208501516001600160801b0381168114615e2e57600080fd5b6040860151606090960151949790965092505050565b602081526000614968602083018461573556fea26469706673582212205566aa21433338a4127f7a4aeef390467a1f391aabef012dcac325b461cb850b64736f6c63430008110033",
  "deployedBytecode": "0x6080604052600436106101235760003560e01c8063684433fb116100a0578063a0edb48b11610064578063a0edb48b14610367578063a176459514610387578063a93bd512146103a7578063b6a9cb7e146103e6578063f2fde38b1461040657610130565b8063684433fb146102d457806369d09c4c146102f4578063715018a6146103145780638da5cb5b146103295780639bd5c43a1461034757610130565b806345b315cf116100e757806345b315cf14610204578063522f6815146102325780635c975abb14610252578063645290651461027c578063669d09211461029c57610130565b80630846f99e14610138578063150b7a021461015a5780631593dee1146101a45780633bffd3b8146101c45780634025feb2146101e457610130565b366101305734600a819055005b34600a819055005b34801561014457600080fd5b50610158610153366004614ab7565b610426565b005b34801561016657600080fd5b50610186610175366004614ad4565b630a85bd0160e11b95945050505050565b6040516001600160e01b031990911681526020015b60405180910390f35b3480156101b057600080fd5b506101586101bf366004614b72565b6104e1565b3480156101d057600080fd5b506101586101df366004614be5565b6104f9565b3480156101f057600080fd5b506101586101ff366004614b72565b61058b565b34801561021057600080fd5b5061022461021f366004614f74565b61059e565b60405190815260200161019b565b34801561023e57600080fd5b5061015861024d36600461505e565b610949565b34801561025e57600080fd5b50600054600160a01b900460ff16604051901515815260200161019b565b34801561028857600080fd5b50610158610297366004614ab7565b61095f565b3480156102a857600080fd5b506008546102bc906001600160a01b031681565b6040516001600160a01b03909116815260200161019b565b3480156102e057600080fd5b506101586102ef36600461508a565b610a07565b34801561030057600080fd5b506009546102bc906001600160a01b031681565b34801561032057600080fd5b50610158610b9b565b34801561033557600080fd5b506000546001600160a01b03166102bc565b34801561035357600080fd5b50610158610362366004615105565b610baf565b34801561037357600080fd5b5061015861038236600461513a565b610c2b565b34801561039357600080fd5b506007546102bc906001600160a01b031681565b3480156103b357600080fd5b506103c76103c2366004615180565b610c45565b604080516001600160a01b03909316835260208301919091520161019b565b3480156103f257600080fd5b5061015861040136600461519d565b610da2565b34801561041257600080fd5b50610158610421366004614ab7565b610e20565b61042e610e99565b6001600160a01b0381166104975760405162461bcd60e51b815260206004820152602560248201527f496e76616c6964206164647265737320666f7220776562337061636b73206d616044820152643730b3b2b960d91b60648201526084015b60405180910390fd5b600980546001600160a01b0319166001600160a01b0383169081179091556040517f29c3be2a07cd721ad5a371231bdf132e57fbe87625b604811898342f90c9582f90600090a250565b6104e9610e99565b6104f4838383610ef3565b505050565b6008546001600160a01b031633146105235760405162461bcd60e51b815260040161048e906151e8565b60008061054661053836889003880188615246565b610541876152f9565b610fee565b9150915082610583576105696105626080880160608901614ab7565b85846110fa565b61058361057c60a0880160808901614ab7565b85836110fa565b505050505050565b610593610e99565b6104f48383836111fa565b6008546000906001600160a01b031633146105cb5760405162461bcd60e51b815260040161048e906151e8565b60005b848110156107485760008686838181106105ea576105ea615305565b90506020028101906105fc919061531b565b610605906153ab565b90506106148160200151611347565b6003816101600151600481111561062d5761062d61549e565b0361064f5761064f8160400151826060015183602001518461010001516113d4565b600281610160015160048111156106685761066861549e565b03610690576106908160400151826060015183602001518461014001518561012001516116b5565b600481610160015160048111156106a9576106a961549e565b036106cb576106cb8160400151826060015183602001518461014001516119df565b600081610160015160048111156106e4576106e461549e565b0361070057610700816040015182606001518360200151611cb0565b600181610160015160048111156107195761071961549e565b0361073557610735816040015182606001518360200151611f66565b5080610740816154ca565b9150506105ce565b5060005b83518110156108ba57600084828151811061076957610769615305565b602002602001015190506107808160800151611347565b60038160a0015160048111156107985761079861549e565b036107bc57805151602082015151608083015160608401516107bc939291906113d4565b60028160a0015160048111156107d4576107d461549e565b036107ff57805151602082015151608083015160e08401516101008501516107ff94939291906116b5565b60048160a0015160048111156108175761081761549e565b0361083b57805151602082015151608083015160e084015161083b939291906119df565b60008160a0015160048111156108535761085361549e565b03610871578051516020820151516080830151610871929190611cb0565b60018160a0015160048111156108895761088961549e565b036108a75780515160208201515160808301516108a7929190611f66565b50806108b2816154ca565b91505061074c565b506007546040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa158015610903573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061092791906154e3565b600754909150610941906001600160a01b031683836110fa565b949350505050565b610951610e99565b61095b8282612214565b5050565b610967610e99565b6001600160a01b0381166109bd5760405162461bcd60e51b815260206004820152601d60248201527f496e76616c6964206164647265737320666f7220776562337061636b73000000604482015260640161048e565b600880546001600160a01b0319166001600160a01b0383169081179091556040517f68ca72fc2a01b105d181de42d44a6c7a3c1061d13fa12f95feb7bc55ffd6d07590600090a250565b6008546001600160a01b03163314610a315760405162461bcd60e51b815260040161048e906151e8565b6000805b83811015610ab557630ae8aa8960e31b858583818110610a5757610a57615305565b90506101c00201606001351480610a905750630ae8aa8960e31b858583818110610a8357610a83615305565b90506101c0020160800135145b15610aa35781610a9f816154ca565b9250505b80610aad816154ca565b915050610a35565b506007546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa158015610aff573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b2391906154e3565b9050600060018311610b36576000610b40565b610b4083836154fc565b905060005b85811015610b9257610b80878783818110610b6257610b62615305565b90506101c00201803603810190610b79919061551e565b868461229a565b80610b8a816154ca565b915050610b45565b50505050505050565b610ba3610e99565b610bad60006125ab565b565b6008546001600160a01b03163314610bd95760405162461bcd60e51b815260040161048e906151e8565b60005b818110156104f457610c19838383818110610bf957610bf9615305565b9050602002810190610c0b91906155f3565b610c1490615609565b6125fb565b80610c23816154ca565b915050610bdc565b610c33610e99565b610c3f848484846126dc565b50505050565b6000806003610c5c61014085016101208601615687565b6004811115610c6d57610c6d61549e565b03610c9257610c89610c8436859003850185615246565b612847565b91509150915091565b6002610ca661014085016101208601615687565b6004811115610cb757610cb761549e565b03610cd357610c89610cce36859003850185615246565b6128cf565b6004610ce761014085016101208601615687565b6004811115610cf857610cf861549e565b03610d1457610c89610d0f36859003850185615246565b6128f4565b6000610d2861014085016101208601615687565b6004811115610d3957610d3961549e565b03610d5557610c89610d5036859003850185615246565b61290f565b6001610d6961014085016101208601615687565b6004811115610d7a57610d7a61549e565b03610d9d57610c89610d9136859003850185615246565b61010081015190519091565b915091565b6008546001600160a01b03163314610dcc5760405162461bcd60e51b815260040161048e906151e8565b60005b82811015610c3f57610e0d848483818110610dec57610dec615305565b9050602002810190610dfe919061531b565b610e07906153ab565b8361292a565b5080610e18816154ca565b915050610dcf565b610e28610e99565b6001600160a01b038116610e8d5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161048e565b610e96816125ab565b50565b6000546001600160a01b03163314610bad5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161048e565b6001600160a01b038316610f195760405162461bcd60e51b815260040161048e906156a2565b6040516370a0823160e01b815230600482015281906001600160a01b038416906370a0823190602401602060405180830381865afa158015610f5f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f8391906154e3565b106104f457610f9c6001600160a01b0383168483612a96565b816001600160a01b0316836001600160a01b03167f6c9d637297625e945b296ff73a71fcfbd0a9e062652b6491a921c4c60194176b83604051610fe191815260200190565b60405180910390a3505050565b600080610fff846101000151611347565b600384610120015160048111156110185761101861549e565b0361102d576110278484612ae8565b90925090505b600284610120015160048111156110465761104661549e565b0361105b576110558484612d4a565b90925090505b600484610120015160048111156110745761107461549e565b03611089576110838484612e4c565b90925090505b600084610120015160048111156110a2576110a261549e565b036110b7576110b18484612ef9565b90925090505b600184610120015160048111156110d0576110d061549e565b036110f3576110df8484612f16565b90925090506110ed84612fb4565b90925090505b9250929050565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663a9059cbb60e01b179052915160009283929087169161115691906156e9565b6000604051808303816000865af19150503d8060008114611193576040519150601f19603f3d011682016040523d82523d6000602084013e611198565b606091505b50915091508180156111c25750805115806111c25750808060200190518101906111c291906156fb565b6111f35760405162461bcd60e51b815260206004820152600260248201526114d560f21b604482015260640161048e565b5050505050565b6001600160a01b0383166112205760405162461bcd60e51b815260040161048e906156a2565b6040516331a9108f60e11b81526004810182905230906001600160a01b03841690636352211e90602401602060405180830381865afa158015611267573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061128b9190615718565b6001600160a01b0316036104f4576040516323b872dd60e01b81523060048201526001600160a01b038481166024830152604482018390528316906323b872dd90606401600060405180830381600087803b1580156112e957600080fd5b505af11580156112fd573d6000803e3d6000fd5b5050505080826001600160a01b0316846001600160a01b03167ffefe036cac4ee3a4aca074a81cbcc4376e1484693289078dbec149c890101d5b60405160405180910390a4505050565b600954604051636f2ddb5f60e01b81526001600160a01b03838116600483015290911690636f2ddb5f906024016020604051808303816000875af1158015611393573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113b791906156fb565b610e96576040516311970e2d60e31b815260040160405180910390fd5b6002546000906001600160a01b03868116911614611543576040516370a0823160e01b81523060048201526001600160a01b038616906370a0823190602401602060405180830381865afa158015611430573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061145491906154e3565b905061146185848361307b565b8015611543576040805160c081018252838152600060208083018290526001600160a01b0389811684860152600254811660608086019190915260808086018890528651808501885285815260a0870152865190810187523080825293810185905280870193909352820183905293516352bbbe2960e01b815292939092908716916352bbbe29916114fc91869186919042906004016157c8565b6020604051808303816000875af115801561151b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061153f91906154e3565b5050505b6002546001600160a01b038581169116146111f3576040516370a0823160e01b81523060048201526001600160a01b038516906370a0823190602401602060405180830381865afa15801561159c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115c091906154e3565b90506115cd84848361307b565b80156111f3576040805160c081018252838152600060208083018290526001600160a01b0388811684860152600254811660608086019190915260808086018890528651808501885285815260a0870152865190810187523080825293810185905280870193909352820183905293516352bbbe2960e01b815292939092908716916352bbbe299161166891869186919042906004016157c8565b6020604051808303816000875af1158015611687573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116ab91906154e3565b5050505050505050565b60008083516001600160401b038111156116d1576116d1614ca5565b60405190808252806020026020018201604052801561171c57816020015b60408051606081018252600080825260208083018290529282015282526000199092019101816116ef5790505b50905060005b84518110156117c457604051806060016040528086838151811061174857611748615305565b6020026020010151600001516001600160a01b0316815260200186838151811061177457611774615305565b6020026020010151602001516001600160a01b031681526020018515158152508282815181106117a6576117a6615305565b602002602001018190525080806117bc906154ca565b915050611722565b506005546001600160a01b038881169116146118d3576040516370a0823160e01b81523060048201526001600160a01b038816906370a0823190602401602060405180830381865afa15801561181e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061184291906154e3565b915081156118d35761185587868461307b565b604051631e82ecdb60e31b81526001600160a01b0386169063f41766d89061188a90859060009086903090429060040161582c565b6000604051808303816000875af11580156118a9573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526118d191908101906158c1565b505b6005546001600160a01b03878116911614610b92576040516370a0823160e01b81523060048201526001600160a01b038716906370a0823190602401602060405180830381865afa15801561192c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061195091906154e3565b91508115610b925761196386868461307b565b604051631e82ecdb60e31b81526001600160a01b0386169063f41766d89061199890859060009086903090429060040161582c565b6000604051808303816000875af11580156119b7573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526116ab91908101906158c1565b6040805160018082528183019092526000918291906020808301908036833701905050905082600081518110611a1757611a17615305565b60200260200101516000015181600081518110611a3657611a36615305565b60200260200101906001600160a01b031690816001600160a01b03168152505082600081518110611a6957611a69615305565b60200260200101516000015181600181518110611a8857611a88615305565b6001600160a01b039283166020918202929092010152600654878216911614611ba4576040516370a0823160e01b81523060048201526001600160a01b038716906370a0823190602401602060405180830381865afa158015611aef573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b1391906154e3565b91508115611ba457611b2686858461307b565b6040516338ed173960e01b81526001600160a01b038516906338ed173990611b5b908590600090869030904290600401615946565b6000604051808303816000875af1158015611b7a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611ba291908101906158c1565b505b6006546001600160a01b03868116911614610583576040516370a0823160e01b81523060048201526001600160a01b038616906370a0823190602401602060405180830381865afa158015611bfd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c2191906154e3565b9150811561058357611c3485858461307b565b6040516338ed173960e01b81526001600160a01b038516906338ed173990611c69908590600090869030904290600401615946565b6000604051808303816000875af1158015611c88573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610b9291908101906158c1565b6003546000906060906001600160a01b03868116911614611e0b576040516370a0823160e01b81523060048201526001600160a01b038616906370a0823190602401602060405180830381865afa158015611d0f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d3391906154e3565b91508481600081518110611d4957611d49615305565b6001600160a01b039283166020918202929092010152600354825191169082906001908110611d7a57611d7a615305565b6001600160a01b03909216602092830291909101909101528115611e0b57611da385848461307b565b60405163791ac94760e01b81526001600160a01b0384169063791ac94790611dd8908590600090869030904290600401615946565b600060405180830381600087803b158015611df257600080fd5b505af1158015611e06573d6000803e3d6000fd5b505050505b6003546001600160a01b038581169116146111f3576040516370a0823160e01b81523060048201526001600160a01b038516906370a0823190602401602060405180830381865afa158015611e64573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e8891906154e3565b91508381600081518110611e9e57611e9e615305565b6001600160a01b039283166020918202929092010152600354825191169082906001908110611ecf57611ecf615305565b6001600160a01b039092166020928302919091019091015281156111f357611ef884848461307b565b60405163791ac94760e01b81526001600160a01b0384169063791ac94790611f2d908590600090869030904290600401615946565b600060405180830381600087803b158015611f4757600080fd5b505af1158015611f5b573d6000803e3d6000fd5b505050505050505050565b6040805160e081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c081018290526004546001600160a01b038681169116146120da576040516370a0823160e01b81523060048201526001600160a01b038616906370a0823190602401602060405180830381865afa158015611ff7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061201b91906154e3565b915081156120da5761202e85848461307b565b506040805160e0810182526001600160a01b0380871682526004805482166020840152308385015242606084015260808301859052600060a0840181905260c0840152925163178ca23160e31b815291929085169163bc65118891612095918591016159b7565b6020604051808303816000875af11580156120b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120d891906154e3565b505b6004546001600160a01b038581169116146111f3576040516370a0823160e01b81523060048201526001600160a01b038516906370a0823190602401602060405180830381865afa158015612133573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061215791906154e3565b915081156111f35761216a84848461307b565b506040805160e0810182526001600160a01b0380861682526004805482166020840152308385015242606084015260808301859052600060a0840181905260c0840152925163178ca23160e31b815291929085169163bc651188916121d1918591016159b7565b6020604051808303816000875af11580156121f0573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061058391906154e3565b6001600160a01b03821661223a5760405162461bcd60e51b815260040161048e906156a2565b80471061095b576122546001600160a01b03831682613174565b816001600160a01b03167eddb683bb45cd5d0ad8a200c6fae7152b1c236ee90a4a37db692407f5cc38bd8260405161228e91815260200190565b60405180910390a25050565b82516122a590611347565b6000806000806000806122b8898861328d565b9150915060006127108a61010001516127106122d49190615a10565b6122de9085615a23565b6122e891906154fc565b905060006127108b61010001516127106123029190615a10565b61230c9085615a23565b61231691906154fc565b905061232b8b602001518c600001518661307b565b61233e8b604001518c600001518561307b565b60038b6101a0015160048111156123575761235761549e565b0361237c576123678b8585613530565b929a509098509650945061237c8a89896137f3565b60028b6101a0015160048111156123955761239561549e565b036123bd576123a78b858585856138e8565b929a50909850965094506123bd8a8960006137f3565b60048b6101a0015160048111156123d6576123d661549e565b036123fe576123e88b858585856139e7565b929a50909850965094506123fe8a8960006137f3565b60008b6101a0015160048111156124175761241761549e565b0361243f576124298b85858585613a98565b929a509098509650945061243f8a8960006137f3565b60018b6101a0015160048111156124585761245861549e565b036124825761246a8b85858585613b49565b8e51939b5091995097509550612482908b908a613c5d565b60006040518061014001604052808a81526020018981526020018d6101600151151581526020018d602001516001600160a01b031681526020018d604001516001600160a01b031681526020018d610120015160020b81526020018d610140015160020b81526020018d610180015181526020018d600001516001600160a01b031681526020018d6101a0015160048111156125205761252061549e565b905260095460405163759a46d760e11b81529192506001600160a01b03169063eb348dae90612555908e908590600401615a4e565b600060405180830381600087803b15801561256f57600080fd5b505af1158015612583573d6000803e3d6000fd5b5050505061259d8c6020015188878f604001518a89613d09565b505050505050505050505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6126088160200151611347565b8060400151600a54101561265e5760405162461bcd60e51b815260206004820152601f60248201527f496e76616c696420616d6f756e7420666f7220436f6e747261637443616c6c00604482015260640161048e565b60008082602001516001600160a01b03168360400151846000015160405161268691906156e9565b60006040518083038185875af1925050503d80600081146126c3576040519150601f19603f3d011682016040523d82523d6000602084013e6126c8565b606091505b5091509150816104f4578051602082018181fd5b6001600160a01b0384166127025760405162461bcd60e51b815260040161048e906156a2565b604051627eeac760e11b81523060048201526024810183905281906001600160a01b0385169062fdd58e90604401602060405180830381865afa15801561274d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061277191906154e3565b10610c3f57604051637921219560e11b81523060048201526001600160a01b038581166024830152604482018490526064820183905260a06084830152600060a483015284169063f242432a9060c401600060405180830381600087803b1580156127db57600080fd5b505af11580156127ef573d6000803e3d6000fd5b5050505081836001600160a01b0316856001600160a01b03167f620337bf89eea2b9ae2657beead83b5fa620452817118348aff96e201d52598b8460405161283991815260200190565b60405180910390a450505050565b60008060008361010001516001600160a01b031663f6c009278560e001516040518263ffffffff1660e01b815260040161288391815260200190565b6040805180830381865afa15801561289f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128c39190615b17565b50946000945092505050565b6000806128ea83610100015184606001518560800151613d4d565b9360009350915050565b6000806128ea83610100015184606001518560800151613dca565b6000806128ea83610100015184606001518560800151613e55565b60006129398360200151611347565b61295083604001518460200151856080015161307b565b600383610160015160048111156129695761296961549e565b0361297a5761297783613e61565b90505b600283610160015160048111156129935761299361549e565b036129a4576129a183613f62565b90505b600483610160015160048111156129bd576129bd61549e565b036129ce576129cb83613f62565b90505b600083610160015160048111156129e7576129e761549e565b036129f8576129f583613f62565b90505b60018361016001516004811115612a1157612a1161549e565b03612a2257612a1f8361402b565b90505b60e0830151612a3f57612a3a828460600151836137f3565b612a90565b60408051808201825260608501516001600160a01b039081168252602080830185815260e08801516000908152600b909252939020915182546001600160a01b031916911617815590516001909101555b92915050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b1790526104f49084906140bf565b60008060008461010001516001600160a01b031663f6c009278660e001516040518263ffffffff1660e01b8152600401612b2491815260200190565b6040805180830381865afa158015612b40573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b649190615b17565b509050600080612b9487606001518860800151858960000151602001518a60200151602001518c60400151614191565b91509150612bac83886101000151896020015161307b565b600060018860200151604051602001612bc6929190615b65565b60408051601f1981840301815260808301825285835260208301859052828201819052600060608401526101008b015160e08c01519251638bdb391360e01b81529194506001600160a01b031691638bdb391391612c2d9190309081908790600401615c46565b600060405180830381600087803b158015612c4757600080fd5b505af1158015612c5b573d6000803e3d6000fd5b50505060608a01516040516370a0823160e01b81523060048201526001600160a01b0390911691506370a0823190602401602060405180830381865afa158015612ca9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ccd91906154e3565b60808a01516040516370a0823160e01b81523060048201529198506001600160a01b0316906370a0823190602401602060405180830381865afa158015612d18573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d3c91906154e3565b955050505050509250929050565b6000806000612d6785610100015186606001518760800151613d4d565b9050612d7d81866101000151876020015161307b565b610100850151606086015160808701516040808901516020808b01518a518201518b83015190920151935163037b79b160e21b81526001600160a01b039687166004820152948616602486015291151560448501526064840191909152608483015260a48201523060c48201524260e4820152911690630dede6c490610104015b60408051808303816000875af1158015612e1c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e409190615c82565b90969095509350505050565b6000806000612e6985610100015186606001518760800151613dca565b9050612e7f81866101000151876020015161307b565b6101008501516060860151608087015160208089015188518201518983015190920151604051635d5155ef60e11b81526001600160a01b03958616600482015293851660248501526044840191909152606483019190915260848201523060a48201524260c482015291169063baa2abde9060e401612dfe565b6000806000612e6985610100015186606001518760800151613e55565b6040805160a081018252835181526020808501516001600160801b03908116828401908152855183015184860190815286840151909301516060850190815242608086019081526101008901519651630624e65f60e11b8152865160048201529251909316602483015292516044820152915160648301525160848201526000928392916001600160a01b0390911690630c49ccbe9060a401612dfe565b604080516080810182528251815230602082019081526001600160801b0382840181815260608401828152610100870151955163fc6f786560e01b81528551600482015293516001600160a01b03908116602486015291518316604485015251909116606483015260009384939291169063fc6f78659060840160408051808303816000875af115801561304c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130709190615c82565b909590945092505050565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663095ea7b360e01b17905291516000928392908716916130d791906156e9565b6000604051808303816000865af19150503d8060008114613114576040519150601f19603f3d011682016040523d82523d6000602084013e613119565b606091505b509150915081801561314357508051158061314357508080602001905181019061314391906156fb565b6111f35760405162461bcd60e51b8152602060048201526002602482015261534160f01b604482015260640161048e565b804710156131c45760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e6365000000604482015260640161048e565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114613211576040519150601f19603f3d011682016040523d82523d6000602084013e613216565b606091505b50509050806104f45760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d61792068617665207265766572746564000000000000606482015260840161048e565b6007546040516370a0823160e01b8152306004820152600091829182916001600160a01b0316906370a0823190602401602060405180830381865afa1580156132da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132fe91906154e3565b606086015190915061333457602085015160405163bf6ada5160e01b81526001600160a01b03909116600482015260240161048e565b630ae8aa8960e31b8560600151146133c55760608501516000908152600b6020908152604090912054908601516001600160a01b0390811691161461338c5760405163d0e96f5b60e01b815260040160405180910390fd5b6060850180516000908152600b60205260408082206001908101549351835290822080546001600160a01b0319168155015592506133d8565b600084116133d357806133d5565b835b92505b608085015161340b57604080860151905163bf6ada5160e01b81526001600160a01b03909116600482015260240161048e565b630ae8aa8960e31b85608001511461349b5760808501516000908152600b60205260409081902054908601516001600160a01b039081169116146134625760405163d0e96f5b60e01b815260040160405180910390fd5b6080850180516000908152600b60205260408082206001908101549351835290822080546001600160a01b0319168155015591506134ae565b600084116134a957806134ab565b835b91505b630ae8aa8960e31b85606001511415806134c6575083155b156134eb576127108560a00151846134de9190615a23565b6134e891906154fc565b92505b630ae8aa8960e31b8560800151141580613503575083155b15613528576127108560c001518361351b9190615a23565b61352591906154fc565b91505b509250929050565b600080600080600087600001516001600160a01b031663f6c009278961018001516040518263ffffffff1660e01b815260040161356f91815260200190565b6040805180830381865afa15801561358b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135af9190615b17565b5090506000806135d08a602001518b60400151858c8c8f6101600151614191565b9150915060006001828c60e001516040516020016135f093929190615ca6565b60408051601f1981840301815260808301825285835260208301859052828201819052600060608401528d516101808f0151925163172b958560e31b81529194506001600160a01b03169163b95cac28916136549190309081908790600401615c46565b600060405180830381600087803b15801561366e57600080fd5b505af1158015613682573d6000803e3d6000fd5b50506040516370a0823160e01b81523060048201526001600160a01b0388169b508b92506370a082319150602401602060405180830381865afa1580156136cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136f191906154e3565b60208d01516040516370a0823160e01b81523060048201529199506001600160a01b0316906370a0823190602401602060405180830381865afa15801561373c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061376091906154e3565b61376a908c615a10565b6040808e015190516370a0823160e01b81523060048201529198506001600160a01b0316906370a0823190602401602060405180830381865afa1580156137b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137d991906154e3565b6137e3908b615a10565b9550505050505093509350935093565b80600003613866576040516370a0823160e01b81523060048201526001600160a01b038316906370a0823190602401602060405180830381865afa15801561383f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061386391906154e3565b90505b60085461387e9083906001600160a01b0316836110fa565b600854604051639261968560e01b8152600481018590526001600160a01b03848116602483015260448201849052909116906392619685906064015b600060405180830381600087803b1580156138d457600080fd5b505af1158015610b92573d6000803e3d6000fd5b845160208601516040808801516101608901519151635a47ddc360e01b81526001600160a01b03938416600482015290831660248201529015156044820152606481018790526084810186905260a4810185905260c481018490523060e4820152426101048201526000928392839283929190911690635a47ddc390610124016060604051808303816000875af1158015613987573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139ab9190615cd8565b8b5160208d015160408e01519297509395509193506000926139cd9291613d4d565b6001600160a01b03169a9399509197509550909350505050565b60008060008088600001516001600160a01b031663e8e337008a602001518b604001518b8b8b8b30426040518963ffffffff1660e01b8152600401613a33989796959493929190615d06565b6060604051808303816000875af1158015613a52573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a769190615cd8565b8b5160208d015160408e01519297509395509193506000926139cd9291613dca565b60008060008088600001516001600160a01b031663e8e337008a602001518b604001518b8b8b8b30426040518963ffffffff1660e01b8152600401613ae4989796959493929190615d06565b6060604051808303816000875af1158015613b03573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b279190615cd8565b8b5160208d015160408e01519297509395509193506000926139cd9291613e55565b60008060008060006040518061014001604052808b602001516001600160a01b031681526020018b604001516001600160a01b031681526020018b610120015160020b81526020018b610140015160020b81526020018a8152602001898152602001888152602001878152602001306001600160a01b0316815260200142815250905089600001516001600160a01b0316639cc1a283826040518263ffffffff1660e01b8152600401613bfc9190615d4f565b6080604051808303816000875af1158015613c1b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c3f9190615dfa565b929d6001600160801b039092169c509a509098509650505050505050565b600854604051632142170760e11b81523060048201526001600160a01b03918216602482015260448101839052908316906342842e0e90606401600060405180830381600087803b158015613cb157600080fd5b505af1158015613cc5573d6000803e3d6000fd5b5050600854604051636069c4af60e11b8152600481018790526001600160a01b03868116602483015260448201869052909116925063c0d3895e91506064016138ba565b83851015613d2d576000613d1d8686615a10565b9050613d2b87335b836110fa565b505b80821015610583576000613d418383615a10565b9050610b928433613d25565b60405163147585a560e11b81526001600160a01b038381166004830152828116602483015260006044830181905291908516906328eb0b4a90606401602060405180830381865afa158015613da6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109419190615718565b600080613dd68561489c565b60405163e6a4390560e01b81526001600160a01b03868116600483015285811660248301529192509082169063e6a4390590604401602060405180830381865afa158015613e28573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613e4c9190615718565b95945050505050565b600080613dd685614900565b6000806040518060c00160405280846101000151815260200160006001811115613e8d57613e8d61549e565b81526040808601516001600160a01b039081166020808501919091526060808901518316848601526080808a015182870152845180840186526000808252968201528451908101855230808252818401879052818601529081019490945287015160a088015192516352bbbe2960e01b815294955092939216916352bbbe2991613f1f918691869142906004016157c8565b6020604051808303816000875af1158015613f3e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061094191906154e3565b600080600083602001516001600160a01b03168460c001518560000151604051613f8c91906156e9565b60006040518083038185875af1925050503d8060008114613fc9576040519150601f19603f3d011682016040523d82523d6000602084013e613fce565b606091505b509150915081613fe2578051602082018181fd5b600081806020019051810190613ff891906158c1565b905080600182516140099190615a10565b8151811061401957614019615305565b60200260200101519350505050919050565b600080600083602001516001600160a01b03168460c00151856000015160405161405591906156e9565b60006040518083038185875af1925050503d8060008114614092576040519150601f19603f3d011682016040523d82523d6000602084013e614097565b606091505b5091509150816140ab578051602082018181fd5b8080602001905181019061094191906154e3565b6000614114826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661496f9092919063ffffffff16565b8051909150156104f4578080602001905181019061413291906156fb565b6104f45760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161048e565b60608082156146f257604080516003808252608082019092529060208201606080368337505060408051600380825260808201909252929450905060208201606080368337019050509050866001600160a01b0316886001600160a01b0316111580156142105750856001600160a01b0316886001600160a01b031611155b156143cd57878260008151811061422957614229615305565b60200260200101906001600160a01b031690816001600160a01b031681525050848160008151811061425d5761425d615305565b602002602001018181525050856001600160a01b0316876001600160a01b03161161433057868260018151811061429657614296615305565b60200260200101906001600160a01b031690816001600160a01b03168152505085826002815181106142ca576142ca615305565b60200260200101906001600160a01b031690816001600160a01b03168152505083816001815181106142fe576142fe615305565b60200260200101818152505060008160028151811061431f5761431f615305565b602002602001018181525050614891565b858260018151811061434457614344615305565b60200260200101906001600160a01b031690816001600160a01b031681525050868260028151811061437857614378615305565b60200260200101906001600160a01b031690816001600160a01b0316815250506000816001815181106143ad576143ad615305565b602002602001018181525050838160028151811061431f5761431f615305565b876001600160a01b0316876001600160a01b0316111580156144015750856001600160a01b0316876001600160a01b031611155b1561458c57868260008151811061441a5761441a615305565b60200260200101906001600160a01b031690816001600160a01b031681525050838160008151811061444e5761444e615305565b602002602001018181525050856001600160a01b0316886001600160a01b0316116144ef57878260018151811061448757614487615305565b60200260200101906001600160a01b031690816001600160a01b03168152505085826002815181106144bb576144bb615305565b60200260200101906001600160a01b031690816001600160a01b03168152505084816001815181106142fe576142fe615305565b858260018151811061450357614503615305565b60200260200101906001600160a01b031690816001600160a01b031681525050878260028151811061453757614537615305565b60200260200101906001600160a01b031690816001600160a01b03168152505060008160018151811061456c5761456c615305565b602002602001018181525050848160028151811061431f5761431f615305565b85826000815181106145a0576145a0615305565b60200260200101906001600160a01b031690816001600160a01b0316815250506000816000815181106145d5576145d5615305565b602002602001018181525050866001600160a01b0316886001600160a01b03161161467657878260018151811061460e5761460e615305565b60200260200101906001600160a01b031690816001600160a01b031681525050868260028151811061464257614642615305565b60200260200101906001600160a01b031690816001600160a01b03168152505084816001815181106143ad576143ad615305565b868260018151811061468a5761468a615305565b60200260200101906001600160a01b031690816001600160a01b03168152505087826002815181106146be576146be615305565b60200260200101906001600160a01b031690816001600160a01b031681525050838160018151811061456c5761456c615305565b60408051600280825260608201835290916020830190803683375050604080516002808252606082018352939550929150602083019080368337019050509050866001600160a01b0316886001600160a01b031610156147e857878260008151811061476057614760615305565b60200260200101906001600160a01b031690816001600160a01b031681525050868260018151811061479457614794615305565b60200260200101906001600160a01b031690816001600160a01b03168152505084816000815181106147c8576147c8615305565b602002602001018181525050838160018151811061431f5761431f615305565b86826000815181106147fc576147fc615305565b60200260200101906001600160a01b031690816001600160a01b031681525050878260018151811061483057614830615305565b60200260200101906001600160a01b031690816001600160a01b031681525050838160008151811061486457614864615305565b602002602001018181525050848160018151811061488457614884615305565b6020026020010181815250505b965096945050505050565b6000816001600160a01b031663c45a01556040518163ffffffff1660e01b8152600401602060405180830381865afa1580156148dc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a909190615718565b600080829050806001600160a01b031663c45a01556040518163ffffffff1660e01b8152600401602060405180830381865afa158015614944573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906149689190615718565b9392505050565b6060610941848460008585600080866001600160a01b0316858760405161499691906156e9565b60006040518083038185875af1925050503d80600081146149d3576040519150601f19603f3d011682016040523d82523d6000602084013e6149d8565b606091505b50915091506149e9878383876149f4565b979650505050505050565b60608315614a63578251600003614a5c576001600160a01b0385163b614a5c5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161048e565b5081610941565b6109418383815115614a785781518083602001fd5b8060405162461bcd60e51b815260040161048e9190615e44565b6001600160a01b0381168114610e9657600080fd5b8035614ab281614a92565b919050565b600060208284031215614ac957600080fd5b813561496881614a92565b600080600080600060808688031215614aec57600080fd5b8535614af781614a92565b94506020860135614b0781614a92565b93506040860135925060608601356001600160401b0380821115614b2a57600080fd5b818801915088601f830112614b3e57600080fd5b813581811115614b4d57600080fd5b896020828501011115614b5f57600080fd5b9699959850939650602001949392505050565b600080600060608486031215614b8757600080fd5b8335614b9281614a92565b92506020840135614ba281614a92565b929592945050506040919091013590565b60006101408284031215614bc657600080fd5b50919050565b8015158114610e9657600080fd5b8035614ab281614bcc565b6000806000806101a08587031215614bfc57600080fd5b614c068686614bb3565b93506101408501356001600160401b03811115614c2257600080fd5b8501610160818803811315614c3657600080fd5b909350850135614c4581614a92565b9150610180850135614c5681614bcc565b939692955090935050565b60008083601f840112614c7357600080fd5b5081356001600160401b03811115614c8a57600080fd5b6020830191508360208260051b85010111156110f357600080fd5b634e487b7160e01b600052604160045260246000fd5b604080519081016001600160401b0381118282101715614cdd57614cdd614ca5565b60405290565b60405161012081016001600160401b0381118282101715614cdd57614cdd614ca5565b60405161014081016001600160401b0381118282101715614cdd57614cdd614ca5565b60405161018081016001600160401b0381118282101715614cdd57614cdd614ca5565b6040516101c081016001600160401b0381118282101715614cdd57614cdd614ca5565b604051601f8201601f191681016001600160401b0381118282101715614d9757614d97614ca5565b604052919050565b60006001600160401b03821115614db857614db8614ca5565b5060051b60200190565b600060408284031215614dd457600080fd5b614ddc614cbb565b90508135614de981614a92565b808252506020820135602082015292915050565b803560058110614ab257600080fd5b600082601f830112614e1d57600080fd5b81356020614e32614e2d83614d9f565b614d6f565b82815260069290921b84018101918181019086841115614e5157600080fd5b8286015b84811015614ea25760408189031215614e6e5760008081fd5b614e76614cbb565b8135614e8181614a92565b815281850135614e9081614a92565b81860152835291830191604001614e55565b509695505050505050565b60006101608284031215614ec057600080fd5b614ec8614ce3565b9050614ed48383614dc2565b8152614ee38360408401614dc2565b60208201526080820135604082015260a08201356060820152614f0860c08301614aa7565b6080820152614f1960e08301614dfd565b60a0820152610100614f2c818401614bda565b60c08301526101208301356001600160401b03811115614f4b57600080fd5b614f5785828601614e0c565b60e084015250614f6a6101408401614bda565b9082015292915050565b60008060008060608587031215614f8a57600080fd5b84356001600160401b0380821115614fa157600080fd5b614fad88838901614c61565b9096509450602091508682013581811115614fc757600080fd5b8701601f81018913614fd857600080fd5b8035614fe6614e2d82614d9f565b81815260059190911b8201840190848101908b83111561500557600080fd5b8584015b8381101561503d578035868111156150215760008081fd5b61502f8e8983890101614ead565b845250918601918601615009565b5080975050505050505061505360408601614aa7565b905092959194509250565b6000806040838503121561507157600080fd5b823561507c81614a92565b946020939093013593505050565b60008060006040848603121561509f57600080fd5b83356001600160401b03808211156150b657600080fd5b818601915086601f8301126150ca57600080fd5b8135818111156150d957600080fd5b8760206101c0830285010111156150ef57600080fd5b6020928301989097509590910135949350505050565b6000806020838503121561511857600080fd5b82356001600160401b0381111561512e57600080fd5b612e4085828601614c61565b6000806000806080858703121561515057600080fd5b843561515b81614a92565b9350602085013561516b81614a92565b93969395505050506040820135916060013590565b6000610140828403121561519357600080fd5b6149688383614bb3565b6000806000604084860312156151b257600080fd5b83356001600160401b038111156151c857600080fd5b6151d486828701614c61565b909790965060209590950135949350505050565b6020808252602c908201527f576562335061636b7345786368616e67654d616e61676572202d20496e76616c60408201526b696420576562335061636b7360a01b606082015260800190565b8035600281900b8114614ab257600080fd5b6000610140828403121561525957600080fd5b615261614d06565b823581526020830135602082015261527b60408401614bda565b604082015261528c60608401614aa7565b606082015261529d60808401614aa7565b60808201526152ae60a08401615234565b60a08201526152bf60c08401615234565b60c082015260e083013560e08201526101006152dc818501614aa7565b908201526101206152ee848201614dfd565b908201529392505050565b6000612a903683614ead565b634e487b7160e01b600052603260045260246000fd5b6000823561017e1983360301811261533257600080fd5b9190910192915050565b600082601f83011261534d57600080fd5b81356001600160401b0381111561536657615366614ca5565b615379601f8201601f1916602001614d6f565b81815284602083860101111561538e57600080fd5b816020850160208301376000918101602001919091529392505050565b600061018082360312156153be57600080fd5b6153c6614d29565b82356001600160401b03808211156153dd57600080fd5b6153e93683870161533c565b83526153f760208601614aa7565b602084015261540860408601614aa7565b604084015261541960608601614aa7565b60608401526080850135608084015260a085013560a084015260c085013560c084015260e085013560e0840152610100915081850135828401526101209150615463828601614bda565b828401526101409150818501358181111561547d57600080fd5b61548936828801614e0c565b83850152505050610160614f6a818501614dfd565b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600182016154dc576154dc6154b4565b5060010190565b6000602082840312156154f557600080fd5b5051919050565b60008261551957634e487b7160e01b600052601260045260246000fd5b500490565b60006101c0828403121561553157600080fd5b615539614d4c565b61554283614aa7565b815261555060208401614aa7565b602082015261556160408401614aa7565b6040820152606083013560608201526080830135608082015260a083013560a082015260c083013560c082015260e083013560e08201526101008084013581830152506101206155b2818501615234565b908201526101406155c4848201615234565b908201526101606155d6848201614bda565b9082015261018083810135908201526101a06152ee818501614dfd565b60008235605e1983360301811261533257600080fd5b60006060823603121561561b57600080fd5b604051606081016001600160401b03828210818311171561563e5761563e614ca5565b81604052843591508082111561565357600080fd5b506156603682860161533c565b825250602083013561567181614a92565b6020820152604092830135928101929092525090565b60006020828403121561569957600080fd5b61496882614dfd565b6020808252600990820152684248503a452d34303360b81b604082015260600190565b60005b838110156156e05781810151838201526020016156c8565b50506000910152565b600082516153328184602087016156c5565b60006020828403121561570d57600080fd5b815161496881614bcc565b60006020828403121561572a57600080fd5b815161496881614a92565b6000815180845261574d8160208601602086016156c5565b601f01601f19169290920160200192915050565b80518252600060208201516002811061577c5761577c61549e565b80602085015250604082015160018060a01b03808216604086015280606085015116606086015250506080820151608084015260a082015160c060a085015261094160c0850182615735565b60e0815260006157db60e0830187615761565b905061581a602083018680516001600160a01b039081168352602080830151151590840152604080830151909116908301526060908101511515910152565b60a082019390935260c0015292915050565b600060a0820187835260208781850152604060a08186015282885180855260c087019150838a01945060005b8181101561589557855180516001600160a01b03908116855286820151168685015284015115158484015294840194606090920191600101615858565b50506001600160a01b038816606087015293506158b192505050565b8260808301529695505050505050565b600060208083850312156158d457600080fd5b82516001600160401b038111156158ea57600080fd5b8301601f810185136158fb57600080fd5b8051615909614e2d82614d9f565b81815260059190911b8201830190838101908783111561592857600080fd5b928401925b828410156149e95783518252928401929084019061592d565b600060a082018783526020878185015260a0604085015281875180845260c086019150828901935060005b818110156159965784516001600160a01b031683529383019391830191600101615971565b50506001600160a01b03969096166060850152505050608001529392505050565b81516001600160a01b039081168252602080840151821690830152604080840151821690830152606080840151908301526080808401519083015260a0838101519083015260c092830151169181019190915260e00190565b81810381811115612a9057612a906154b4565b8082028115828204841417612a9057612a906154b4565b60058110615a4a57615a4a61549e565b9052565b60006101608201905083825282516020830152602083015160408301526040830151615a7e606084018215159052565b5060608301516001600160a01b03811660808401525060808301516001600160a01b03811660a08401525060a0830151615abd60c084018260020b9052565b5060c0830151615ad260e084018260020b9052565b5060e083015161010083810191909152830151610120615afc818501836001600160a01b03169052565b8401519050615b0f610140840182615a3a565b509392505050565b60008060408385031215615b2a57600080fd5b8251615b3581614a92565b602084015190925060038110615b4a57600080fd5b809150509250929050565b60048110610e9657610e9661549e565b60408101615b7284615b55565b9281526020015290565b600081518084526020808501945080840160005b83811015615bac57815187529582019590820190600101615b90565b509495945050505050565b8051608080845281519084018190526000916020919082019060a0860190845b81811015615bfc5783516001600160a01b031683529284019291840191600101615bd7565b505082850151915085810383870152615c158183615b7c565b9250505060408301518482036040860152615c308282615735565b9150506060830151615b0f606086018215159052565b8481526001600160a01b03848116602083015283166040820152608060608201819052600090615c7890830184615bb7565b9695505050505050565b60008060408385031215615c9557600080fd5b505080516020909101519092909150565b615caf84615b55565b838152606060208201526000615cc86060830185615b7c565b9050826040830152949350505050565b600080600060608486031215615ced57600080fd5b8351925060208401519150604084015190509250925092565b6001600160a01b039889168152968816602088015260408701959095526060860193909352608085019190915260a084015290921660c082015260e08101919091526101000190565b81516001600160a01b0316815261014081016020830151615d7b60208401826001600160a01b03169052565b506040830151615d90604084018260020b9052565b506060830151615da5606084018260020b9052565b506080830151608083015260a083015160a083015260c083015160c083015260e083015160e083015261010080840151615de9828501826001600160a01b03169052565b505061012092830151919092015290565b60008060008060808587031215615e1057600080fd5b8451935060208501516001600160801b0381168114615e2e57600080fd5b6040860151606090960151949790965092505050565b602081526000614968602083018461573556fea26469706673582212205566aa21433338a4127f7a4aeef390467a1f391aabef012dcac325b461cb850b64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setWeb3Packs(address)": {
        "details": "Setup the Web3Packs Interface"
      },
      "setWeb3PacksManager(address)": {
        "details": "Setup the Web3Packs Interface"
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/Web3PacksExchangeManager.sol:Web3PacksExchangeManager",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 130,
        "contract": "contracts/Web3PacksExchangeManager.sol:Web3PacksExchangeManager",
        "label": "_paused",
        "offset": 20,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 231,
        "contract": "contracts/Web3PacksExchangeManager.sol:Web3PacksExchangeManager",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 6969,
        "contract": "contracts/Web3PacksExchangeManager.sol:Web3PacksExchangeManager",
        "label": "_weth",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 8627,
        "contract": "contracts/Web3PacksExchangeManager.sol:Web3PacksExchangeManager",
        "label": "_weth",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 9038,
        "contract": "contracts/Web3PacksExchangeManager.sol:Web3PacksExchangeManager",
        "label": "_weth",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 9407,
        "contract": "contracts/Web3PacksExchangeManager.sol:Web3PacksExchangeManager",
        "label": "weth",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 8218,
        "contract": "contracts/Web3PacksExchangeManager.sol:Web3PacksExchangeManager",
        "label": "weth",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 1941,
        "contract": "contracts/Web3PacksExchangeManager.sol:Web3PacksExchangeManager",
        "label": "_weth",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 1943,
        "contract": "contracts/Web3PacksExchangeManager.sol:Web3PacksExchangeManager",
        "label": "_web3Packs",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 1945,
        "contract": "contracts/Web3PacksExchangeManager.sol:Web3PacksExchangeManager",
        "label": "_web3PacksManager",
        "offset": 0,
        "slot": "9",
        "type": "t_address"
      },
      {
        "astId": 1947,
        "contract": "contracts/Web3PacksExchangeManager.sol:Web3PacksExchangeManager",
        "label": "_receivedAmount",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 1952,
        "contract": "contracts/Web3PacksExchangeManager.sol:Web3PacksExchangeManager",
        "label": "_swapForLiquidityAmount",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_bytes32,t_struct(TokenAmount)6703_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_bytes32,t_struct(TokenAmount)6703_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct IWeb3PacksDefs.TokenAmount)",
        "numberOfBytes": "32",
        "value": "t_struct(TokenAmount)6703_storage"
      },
      "t_struct(TokenAmount)6703_storage": {
        "encoding": "inplace",
        "label": "struct IWeb3PacksDefs.TokenAmount",
        "members": [
          {
            "astId": 6700,
            "contract": "contracts/Web3PacksExchangeManager.sol:Web3PacksExchangeManager",
            "label": "token",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 6702,
            "contract": "contracts/Web3PacksExchangeManager.sol:Web3PacksExchangeManager",
            "label": "amount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}