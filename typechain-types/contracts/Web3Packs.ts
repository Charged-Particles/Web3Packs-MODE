/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace IWeb3Packs {
  export type ERC20SwapOrderStruct = {
    inputTokenAddress: AddressLike;
    outputTokenAddress: AddressLike;
    inputTokenAmount: BigNumberish;
    uniSwapPoolFee: BigNumberish;
    deadline: BigNumberish;
    amountOutMinimum: BigNumberish;
    sqrtPriceLimitX96: BigNumberish;
    forLiquidity: boolean;
  };

  export type ERC20SwapOrderStructOutput = [
    inputTokenAddress: string,
    outputTokenAddress: string,
    inputTokenAmount: bigint,
    uniSwapPoolFee: bigint,
    deadline: bigint,
    amountOutMinimum: bigint,
    sqrtPriceLimitX96: bigint,
    forLiquidity: boolean
  ] & {
    inputTokenAddress: string;
    outputTokenAddress: string;
    inputTokenAmount: bigint;
    uniSwapPoolFee: bigint;
    deadline: bigint;
    amountOutMinimum: bigint;
    sqrtPriceLimitX96: bigint;
    forLiquidity: boolean;
  };

  export type ERC721MintOrdersStruct = {
    erc721TokenAddress: AddressLike;
    basketManagerId: string;
    tokenMetadataUri: string;
  };

  export type ERC721MintOrdersStructOutput = [
    erc721TokenAddress: string,
    basketManagerId: string,
    tokenMetadataUri: string
  ] & {
    erc721TokenAddress: string;
    basketManagerId: string;
    tokenMetadataUri: string;
  };

  export type NFTStruct = { tokenAddress: AddressLike; id: BigNumberish };

  export type NFTStructOutput = [tokenAddress: string, id: bigint] & {
    tokenAddress: string;
    id: bigint;
  };

  export type Web3PackOrderStruct = {
    erc20TokenAddresses: AddressLike[];
    nfts: IWeb3Packs.NFTStruct[];
  };

  export type Web3PackOrderStructOutput = [
    erc20TokenAddresses: string[],
    nfts: IWeb3Packs.NFTStructOutput[]
  ] & { erc20TokenAddresses: string[]; nfts: IWeb3Packs.NFTStructOutput[] };
}

export interface Web3PacksInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "_findNearestValidTick"
      | "bond"
      | "bundle"
      | "depositLiquidity"
      | "onERC721Received"
      | "owner"
      | "pause"
      | "paused"
      | "renounceOwnership"
      | "setChargedParticles"
      | "setProton"
      | "setUniswapRouter"
      | "swap"
      | "transferOwnership"
      | "unbundle"
      | "unbundleFromManager"
      | "unpause"
      | "withdrawERC1155"
      | "withdrawERC721"
      | "withdrawErc20"
      | "withdrawEther"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ChargedParticlesSet"
      | "ChargedStateSet"
      | "OwnershipTransferred"
      | "PackBundled"
      | "PackUnbundled"
      | "Paused"
      | "ProtonSet"
      | "UniswapRouterSet"
      | "Unpaused"
      | "WithdrawStuckERC1155"
      | "WithdrawStuckERC20"
      | "WithdrawStuckERC721"
      | "WithdrawStuckEther"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "_findNearestValidTick",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "bond",
    values: [AddressLike, BigNumberish, string, string, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "bundle",
    values: [
      AddressLike,
      string,
      IWeb3Packs.ERC20SwapOrderStruct[],
      IWeb3Packs.ERC721MintOrdersStruct[],
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "depositLiquidity",
    values: [
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setChargedParticles",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setProton",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setUniswapRouter",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "swap",
    values: [IWeb3Packs.ERC20SwapOrderStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "unbundle",
    values: [
      AddressLike,
      AddressLike,
      BigNumberish,
      IWeb3Packs.Web3PackOrderStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "unbundleFromManager",
    values: [
      AddressLike,
      AddressLike,
      BigNumberish,
      string,
      IWeb3Packs.Web3PackOrderStruct
    ]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawERC1155",
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawERC721",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawErc20",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawEther",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "_findNearestValidTick",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "bond", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bundle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setChargedParticles",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setProton", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setUniswapRouter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "swap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unbundle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "unbundleFromManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawERC1155",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawERC721",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawErc20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawEther",
    data: BytesLike
  ): Result;
}

export namespace ChargedParticlesSetEvent {
  export type InputTuple = [chargedParticles: AddressLike];
  export type OutputTuple = [chargedParticles: string];
  export interface OutputObject {
    chargedParticles: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ChargedStateSetEvent {
  export type InputTuple = [chargedState: AddressLike];
  export type OutputTuple = [chargedState: string];
  export interface OutputObject {
    chargedState: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PackBundledEvent {
  export type InputTuple = [tokenId: BigNumberish, receiver: AddressLike];
  export type OutputTuple = [tokenId: bigint, receiver: string];
  export interface OutputObject {
    tokenId: bigint;
    receiver: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PackUnbundledEvent {
  export type InputTuple = [tokenId: BigNumberish, receiver: AddressLike];
  export type OutputTuple = [tokenId: bigint, receiver: string];
  export interface OutputObject {
    tokenId: bigint;
    receiver: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProtonSetEvent {
  export type InputTuple = [proton: AddressLike];
  export type OutputTuple = [proton: string];
  export interface OutputObject {
    proton: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UniswapRouterSetEvent {
  export type InputTuple = [router: AddressLike];
  export type OutputTuple = [router: string];
  export interface OutputObject {
    router: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawStuckERC1155Event {
  export type InputTuple = [
    receiver: AddressLike,
    tokenAddress: AddressLike,
    tokenId: BigNumberish,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    receiver: string,
    tokenAddress: string,
    tokenId: bigint,
    amount: bigint
  ];
  export interface OutputObject {
    receiver: string;
    tokenAddress: string;
    tokenId: bigint;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawStuckERC20Event {
  export type InputTuple = [
    receiver: AddressLike,
    tokenAddress: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    receiver: string,
    tokenAddress: string,
    amount: bigint
  ];
  export interface OutputObject {
    receiver: string;
    tokenAddress: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawStuckERC721Event {
  export type InputTuple = [
    receiver: AddressLike,
    tokenAddress: AddressLike,
    tokenId: BigNumberish
  ];
  export type OutputTuple = [
    receiver: string,
    tokenAddress: string,
    tokenId: bigint
  ];
  export interface OutputObject {
    receiver: string;
    tokenAddress: string;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawStuckEtherEvent {
  export type InputTuple = [receiver: AddressLike, amount: BigNumberish];
  export type OutputTuple = [receiver: string, amount: bigint];
  export interface OutputObject {
    receiver: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Web3Packs extends BaseContract {
  connect(runner?: ContractRunner | null): Web3Packs;
  waitForDeployment(): Promise<this>;

  interface: Web3PacksInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  _findNearestValidTick: TypedContractMethod<
    [tickSpacing: BigNumberish, nearestToMin: boolean],
    [bigint],
    "view"
  >;

  bond: TypedContractMethod<
    [
      contractAddress: AddressLike,
      tokenId: BigNumberish,
      tokenMetadataUri: string,
      basketManagerId: string,
      nftTokenAddress: AddressLike
    ],
    [bigint],
    "nonpayable"
  >;

  bundle: TypedContractMethod<
    [
      receiver: AddressLike,
      tokenMetaUri: string,
      erc20SwapOrders: IWeb3Packs.ERC20SwapOrderStruct[],
      erc721MintOrders: IWeb3Packs.ERC721MintOrdersStruct[],
      fundingAmount: BigNumberish
    ],
    [bigint],
    "payable"
  >;

  depositLiquidity: TypedContractMethod<
    [
      token0: AddressLike,
      token1: AddressLike,
      amount0ToMint: BigNumberish,
      amount1ToMint: BigNumberish,
      tickSpace: BigNumberish,
      poolFee: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;

  onERC721Received: TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike, arg2: BigNumberish, arg3: BytesLike],
    [string],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setChargedParticles: TypedContractMethod<
    [chargedParticles: AddressLike],
    [void],
    "nonpayable"
  >;

  setProton: TypedContractMethod<[proton: AddressLike], [void], "nonpayable">;

  setUniswapRouter: TypedContractMethod<
    [router: AddressLike],
    [void],
    "nonpayable"
  >;

  swap: TypedContractMethod<
    [erc20SwapOrders: IWeb3Packs.ERC20SwapOrderStruct[]],
    [bigint[]],
    "payable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  unbundle: TypedContractMethod<
    [
      receiver: AddressLike,
      tokenAddress: AddressLike,
      tokenId: BigNumberish,
      web3PackOrder: IWeb3Packs.Web3PackOrderStruct
    ],
    [void],
    "nonpayable"
  >;

  unbundleFromManager: TypedContractMethod<
    [
      receiver: AddressLike,
      tokenAddress: AddressLike,
      tokenId: BigNumberish,
      walletManager: string,
      web3PackOrder: IWeb3Packs.Web3PackOrderStruct
    ],
    [void],
    "nonpayable"
  >;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  withdrawERC1155: TypedContractMethod<
    [
      receiver: AddressLike,
      tokenAddress: AddressLike,
      tokenId: BigNumberish,
      amount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  withdrawERC721: TypedContractMethod<
    [receiver: AddressLike, tokenAddress: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  withdrawErc20: TypedContractMethod<
    [receiver: AddressLike, tokenAddress: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  withdrawEther: TypedContractMethod<
    [receiver: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "_findNearestValidTick"
  ): TypedContractMethod<
    [tickSpacing: BigNumberish, nearestToMin: boolean],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "bond"
  ): TypedContractMethod<
    [
      contractAddress: AddressLike,
      tokenId: BigNumberish,
      tokenMetadataUri: string,
      basketManagerId: string,
      nftTokenAddress: AddressLike
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "bundle"
  ): TypedContractMethod<
    [
      receiver: AddressLike,
      tokenMetaUri: string,
      erc20SwapOrders: IWeb3Packs.ERC20SwapOrderStruct[],
      erc721MintOrders: IWeb3Packs.ERC721MintOrdersStruct[],
      fundingAmount: BigNumberish
    ],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "depositLiquidity"
  ): TypedContractMethod<
    [
      token0: AddressLike,
      token1: AddressLike,
      amount0ToMint: BigNumberish,
      amount1ToMint: BigNumberish,
      tickSpace: BigNumberish,
      poolFee: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "onERC721Received"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike, arg2: BigNumberish, arg3: BytesLike],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setChargedParticles"
  ): TypedContractMethod<[chargedParticles: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setProton"
  ): TypedContractMethod<[proton: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setUniswapRouter"
  ): TypedContractMethod<[router: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "swap"
  ): TypedContractMethod<
    [erc20SwapOrders: IWeb3Packs.ERC20SwapOrderStruct[]],
    [bigint[]],
    "payable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unbundle"
  ): TypedContractMethod<
    [
      receiver: AddressLike,
      tokenAddress: AddressLike,
      tokenId: BigNumberish,
      web3PackOrder: IWeb3Packs.Web3PackOrderStruct
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "unbundleFromManager"
  ): TypedContractMethod<
    [
      receiver: AddressLike,
      tokenAddress: AddressLike,
      tokenId: BigNumberish,
      walletManager: string,
      web3PackOrder: IWeb3Packs.Web3PackOrderStruct
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawERC1155"
  ): TypedContractMethod<
    [
      receiver: AddressLike,
      tokenAddress: AddressLike,
      tokenId: BigNumberish,
      amount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdrawERC721"
  ): TypedContractMethod<
    [receiver: AddressLike, tokenAddress: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdrawErc20"
  ): TypedContractMethod<
    [receiver: AddressLike, tokenAddress: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdrawEther"
  ): TypedContractMethod<
    [receiver: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "ChargedParticlesSet"
  ): TypedContractEvent<
    ChargedParticlesSetEvent.InputTuple,
    ChargedParticlesSetEvent.OutputTuple,
    ChargedParticlesSetEvent.OutputObject
  >;
  getEvent(
    key: "ChargedStateSet"
  ): TypedContractEvent<
    ChargedStateSetEvent.InputTuple,
    ChargedStateSetEvent.OutputTuple,
    ChargedStateSetEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "PackBundled"
  ): TypedContractEvent<
    PackBundledEvent.InputTuple,
    PackBundledEvent.OutputTuple,
    PackBundledEvent.OutputObject
  >;
  getEvent(
    key: "PackUnbundled"
  ): TypedContractEvent<
    PackUnbundledEvent.InputTuple,
    PackUnbundledEvent.OutputTuple,
    PackUnbundledEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "ProtonSet"
  ): TypedContractEvent<
    ProtonSetEvent.InputTuple,
    ProtonSetEvent.OutputTuple,
    ProtonSetEvent.OutputObject
  >;
  getEvent(
    key: "UniswapRouterSet"
  ): TypedContractEvent<
    UniswapRouterSetEvent.InputTuple,
    UniswapRouterSetEvent.OutputTuple,
    UniswapRouterSetEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;
  getEvent(
    key: "WithdrawStuckERC1155"
  ): TypedContractEvent<
    WithdrawStuckERC1155Event.InputTuple,
    WithdrawStuckERC1155Event.OutputTuple,
    WithdrawStuckERC1155Event.OutputObject
  >;
  getEvent(
    key: "WithdrawStuckERC20"
  ): TypedContractEvent<
    WithdrawStuckERC20Event.InputTuple,
    WithdrawStuckERC20Event.OutputTuple,
    WithdrawStuckERC20Event.OutputObject
  >;
  getEvent(
    key: "WithdrawStuckERC721"
  ): TypedContractEvent<
    WithdrawStuckERC721Event.InputTuple,
    WithdrawStuckERC721Event.OutputTuple,
    WithdrawStuckERC721Event.OutputObject
  >;
  getEvent(
    key: "WithdrawStuckEther"
  ): TypedContractEvent<
    WithdrawStuckEtherEvent.InputTuple,
    WithdrawStuckEtherEvent.OutputTuple,
    WithdrawStuckEtherEvent.OutputObject
  >;

  filters: {
    "ChargedParticlesSet(address)": TypedContractEvent<
      ChargedParticlesSetEvent.InputTuple,
      ChargedParticlesSetEvent.OutputTuple,
      ChargedParticlesSetEvent.OutputObject
    >;
    ChargedParticlesSet: TypedContractEvent<
      ChargedParticlesSetEvent.InputTuple,
      ChargedParticlesSetEvent.OutputTuple,
      ChargedParticlesSetEvent.OutputObject
    >;

    "ChargedStateSet(address)": TypedContractEvent<
      ChargedStateSetEvent.InputTuple,
      ChargedStateSetEvent.OutputTuple,
      ChargedStateSetEvent.OutputObject
    >;
    ChargedStateSet: TypedContractEvent<
      ChargedStateSetEvent.InputTuple,
      ChargedStateSetEvent.OutputTuple,
      ChargedStateSetEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "PackBundled(uint256,address)": TypedContractEvent<
      PackBundledEvent.InputTuple,
      PackBundledEvent.OutputTuple,
      PackBundledEvent.OutputObject
    >;
    PackBundled: TypedContractEvent<
      PackBundledEvent.InputTuple,
      PackBundledEvent.OutputTuple,
      PackBundledEvent.OutputObject
    >;

    "PackUnbundled(uint256,address)": TypedContractEvent<
      PackUnbundledEvent.InputTuple,
      PackUnbundledEvent.OutputTuple,
      PackUnbundledEvent.OutputObject
    >;
    PackUnbundled: TypedContractEvent<
      PackUnbundledEvent.InputTuple,
      PackUnbundledEvent.OutputTuple,
      PackUnbundledEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "ProtonSet(address)": TypedContractEvent<
      ProtonSetEvent.InputTuple,
      ProtonSetEvent.OutputTuple,
      ProtonSetEvent.OutputObject
    >;
    ProtonSet: TypedContractEvent<
      ProtonSetEvent.InputTuple,
      ProtonSetEvent.OutputTuple,
      ProtonSetEvent.OutputObject
    >;

    "UniswapRouterSet(address)": TypedContractEvent<
      UniswapRouterSetEvent.InputTuple,
      UniswapRouterSetEvent.OutputTuple,
      UniswapRouterSetEvent.OutputObject
    >;
    UniswapRouterSet: TypedContractEvent<
      UniswapRouterSetEvent.InputTuple,
      UniswapRouterSetEvent.OutputTuple,
      UniswapRouterSetEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;

    "WithdrawStuckERC1155(address,address,uint256,uint256)": TypedContractEvent<
      WithdrawStuckERC1155Event.InputTuple,
      WithdrawStuckERC1155Event.OutputTuple,
      WithdrawStuckERC1155Event.OutputObject
    >;
    WithdrawStuckERC1155: TypedContractEvent<
      WithdrawStuckERC1155Event.InputTuple,
      WithdrawStuckERC1155Event.OutputTuple,
      WithdrawStuckERC1155Event.OutputObject
    >;

    "WithdrawStuckERC20(address,address,uint256)": TypedContractEvent<
      WithdrawStuckERC20Event.InputTuple,
      WithdrawStuckERC20Event.OutputTuple,
      WithdrawStuckERC20Event.OutputObject
    >;
    WithdrawStuckERC20: TypedContractEvent<
      WithdrawStuckERC20Event.InputTuple,
      WithdrawStuckERC20Event.OutputTuple,
      WithdrawStuckERC20Event.OutputObject
    >;

    "WithdrawStuckERC721(address,address,uint256)": TypedContractEvent<
      WithdrawStuckERC721Event.InputTuple,
      WithdrawStuckERC721Event.OutputTuple,
      WithdrawStuckERC721Event.OutputObject
    >;
    WithdrawStuckERC721: TypedContractEvent<
      WithdrawStuckERC721Event.InputTuple,
      WithdrawStuckERC721Event.OutputTuple,
      WithdrawStuckERC721Event.OutputObject
    >;

    "WithdrawStuckEther(address,uint256)": TypedContractEvent<
      WithdrawStuckEtherEvent.InputTuple,
      WithdrawStuckEtherEvent.OutputTuple,
      WithdrawStuckEtherEvent.OutputObject
    >;
    WithdrawStuckEther: TypedContractEvent<
      WithdrawStuckEtherEvent.InputTuple,
      WithdrawStuckEtherEvent.OutputTuple,
      WithdrawStuckEtherEvent.OutputObject
    >;
  };
}
