/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface IChargedParticlesInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "baseParticleMass"
      | "breakCovalentBond"
      | "covalentBond"
      | "currentParticleCharge"
      | "currentParticleCovalentBonds"
      | "currentParticleKinetics"
      | "dischargeParticle"
      | "dischargeParticleAmount"
      | "dischargeParticleForCreator"
      | "energizeParticle"
      | "getFeesForDeposit"
      | "getManagersAddress"
      | "getSettingsAddress"
      | "getStateAddress"
      | "releaseParticle"
      | "releaseParticleAmount"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ControllerSet"
      | "DepositFeeSet"
      | "Initialized"
      | "ProtocolFeesCollected"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "baseParticleMass",
    values: [AddressLike, BigNumberish, string, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "breakCovalentBond",
    values: [
      AddressLike,
      AddressLike,
      BigNumberish,
      string,
      AddressLike,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "covalentBond",
    values: [
      AddressLike,
      BigNumberish,
      string,
      AddressLike,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "currentParticleCharge",
    values: [AddressLike, BigNumberish, string, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "currentParticleCovalentBonds",
    values: [AddressLike, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "currentParticleKinetics",
    values: [AddressLike, BigNumberish, string, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "dischargeParticle",
    values: [AddressLike, AddressLike, BigNumberish, string, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "dischargeParticleAmount",
    values: [
      AddressLike,
      AddressLike,
      BigNumberish,
      string,
      AddressLike,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "dischargeParticleForCreator",
    values: [
      AddressLike,
      AddressLike,
      BigNumberish,
      string,
      AddressLike,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "energizeParticle",
    values: [
      AddressLike,
      BigNumberish,
      string,
      AddressLike,
      BigNumberish,
      AddressLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getFeesForDeposit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getManagersAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSettingsAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getStateAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "releaseParticle",
    values: [AddressLike, AddressLike, BigNumberish, string, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "releaseParticleAmount",
    values: [
      AddressLike,
      AddressLike,
      BigNumberish,
      string,
      AddressLike,
      BigNumberish
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "baseParticleMass",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "breakCovalentBond",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "covalentBond",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentParticleCharge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentParticleCovalentBonds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentParticleKinetics",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dischargeParticle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dischargeParticleAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dischargeParticleForCreator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "energizeParticle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFeesForDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getManagersAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSettingsAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStateAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "releaseParticle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "releaseParticleAmount",
    data: BytesLike
  ): Result;
}

export namespace ControllerSetEvent {
  export type InputTuple = [
    controllerAddress: AddressLike,
    controllerId: string
  ];
  export type OutputTuple = [controllerAddress: string, controllerId: string];
  export interface OutputObject {
    controllerAddress: string;
    controllerId: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DepositFeeSetEvent {
  export type InputTuple = [depositFee: BigNumberish];
  export type OutputTuple = [depositFee: bigint];
  export interface OutputObject {
    depositFee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [initiator: AddressLike];
  export type OutputTuple = [initiator: string];
  export interface OutputObject {
    initiator: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProtocolFeesCollectedEvent {
  export type InputTuple = [
    assetToken: AddressLike,
    depositAmount: BigNumberish,
    feesCollected: BigNumberish
  ];
  export type OutputTuple = [
    assetToken: string,
    depositAmount: bigint,
    feesCollected: bigint
  ];
  export interface OutputObject {
    assetToken: string;
    depositAmount: bigint;
    feesCollected: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IChargedParticles extends BaseContract {
  connect(runner?: ContractRunner | null): IChargedParticles;
  waitForDeployment(): Promise<this>;

  interface: IChargedParticlesInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  baseParticleMass: TypedContractMethod<
    [
      contractAddress: AddressLike,
      tokenId: BigNumberish,
      walletManagerId: string,
      assetToken: AddressLike
    ],
    [bigint],
    "nonpayable"
  >;

  breakCovalentBond: TypedContractMethod<
    [
      receiver: AddressLike,
      contractAddress: AddressLike,
      tokenId: BigNumberish,
      basketManagerId: string,
      nftTokenAddress: AddressLike,
      nftTokenId: BigNumberish,
      nftTokenAmount: BigNumberish
    ],
    [boolean],
    "nonpayable"
  >;

  covalentBond: TypedContractMethod<
    [
      contractAddress: AddressLike,
      tokenId: BigNumberish,
      basketManagerId: string,
      nftTokenAddress: AddressLike,
      nftTokenId: BigNumberish,
      nftTokenAmount: BigNumberish
    ],
    [boolean],
    "nonpayable"
  >;

  currentParticleCharge: TypedContractMethod<
    [
      contractAddress: AddressLike,
      tokenId: BigNumberish,
      walletManagerId: string,
      assetToken: AddressLike
    ],
    [bigint],
    "nonpayable"
  >;

  currentParticleCovalentBonds: TypedContractMethod<
    [
      contractAddress: AddressLike,
      tokenId: BigNumberish,
      basketManagerId: string
    ],
    [bigint],
    "view"
  >;

  currentParticleKinetics: TypedContractMethod<
    [
      contractAddress: AddressLike,
      tokenId: BigNumberish,
      walletManagerId: string,
      assetToken: AddressLike
    ],
    [bigint],
    "nonpayable"
  >;

  dischargeParticle: TypedContractMethod<
    [
      receiver: AddressLike,
      contractAddress: AddressLike,
      tokenId: BigNumberish,
      walletManagerId: string,
      assetToken: AddressLike
    ],
    [[bigint, bigint] & { creatorAmount: bigint; receiverAmount: bigint }],
    "nonpayable"
  >;

  dischargeParticleAmount: TypedContractMethod<
    [
      receiver: AddressLike,
      contractAddress: AddressLike,
      tokenId: BigNumberish,
      walletManagerId: string,
      assetToken: AddressLike,
      assetAmount: BigNumberish
    ],
    [[bigint, bigint] & { creatorAmount: bigint; receiverAmount: bigint }],
    "nonpayable"
  >;

  dischargeParticleForCreator: TypedContractMethod<
    [
      receiver: AddressLike,
      contractAddress: AddressLike,
      tokenId: BigNumberish,
      walletManagerId: string,
      assetToken: AddressLike,
      assetAmount: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;

  energizeParticle: TypedContractMethod<
    [
      contractAddress: AddressLike,
      tokenId: BigNumberish,
      walletManagerId: string,
      assetToken: AddressLike,
      assetAmount: BigNumberish,
      referrer: AddressLike
    ],
    [bigint],
    "nonpayable"
  >;

  getFeesForDeposit: TypedContractMethod<
    [assetAmount: BigNumberish],
    [bigint],
    "view"
  >;

  getManagersAddress: TypedContractMethod<[], [string], "view">;

  getSettingsAddress: TypedContractMethod<[], [string], "view">;

  getStateAddress: TypedContractMethod<[], [string], "view">;

  releaseParticle: TypedContractMethod<
    [
      receiver: AddressLike,
      contractAddress: AddressLike,
      tokenId: BigNumberish,
      walletManagerId: string,
      assetToken: AddressLike
    ],
    [[bigint, bigint] & { creatorAmount: bigint; receiverAmount: bigint }],
    "nonpayable"
  >;

  releaseParticleAmount: TypedContractMethod<
    [
      receiver: AddressLike,
      contractAddress: AddressLike,
      tokenId: BigNumberish,
      walletManagerId: string,
      assetToken: AddressLike,
      assetAmount: BigNumberish
    ],
    [[bigint, bigint] & { creatorAmount: bigint; receiverAmount: bigint }],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "baseParticleMass"
  ): TypedContractMethod<
    [
      contractAddress: AddressLike,
      tokenId: BigNumberish,
      walletManagerId: string,
      assetToken: AddressLike
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "breakCovalentBond"
  ): TypedContractMethod<
    [
      receiver: AddressLike,
      contractAddress: AddressLike,
      tokenId: BigNumberish,
      basketManagerId: string,
      nftTokenAddress: AddressLike,
      nftTokenId: BigNumberish,
      nftTokenAmount: BigNumberish
    ],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "covalentBond"
  ): TypedContractMethod<
    [
      contractAddress: AddressLike,
      tokenId: BigNumberish,
      basketManagerId: string,
      nftTokenAddress: AddressLike,
      nftTokenId: BigNumberish,
      nftTokenAmount: BigNumberish
    ],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "currentParticleCharge"
  ): TypedContractMethod<
    [
      contractAddress: AddressLike,
      tokenId: BigNumberish,
      walletManagerId: string,
      assetToken: AddressLike
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "currentParticleCovalentBonds"
  ): TypedContractMethod<
    [
      contractAddress: AddressLike,
      tokenId: BigNumberish,
      basketManagerId: string
    ],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "currentParticleKinetics"
  ): TypedContractMethod<
    [
      contractAddress: AddressLike,
      tokenId: BigNumberish,
      walletManagerId: string,
      assetToken: AddressLike
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "dischargeParticle"
  ): TypedContractMethod<
    [
      receiver: AddressLike,
      contractAddress: AddressLike,
      tokenId: BigNumberish,
      walletManagerId: string,
      assetToken: AddressLike
    ],
    [[bigint, bigint] & { creatorAmount: bigint; receiverAmount: bigint }],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "dischargeParticleAmount"
  ): TypedContractMethod<
    [
      receiver: AddressLike,
      contractAddress: AddressLike,
      tokenId: BigNumberish,
      walletManagerId: string,
      assetToken: AddressLike,
      assetAmount: BigNumberish
    ],
    [[bigint, bigint] & { creatorAmount: bigint; receiverAmount: bigint }],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "dischargeParticleForCreator"
  ): TypedContractMethod<
    [
      receiver: AddressLike,
      contractAddress: AddressLike,
      tokenId: BigNumberish,
      walletManagerId: string,
      assetToken: AddressLike,
      assetAmount: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "energizeParticle"
  ): TypedContractMethod<
    [
      contractAddress: AddressLike,
      tokenId: BigNumberish,
      walletManagerId: string,
      assetToken: AddressLike,
      assetAmount: BigNumberish,
      referrer: AddressLike
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getFeesForDeposit"
  ): TypedContractMethod<[assetAmount: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getManagersAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getSettingsAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getStateAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "releaseParticle"
  ): TypedContractMethod<
    [
      receiver: AddressLike,
      contractAddress: AddressLike,
      tokenId: BigNumberish,
      walletManagerId: string,
      assetToken: AddressLike
    ],
    [[bigint, bigint] & { creatorAmount: bigint; receiverAmount: bigint }],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "releaseParticleAmount"
  ): TypedContractMethod<
    [
      receiver: AddressLike,
      contractAddress: AddressLike,
      tokenId: BigNumberish,
      walletManagerId: string,
      assetToken: AddressLike,
      assetAmount: BigNumberish
    ],
    [[bigint, bigint] & { creatorAmount: bigint; receiverAmount: bigint }],
    "nonpayable"
  >;

  getEvent(
    key: "ControllerSet"
  ): TypedContractEvent<
    ControllerSetEvent.InputTuple,
    ControllerSetEvent.OutputTuple,
    ControllerSetEvent.OutputObject
  >;
  getEvent(
    key: "DepositFeeSet"
  ): TypedContractEvent<
    DepositFeeSetEvent.InputTuple,
    DepositFeeSetEvent.OutputTuple,
    DepositFeeSetEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "ProtocolFeesCollected"
  ): TypedContractEvent<
    ProtocolFeesCollectedEvent.InputTuple,
    ProtocolFeesCollectedEvent.OutputTuple,
    ProtocolFeesCollectedEvent.OutputObject
  >;

  filters: {
    "ControllerSet(address,string)": TypedContractEvent<
      ControllerSetEvent.InputTuple,
      ControllerSetEvent.OutputTuple,
      ControllerSetEvent.OutputObject
    >;
    ControllerSet: TypedContractEvent<
      ControllerSetEvent.InputTuple,
      ControllerSetEvent.OutputTuple,
      ControllerSetEvent.OutputObject
    >;

    "DepositFeeSet(uint256)": TypedContractEvent<
      DepositFeeSetEvent.InputTuple,
      DepositFeeSetEvent.OutputTuple,
      DepositFeeSetEvent.OutputObject
    >;
    DepositFeeSet: TypedContractEvent<
      DepositFeeSetEvent.InputTuple,
      DepositFeeSetEvent.OutputTuple,
      DepositFeeSetEvent.OutputObject
    >;

    "Initialized(address)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "ProtocolFeesCollected(address,uint256,uint256)": TypedContractEvent<
      ProtocolFeesCollectedEvent.InputTuple,
      ProtocolFeesCollectedEvent.OutputTuple,
      ProtocolFeesCollectedEvent.OutputObject
    >;
    ProtocolFeesCollected: TypedContractEvent<
      ProtocolFeesCollectedEvent.InputTuple,
      ProtocolFeesCollectedEvent.OutputTuple,
      ProtocolFeesCollectedEvent.OutputObject
    >;
  };
}
