/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface IChargedStateInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "getBreakBondState"
      | "getBreakBondTimelockExpiry"
      | "getDischargeState"
      | "getDischargeTimelockExpiry"
      | "getReleaseState"
      | "getReleaseTimelockExpiry"
      | "isApprovedForBreakBond"
      | "isApprovedForDischarge"
      | "isApprovedForRelease"
      | "isApprovedForTimelock"
      | "isCovalentBondRestricted"
      | "isEnergizeRestricted"
      | "setApprovalForAll"
      | "setBreakBondApproval"
      | "setBreakBondTimelock"
      | "setDischargeApproval"
      | "setDischargeTimelock"
      | "setPermsForAllowBreakBond"
      | "setPermsForAllowDischarge"
      | "setPermsForAllowRelease"
      | "setPermsForRestrictBond"
      | "setPermsForRestrictCharge"
      | "setReleaseApproval"
      | "setReleaseTimelock"
      | "setTemporaryLock"
      | "setTimelockApproval"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "BreakBondApproval"
      | "ControllerSet"
      | "DischargeApproval"
      | "Initialized"
      | "PermsSetForAllowBreakBond"
      | "PermsSetForAllowDischarge"
      | "PermsSetForAllowRelease"
      | "PermsSetForRestrictBond"
      | "PermsSetForRestrictCharge"
      | "ReleaseApproval"
      | "TimelockApproval"
      | "TokenBreakBondTimelock"
      | "TokenDischargeTimelock"
      | "TokenReleaseTimelock"
      | "TokenTempLock"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "getBreakBondState",
    values: [AddressLike, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getBreakBondTimelockExpiry",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDischargeState",
    values: [AddressLike, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getDischargeTimelockExpiry",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getReleaseState",
    values: [AddressLike, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getReleaseTimelockExpiry",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForBreakBond",
    values: [AddressLike, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForDischarge",
    values: [AddressLike, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForRelease",
    values: [AddressLike, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForTimelock",
    values: [AddressLike, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isCovalentBondRestricted",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isEnergizeRestricted",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [AddressLike, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setBreakBondApproval",
    values: [AddressLike, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setBreakBondTimelock",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setDischargeApproval",
    values: [AddressLike, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setDischargeTimelock",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPermsForAllowBreakBond",
    values: [AddressLike, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setPermsForAllowDischarge",
    values: [AddressLike, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setPermsForAllowRelease",
    values: [AddressLike, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setPermsForRestrictBond",
    values: [AddressLike, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setPermsForRestrictCharge",
    values: [AddressLike, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setReleaseApproval",
    values: [AddressLike, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setReleaseTimelock",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTemporaryLock",
    values: [AddressLike, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setTimelockApproval",
    values: [AddressLike, BigNumberish, AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "getBreakBondState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBreakBondTimelockExpiry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDischargeState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDischargeTimelockExpiry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReleaseState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReleaseTimelockExpiry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForBreakBond",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForDischarge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForRelease",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForTimelock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isCovalentBondRestricted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isEnergizeRestricted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBreakBondApproval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBreakBondTimelock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDischargeApproval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDischargeTimelock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPermsForAllowBreakBond",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPermsForAllowDischarge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPermsForAllowRelease",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPermsForRestrictBond",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPermsForRestrictCharge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setReleaseApproval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setReleaseTimelock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTemporaryLock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTimelockApproval",
    data: BytesLike
  ): Result;
}

export namespace BreakBondApprovalEvent {
  export type InputTuple = [
    contractAddress: AddressLike,
    tokenId: BigNumberish,
    owner: AddressLike,
    operator: AddressLike
  ];
  export type OutputTuple = [
    contractAddress: string,
    tokenId: bigint,
    owner: string,
    operator: string
  ];
  export interface OutputObject {
    contractAddress: string;
    tokenId: bigint;
    owner: string;
    operator: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ControllerSetEvent {
  export type InputTuple = [
    controllerAddress: AddressLike,
    controllerId: string
  ];
  export type OutputTuple = [controllerAddress: string, controllerId: string];
  export interface OutputObject {
    controllerAddress: string;
    controllerId: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DischargeApprovalEvent {
  export type InputTuple = [
    contractAddress: AddressLike,
    tokenId: BigNumberish,
    owner: AddressLike,
    operator: AddressLike
  ];
  export type OutputTuple = [
    contractAddress: string,
    tokenId: bigint,
    owner: string,
    operator: string
  ];
  export interface OutputObject {
    contractAddress: string;
    tokenId: bigint;
    owner: string;
    operator: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [initiator: AddressLike];
  export type OutputTuple = [initiator: string];
  export interface OutputObject {
    initiator: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PermsSetForAllowBreakBondEvent {
  export type InputTuple = [
    contractAddress: AddressLike,
    tokenId: BigNumberish,
    state: boolean
  ];
  export type OutputTuple = [
    contractAddress: string,
    tokenId: bigint,
    state: boolean
  ];
  export interface OutputObject {
    contractAddress: string;
    tokenId: bigint;
    state: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PermsSetForAllowDischargeEvent {
  export type InputTuple = [
    contractAddress: AddressLike,
    tokenId: BigNumberish,
    state: boolean
  ];
  export type OutputTuple = [
    contractAddress: string,
    tokenId: bigint,
    state: boolean
  ];
  export interface OutputObject {
    contractAddress: string;
    tokenId: bigint;
    state: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PermsSetForAllowReleaseEvent {
  export type InputTuple = [
    contractAddress: AddressLike,
    tokenId: BigNumberish,
    state: boolean
  ];
  export type OutputTuple = [
    contractAddress: string,
    tokenId: bigint,
    state: boolean
  ];
  export interface OutputObject {
    contractAddress: string;
    tokenId: bigint;
    state: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PermsSetForRestrictBondEvent {
  export type InputTuple = [
    contractAddress: AddressLike,
    tokenId: BigNumberish,
    state: boolean
  ];
  export type OutputTuple = [
    contractAddress: string,
    tokenId: bigint,
    state: boolean
  ];
  export interface OutputObject {
    contractAddress: string;
    tokenId: bigint;
    state: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PermsSetForRestrictChargeEvent {
  export type InputTuple = [
    contractAddress: AddressLike,
    tokenId: BigNumberish,
    state: boolean
  ];
  export type OutputTuple = [
    contractAddress: string,
    tokenId: bigint,
    state: boolean
  ];
  export interface OutputObject {
    contractAddress: string;
    tokenId: bigint;
    state: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReleaseApprovalEvent {
  export type InputTuple = [
    contractAddress: AddressLike,
    tokenId: BigNumberish,
    owner: AddressLike,
    operator: AddressLike
  ];
  export type OutputTuple = [
    contractAddress: string,
    tokenId: bigint,
    owner: string,
    operator: string
  ];
  export interface OutputObject {
    contractAddress: string;
    tokenId: bigint;
    owner: string;
    operator: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TimelockApprovalEvent {
  export type InputTuple = [
    contractAddress: AddressLike,
    tokenId: BigNumberish,
    owner: AddressLike,
    operator: AddressLike
  ];
  export type OutputTuple = [
    contractAddress: string,
    tokenId: bigint,
    owner: string,
    operator: string
  ];
  export interface OutputObject {
    contractAddress: string;
    tokenId: bigint;
    owner: string;
    operator: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokenBreakBondTimelockEvent {
  export type InputTuple = [
    contractAddress: AddressLike,
    tokenId: BigNumberish,
    operator: AddressLike,
    unlockBlock: BigNumberish
  ];
  export type OutputTuple = [
    contractAddress: string,
    tokenId: bigint,
    operator: string,
    unlockBlock: bigint
  ];
  export interface OutputObject {
    contractAddress: string;
    tokenId: bigint;
    operator: string;
    unlockBlock: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokenDischargeTimelockEvent {
  export type InputTuple = [
    contractAddress: AddressLike,
    tokenId: BigNumberish,
    operator: AddressLike,
    unlockBlock: BigNumberish
  ];
  export type OutputTuple = [
    contractAddress: string,
    tokenId: bigint,
    operator: string,
    unlockBlock: bigint
  ];
  export interface OutputObject {
    contractAddress: string;
    tokenId: bigint;
    operator: string;
    unlockBlock: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokenReleaseTimelockEvent {
  export type InputTuple = [
    contractAddress: AddressLike,
    tokenId: BigNumberish,
    operator: AddressLike,
    unlockBlock: BigNumberish
  ];
  export type OutputTuple = [
    contractAddress: string,
    tokenId: bigint,
    operator: string,
    unlockBlock: bigint
  ];
  export interface OutputObject {
    contractAddress: string;
    tokenId: bigint;
    operator: string;
    unlockBlock: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokenTempLockEvent {
  export type InputTuple = [
    contractAddress: AddressLike,
    tokenId: BigNumberish,
    unlockBlock: BigNumberish
  ];
  export type OutputTuple = [
    contractAddress: string,
    tokenId: bigint,
    unlockBlock: bigint
  ];
  export interface OutputObject {
    contractAddress: string;
    tokenId: bigint;
    unlockBlock: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IChargedState extends BaseContract {
  connect(runner?: ContractRunner | null): IChargedState;
  waitForDeployment(): Promise<this>;

  interface: IChargedStateInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getBreakBondState: TypedContractMethod<
    [contractAddress: AddressLike, tokenId: BigNumberish, sender: AddressLike],
    [
      [boolean, boolean, bigint, bigint] & {
        allowFromAll: boolean;
        isApproved: boolean;
        timelock: bigint;
        tempLockExpiry: bigint;
      }
    ],
    "nonpayable"
  >;

  getBreakBondTimelockExpiry: TypedContractMethod<
    [contractAddress: AddressLike, tokenId: BigNumberish],
    [bigint],
    "view"
  >;

  getDischargeState: TypedContractMethod<
    [contractAddress: AddressLike, tokenId: BigNumberish, sender: AddressLike],
    [
      [boolean, boolean, bigint, bigint] & {
        allowFromAll: boolean;
        isApproved: boolean;
        timelock: bigint;
        tempLockExpiry: bigint;
      }
    ],
    "nonpayable"
  >;

  getDischargeTimelockExpiry: TypedContractMethod<
    [contractAddress: AddressLike, tokenId: BigNumberish],
    [bigint],
    "view"
  >;

  getReleaseState: TypedContractMethod<
    [contractAddress: AddressLike, tokenId: BigNumberish, sender: AddressLike],
    [
      [boolean, boolean, bigint, bigint] & {
        allowFromAll: boolean;
        isApproved: boolean;
        timelock: bigint;
        tempLockExpiry: bigint;
      }
    ],
    "nonpayable"
  >;

  getReleaseTimelockExpiry: TypedContractMethod<
    [contractAddress: AddressLike, tokenId: BigNumberish],
    [bigint],
    "view"
  >;

  isApprovedForBreakBond: TypedContractMethod<
    [
      contractAddress: AddressLike,
      tokenId: BigNumberish,
      operator: AddressLike
    ],
    [boolean],
    "nonpayable"
  >;

  isApprovedForDischarge: TypedContractMethod<
    [
      contractAddress: AddressLike,
      tokenId: BigNumberish,
      operator: AddressLike
    ],
    [boolean],
    "nonpayable"
  >;

  isApprovedForRelease: TypedContractMethod<
    [
      contractAddress: AddressLike,
      tokenId: BigNumberish,
      operator: AddressLike
    ],
    [boolean],
    "nonpayable"
  >;

  isApprovedForTimelock: TypedContractMethod<
    [
      contractAddress: AddressLike,
      tokenId: BigNumberish,
      operator: AddressLike
    ],
    [boolean],
    "nonpayable"
  >;

  isCovalentBondRestricted: TypedContractMethod<
    [contractAddress: AddressLike, tokenId: BigNumberish],
    [boolean],
    "view"
  >;

  isEnergizeRestricted: TypedContractMethod<
    [contractAddress: AddressLike, tokenId: BigNumberish],
    [boolean],
    "view"
  >;

  setApprovalForAll: TypedContractMethod<
    [
      contractAddress: AddressLike,
      tokenId: BigNumberish,
      operator: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  setBreakBondApproval: TypedContractMethod<
    [
      contractAddress: AddressLike,
      tokenId: BigNumberish,
      operator: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  setBreakBondTimelock: TypedContractMethod<
    [
      contractAddress: AddressLike,
      tokenId: BigNumberish,
      unlockBlock: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  setDischargeApproval: TypedContractMethod<
    [
      contractAddress: AddressLike,
      tokenId: BigNumberish,
      operator: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  setDischargeTimelock: TypedContractMethod<
    [
      contractAddress: AddressLike,
      tokenId: BigNumberish,
      unlockBlock: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  setPermsForAllowBreakBond: TypedContractMethod<
    [contractAddress: AddressLike, tokenId: BigNumberish, state: boolean],
    [void],
    "nonpayable"
  >;

  setPermsForAllowDischarge: TypedContractMethod<
    [contractAddress: AddressLike, tokenId: BigNumberish, state: boolean],
    [void],
    "nonpayable"
  >;

  setPermsForAllowRelease: TypedContractMethod<
    [contractAddress: AddressLike, tokenId: BigNumberish, state: boolean],
    [void],
    "nonpayable"
  >;

  setPermsForRestrictBond: TypedContractMethod<
    [contractAddress: AddressLike, tokenId: BigNumberish, state: boolean],
    [void],
    "nonpayable"
  >;

  setPermsForRestrictCharge: TypedContractMethod<
    [contractAddress: AddressLike, tokenId: BigNumberish, state: boolean],
    [void],
    "nonpayable"
  >;

  setReleaseApproval: TypedContractMethod<
    [
      contractAddress: AddressLike,
      tokenId: BigNumberish,
      operator: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  setReleaseTimelock: TypedContractMethod<
    [
      contractAddress: AddressLike,
      tokenId: BigNumberish,
      unlockBlock: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  setTemporaryLock: TypedContractMethod<
    [contractAddress: AddressLike, tokenId: BigNumberish, isLocked: boolean],
    [void],
    "nonpayable"
  >;

  setTimelockApproval: TypedContractMethod<
    [
      contractAddress: AddressLike,
      tokenId: BigNumberish,
      operator: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getBreakBondState"
  ): TypedContractMethod<
    [contractAddress: AddressLike, tokenId: BigNumberish, sender: AddressLike],
    [
      [boolean, boolean, bigint, bigint] & {
        allowFromAll: boolean;
        isApproved: boolean;
        timelock: bigint;
        tempLockExpiry: bigint;
      }
    ],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getBreakBondTimelockExpiry"
  ): TypedContractMethod<
    [contractAddress: AddressLike, tokenId: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getDischargeState"
  ): TypedContractMethod<
    [contractAddress: AddressLike, tokenId: BigNumberish, sender: AddressLike],
    [
      [boolean, boolean, bigint, bigint] & {
        allowFromAll: boolean;
        isApproved: boolean;
        timelock: bigint;
        tempLockExpiry: bigint;
      }
    ],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getDischargeTimelockExpiry"
  ): TypedContractMethod<
    [contractAddress: AddressLike, tokenId: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getReleaseState"
  ): TypedContractMethod<
    [contractAddress: AddressLike, tokenId: BigNumberish, sender: AddressLike],
    [
      [boolean, boolean, bigint, bigint] & {
        allowFromAll: boolean;
        isApproved: boolean;
        timelock: bigint;
        tempLockExpiry: bigint;
      }
    ],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getReleaseTimelockExpiry"
  ): TypedContractMethod<
    [contractAddress: AddressLike, tokenId: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "isApprovedForBreakBond"
  ): TypedContractMethod<
    [
      contractAddress: AddressLike,
      tokenId: BigNumberish,
      operator: AddressLike
    ],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "isApprovedForDischarge"
  ): TypedContractMethod<
    [
      contractAddress: AddressLike,
      tokenId: BigNumberish,
      operator: AddressLike
    ],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "isApprovedForRelease"
  ): TypedContractMethod<
    [
      contractAddress: AddressLike,
      tokenId: BigNumberish,
      operator: AddressLike
    ],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "isApprovedForTimelock"
  ): TypedContractMethod<
    [
      contractAddress: AddressLike,
      tokenId: BigNumberish,
      operator: AddressLike
    ],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "isCovalentBondRestricted"
  ): TypedContractMethod<
    [contractAddress: AddressLike, tokenId: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isEnergizeRestricted"
  ): TypedContractMethod<
    [contractAddress: AddressLike, tokenId: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "setApprovalForAll"
  ): TypedContractMethod<
    [
      contractAddress: AddressLike,
      tokenId: BigNumberish,
      operator: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setBreakBondApproval"
  ): TypedContractMethod<
    [
      contractAddress: AddressLike,
      tokenId: BigNumberish,
      operator: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setBreakBondTimelock"
  ): TypedContractMethod<
    [
      contractAddress: AddressLike,
      tokenId: BigNumberish,
      unlockBlock: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setDischargeApproval"
  ): TypedContractMethod<
    [
      contractAddress: AddressLike,
      tokenId: BigNumberish,
      operator: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setDischargeTimelock"
  ): TypedContractMethod<
    [
      contractAddress: AddressLike,
      tokenId: BigNumberish,
      unlockBlock: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setPermsForAllowBreakBond"
  ): TypedContractMethod<
    [contractAddress: AddressLike, tokenId: BigNumberish, state: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setPermsForAllowDischarge"
  ): TypedContractMethod<
    [contractAddress: AddressLike, tokenId: BigNumberish, state: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setPermsForAllowRelease"
  ): TypedContractMethod<
    [contractAddress: AddressLike, tokenId: BigNumberish, state: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setPermsForRestrictBond"
  ): TypedContractMethod<
    [contractAddress: AddressLike, tokenId: BigNumberish, state: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setPermsForRestrictCharge"
  ): TypedContractMethod<
    [contractAddress: AddressLike, tokenId: BigNumberish, state: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setReleaseApproval"
  ): TypedContractMethod<
    [
      contractAddress: AddressLike,
      tokenId: BigNumberish,
      operator: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setReleaseTimelock"
  ): TypedContractMethod<
    [
      contractAddress: AddressLike,
      tokenId: BigNumberish,
      unlockBlock: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setTemporaryLock"
  ): TypedContractMethod<
    [contractAddress: AddressLike, tokenId: BigNumberish, isLocked: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setTimelockApproval"
  ): TypedContractMethod<
    [
      contractAddress: AddressLike,
      tokenId: BigNumberish,
      operator: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "BreakBondApproval"
  ): TypedContractEvent<
    BreakBondApprovalEvent.InputTuple,
    BreakBondApprovalEvent.OutputTuple,
    BreakBondApprovalEvent.OutputObject
  >;
  getEvent(
    key: "ControllerSet"
  ): TypedContractEvent<
    ControllerSetEvent.InputTuple,
    ControllerSetEvent.OutputTuple,
    ControllerSetEvent.OutputObject
  >;
  getEvent(
    key: "DischargeApproval"
  ): TypedContractEvent<
    DischargeApprovalEvent.InputTuple,
    DischargeApprovalEvent.OutputTuple,
    DischargeApprovalEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "PermsSetForAllowBreakBond"
  ): TypedContractEvent<
    PermsSetForAllowBreakBondEvent.InputTuple,
    PermsSetForAllowBreakBondEvent.OutputTuple,
    PermsSetForAllowBreakBondEvent.OutputObject
  >;
  getEvent(
    key: "PermsSetForAllowDischarge"
  ): TypedContractEvent<
    PermsSetForAllowDischargeEvent.InputTuple,
    PermsSetForAllowDischargeEvent.OutputTuple,
    PermsSetForAllowDischargeEvent.OutputObject
  >;
  getEvent(
    key: "PermsSetForAllowRelease"
  ): TypedContractEvent<
    PermsSetForAllowReleaseEvent.InputTuple,
    PermsSetForAllowReleaseEvent.OutputTuple,
    PermsSetForAllowReleaseEvent.OutputObject
  >;
  getEvent(
    key: "PermsSetForRestrictBond"
  ): TypedContractEvent<
    PermsSetForRestrictBondEvent.InputTuple,
    PermsSetForRestrictBondEvent.OutputTuple,
    PermsSetForRestrictBondEvent.OutputObject
  >;
  getEvent(
    key: "PermsSetForRestrictCharge"
  ): TypedContractEvent<
    PermsSetForRestrictChargeEvent.InputTuple,
    PermsSetForRestrictChargeEvent.OutputTuple,
    PermsSetForRestrictChargeEvent.OutputObject
  >;
  getEvent(
    key: "ReleaseApproval"
  ): TypedContractEvent<
    ReleaseApprovalEvent.InputTuple,
    ReleaseApprovalEvent.OutputTuple,
    ReleaseApprovalEvent.OutputObject
  >;
  getEvent(
    key: "TimelockApproval"
  ): TypedContractEvent<
    TimelockApprovalEvent.InputTuple,
    TimelockApprovalEvent.OutputTuple,
    TimelockApprovalEvent.OutputObject
  >;
  getEvent(
    key: "TokenBreakBondTimelock"
  ): TypedContractEvent<
    TokenBreakBondTimelockEvent.InputTuple,
    TokenBreakBondTimelockEvent.OutputTuple,
    TokenBreakBondTimelockEvent.OutputObject
  >;
  getEvent(
    key: "TokenDischargeTimelock"
  ): TypedContractEvent<
    TokenDischargeTimelockEvent.InputTuple,
    TokenDischargeTimelockEvent.OutputTuple,
    TokenDischargeTimelockEvent.OutputObject
  >;
  getEvent(
    key: "TokenReleaseTimelock"
  ): TypedContractEvent<
    TokenReleaseTimelockEvent.InputTuple,
    TokenReleaseTimelockEvent.OutputTuple,
    TokenReleaseTimelockEvent.OutputObject
  >;
  getEvent(
    key: "TokenTempLock"
  ): TypedContractEvent<
    TokenTempLockEvent.InputTuple,
    TokenTempLockEvent.OutputTuple,
    TokenTempLockEvent.OutputObject
  >;

  filters: {
    "BreakBondApproval(address,uint256,address,address)": TypedContractEvent<
      BreakBondApprovalEvent.InputTuple,
      BreakBondApprovalEvent.OutputTuple,
      BreakBondApprovalEvent.OutputObject
    >;
    BreakBondApproval: TypedContractEvent<
      BreakBondApprovalEvent.InputTuple,
      BreakBondApprovalEvent.OutputTuple,
      BreakBondApprovalEvent.OutputObject
    >;

    "ControllerSet(address,string)": TypedContractEvent<
      ControllerSetEvent.InputTuple,
      ControllerSetEvent.OutputTuple,
      ControllerSetEvent.OutputObject
    >;
    ControllerSet: TypedContractEvent<
      ControllerSetEvent.InputTuple,
      ControllerSetEvent.OutputTuple,
      ControllerSetEvent.OutputObject
    >;

    "DischargeApproval(address,uint256,address,address)": TypedContractEvent<
      DischargeApprovalEvent.InputTuple,
      DischargeApprovalEvent.OutputTuple,
      DischargeApprovalEvent.OutputObject
    >;
    DischargeApproval: TypedContractEvent<
      DischargeApprovalEvent.InputTuple,
      DischargeApprovalEvent.OutputTuple,
      DischargeApprovalEvent.OutputObject
    >;

    "Initialized(address)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "PermsSetForAllowBreakBond(address,uint256,bool)": TypedContractEvent<
      PermsSetForAllowBreakBondEvent.InputTuple,
      PermsSetForAllowBreakBondEvent.OutputTuple,
      PermsSetForAllowBreakBondEvent.OutputObject
    >;
    PermsSetForAllowBreakBond: TypedContractEvent<
      PermsSetForAllowBreakBondEvent.InputTuple,
      PermsSetForAllowBreakBondEvent.OutputTuple,
      PermsSetForAllowBreakBondEvent.OutputObject
    >;

    "PermsSetForAllowDischarge(address,uint256,bool)": TypedContractEvent<
      PermsSetForAllowDischargeEvent.InputTuple,
      PermsSetForAllowDischargeEvent.OutputTuple,
      PermsSetForAllowDischargeEvent.OutputObject
    >;
    PermsSetForAllowDischarge: TypedContractEvent<
      PermsSetForAllowDischargeEvent.InputTuple,
      PermsSetForAllowDischargeEvent.OutputTuple,
      PermsSetForAllowDischargeEvent.OutputObject
    >;

    "PermsSetForAllowRelease(address,uint256,bool)": TypedContractEvent<
      PermsSetForAllowReleaseEvent.InputTuple,
      PermsSetForAllowReleaseEvent.OutputTuple,
      PermsSetForAllowReleaseEvent.OutputObject
    >;
    PermsSetForAllowRelease: TypedContractEvent<
      PermsSetForAllowReleaseEvent.InputTuple,
      PermsSetForAllowReleaseEvent.OutputTuple,
      PermsSetForAllowReleaseEvent.OutputObject
    >;

    "PermsSetForRestrictBond(address,uint256,bool)": TypedContractEvent<
      PermsSetForRestrictBondEvent.InputTuple,
      PermsSetForRestrictBondEvent.OutputTuple,
      PermsSetForRestrictBondEvent.OutputObject
    >;
    PermsSetForRestrictBond: TypedContractEvent<
      PermsSetForRestrictBondEvent.InputTuple,
      PermsSetForRestrictBondEvent.OutputTuple,
      PermsSetForRestrictBondEvent.OutputObject
    >;

    "PermsSetForRestrictCharge(address,uint256,bool)": TypedContractEvent<
      PermsSetForRestrictChargeEvent.InputTuple,
      PermsSetForRestrictChargeEvent.OutputTuple,
      PermsSetForRestrictChargeEvent.OutputObject
    >;
    PermsSetForRestrictCharge: TypedContractEvent<
      PermsSetForRestrictChargeEvent.InputTuple,
      PermsSetForRestrictChargeEvent.OutputTuple,
      PermsSetForRestrictChargeEvent.OutputObject
    >;

    "ReleaseApproval(address,uint256,address,address)": TypedContractEvent<
      ReleaseApprovalEvent.InputTuple,
      ReleaseApprovalEvent.OutputTuple,
      ReleaseApprovalEvent.OutputObject
    >;
    ReleaseApproval: TypedContractEvent<
      ReleaseApprovalEvent.InputTuple,
      ReleaseApprovalEvent.OutputTuple,
      ReleaseApprovalEvent.OutputObject
    >;

    "TimelockApproval(address,uint256,address,address)": TypedContractEvent<
      TimelockApprovalEvent.InputTuple,
      TimelockApprovalEvent.OutputTuple,
      TimelockApprovalEvent.OutputObject
    >;
    TimelockApproval: TypedContractEvent<
      TimelockApprovalEvent.InputTuple,
      TimelockApprovalEvent.OutputTuple,
      TimelockApprovalEvent.OutputObject
    >;

    "TokenBreakBondTimelock(address,uint256,address,uint256)": TypedContractEvent<
      TokenBreakBondTimelockEvent.InputTuple,
      TokenBreakBondTimelockEvent.OutputTuple,
      TokenBreakBondTimelockEvent.OutputObject
    >;
    TokenBreakBondTimelock: TypedContractEvent<
      TokenBreakBondTimelockEvent.InputTuple,
      TokenBreakBondTimelockEvent.OutputTuple,
      TokenBreakBondTimelockEvent.OutputObject
    >;

    "TokenDischargeTimelock(address,uint256,address,uint256)": TypedContractEvent<
      TokenDischargeTimelockEvent.InputTuple,
      TokenDischargeTimelockEvent.OutputTuple,
      TokenDischargeTimelockEvent.OutputObject
    >;
    TokenDischargeTimelock: TypedContractEvent<
      TokenDischargeTimelockEvent.InputTuple,
      TokenDischargeTimelockEvent.OutputTuple,
      TokenDischargeTimelockEvent.OutputObject
    >;

    "TokenReleaseTimelock(address,uint256,address,uint256)": TypedContractEvent<
      TokenReleaseTimelockEvent.InputTuple,
      TokenReleaseTimelockEvent.OutputTuple,
      TokenReleaseTimelockEvent.OutputObject
    >;
    TokenReleaseTimelock: TypedContractEvent<
      TokenReleaseTimelockEvent.InputTuple,
      TokenReleaseTimelockEvent.OutputTuple,
      TokenReleaseTimelockEvent.OutputObject
    >;

    "TokenTempLock(address,uint256,uint256)": TypedContractEvent<
      TokenTempLockEvent.InputTuple,
      TokenTempLockEvent.OutputTuple,
      TokenTempLockEvent.OutputObject
    >;
    TokenTempLock: TypedContractEvent<
      TokenTempLockEvent.InputTuple,
      TokenTempLockEvent.OutputTuple,
      TokenTempLockEvent.OutputObject
    >;
  };
}
