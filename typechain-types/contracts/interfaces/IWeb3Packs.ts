/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace IWeb3Packs {
  export type ERC20SwapOrderStruct = {
    inputTokenAddress: AddressLike;
    outputTokenAddress: AddressLike;
    inputTokenAmount: BigNumberish;
    uniSwapPoolFee: BigNumberish;
    deadline: BigNumberish;
    amountOutMinimum: BigNumberish;
    sqrtPriceLimitX96: BigNumberish;
  };

  export type ERC20SwapOrderStructOutput = [
    inputTokenAddress: string,
    outputTokenAddress: string,
    inputTokenAmount: bigint,
    uniSwapPoolFee: bigint,
    deadline: bigint,
    amountOutMinimum: bigint,
    sqrtPriceLimitX96: bigint
  ] & {
    inputTokenAddress: string;
    outputTokenAddress: string;
    inputTokenAmount: bigint;
    uniSwapPoolFee: bigint;
    deadline: bigint;
    amountOutMinimum: bigint;
    sqrtPriceLimitX96: bigint;
  };

  export type ERC721MintOrdersStruct = {
    erc721TokenAddress: AddressLike;
    basketManagerId: string;
    tokenMetadataUri: string;
  };

  export type ERC721MintOrdersStructOutput = [
    erc721TokenAddress: string,
    basketManagerId: string,
    tokenMetadataUri: string
  ] & {
    erc721TokenAddress: string;
    basketManagerId: string;
    tokenMetadataUri: string;
  };

  export type NFTStruct = { tokenAddress: AddressLike; id: BigNumberish };

  export type NFTStructOutput = [tokenAddress: string, id: bigint] & {
    tokenAddress: string;
    id: bigint;
  };

  export type Web3PackOrderStruct = {
    erc20TokenAddresses: AddressLike[];
    nfts: IWeb3Packs.NFTStruct[];
  };

  export type Web3PackOrderStructOutput = [
    erc20TokenAddresses: string[],
    nfts: IWeb3Packs.NFTStructOutput[]
  ] & { erc20TokenAddresses: string[]; nfts: IWeb3Packs.NFTStructOutput[] };
}

export interface IWeb3PacksInterface extends Interface {
  getFunction(nameOrSignature: "bundle" | "unbundle"): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ChargedParticlesSet"
      | "ChargedStateSet"
      | "PackBundled"
      | "PackUnbundled"
      | "ProtonSet"
      | "UniswapRouterSet"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "bundle",
    values: [
      AddressLike,
      string,
      IWeb3Packs.ERC20SwapOrderStruct[],
      IWeb3Packs.ERC721MintOrdersStruct[],
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "unbundle",
    values: [
      AddressLike,
      AddressLike,
      BigNumberish,
      IWeb3Packs.Web3PackOrderStruct
    ]
  ): string;

  decodeFunctionResult(functionFragment: "bundle", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unbundle", data: BytesLike): Result;
}

export namespace ChargedParticlesSetEvent {
  export type InputTuple = [chargedParticles: AddressLike];
  export type OutputTuple = [chargedParticles: string];
  export interface OutputObject {
    chargedParticles: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ChargedStateSetEvent {
  export type InputTuple = [chargedState: AddressLike];
  export type OutputTuple = [chargedState: string];
  export interface OutputObject {
    chargedState: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PackBundledEvent {
  export type InputTuple = [tokenId: BigNumberish, receiver: AddressLike];
  export type OutputTuple = [tokenId: bigint, receiver: string];
  export interface OutputObject {
    tokenId: bigint;
    receiver: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PackUnbundledEvent {
  export type InputTuple = [tokenId: BigNumberish, receiver: AddressLike];
  export type OutputTuple = [tokenId: bigint, receiver: string];
  export interface OutputObject {
    tokenId: bigint;
    receiver: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProtonSetEvent {
  export type InputTuple = [proton: AddressLike];
  export type OutputTuple = [proton: string];
  export interface OutputObject {
    proton: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UniswapRouterSetEvent {
  export type InputTuple = [router: AddressLike];
  export type OutputTuple = [router: string];
  export interface OutputObject {
    router: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IWeb3Packs extends BaseContract {
  connect(runner?: ContractRunner | null): IWeb3Packs;
  waitForDeployment(): Promise<this>;

  interface: IWeb3PacksInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  bundle: TypedContractMethod<
    [
      receiver: AddressLike,
      tokenMetaUri: string,
      erc20SwapOrders: IWeb3Packs.ERC20SwapOrderStruct[],
      erc721MintOrders: IWeb3Packs.ERC721MintOrdersStruct[],
      unBundleGasAmount: BigNumberish
    ],
    [bigint],
    "payable"
  >;

  unbundle: TypedContractMethod<
    [
      receiver: AddressLike,
      contractAddress: AddressLike,
      tokenId: BigNumberish,
      web3PackOrder: IWeb3Packs.Web3PackOrderStruct
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "bundle"
  ): TypedContractMethod<
    [
      receiver: AddressLike,
      tokenMetaUri: string,
      erc20SwapOrders: IWeb3Packs.ERC20SwapOrderStruct[],
      erc721MintOrders: IWeb3Packs.ERC721MintOrdersStruct[],
      unBundleGasAmount: BigNumberish
    ],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "unbundle"
  ): TypedContractMethod<
    [
      receiver: AddressLike,
      contractAddress: AddressLike,
      tokenId: BigNumberish,
      web3PackOrder: IWeb3Packs.Web3PackOrderStruct
    ],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "ChargedParticlesSet"
  ): TypedContractEvent<
    ChargedParticlesSetEvent.InputTuple,
    ChargedParticlesSetEvent.OutputTuple,
    ChargedParticlesSetEvent.OutputObject
  >;
  getEvent(
    key: "ChargedStateSet"
  ): TypedContractEvent<
    ChargedStateSetEvent.InputTuple,
    ChargedStateSetEvent.OutputTuple,
    ChargedStateSetEvent.OutputObject
  >;
  getEvent(
    key: "PackBundled"
  ): TypedContractEvent<
    PackBundledEvent.InputTuple,
    PackBundledEvent.OutputTuple,
    PackBundledEvent.OutputObject
  >;
  getEvent(
    key: "PackUnbundled"
  ): TypedContractEvent<
    PackUnbundledEvent.InputTuple,
    PackUnbundledEvent.OutputTuple,
    PackUnbundledEvent.OutputObject
  >;
  getEvent(
    key: "ProtonSet"
  ): TypedContractEvent<
    ProtonSetEvent.InputTuple,
    ProtonSetEvent.OutputTuple,
    ProtonSetEvent.OutputObject
  >;
  getEvent(
    key: "UniswapRouterSet"
  ): TypedContractEvent<
    UniswapRouterSetEvent.InputTuple,
    UniswapRouterSetEvent.OutputTuple,
    UniswapRouterSetEvent.OutputObject
  >;

  filters: {
    "ChargedParticlesSet(address)": TypedContractEvent<
      ChargedParticlesSetEvent.InputTuple,
      ChargedParticlesSetEvent.OutputTuple,
      ChargedParticlesSetEvent.OutputObject
    >;
    ChargedParticlesSet: TypedContractEvent<
      ChargedParticlesSetEvent.InputTuple,
      ChargedParticlesSetEvent.OutputTuple,
      ChargedParticlesSetEvent.OutputObject
    >;

    "ChargedStateSet(address)": TypedContractEvent<
      ChargedStateSetEvent.InputTuple,
      ChargedStateSetEvent.OutputTuple,
      ChargedStateSetEvent.OutputObject
    >;
    ChargedStateSet: TypedContractEvent<
      ChargedStateSetEvent.InputTuple,
      ChargedStateSetEvent.OutputTuple,
      ChargedStateSetEvent.OutputObject
    >;

    "PackBundled(uint256,address)": TypedContractEvent<
      PackBundledEvent.InputTuple,
      PackBundledEvent.OutputTuple,
      PackBundledEvent.OutputObject
    >;
    PackBundled: TypedContractEvent<
      PackBundledEvent.InputTuple,
      PackBundledEvent.OutputTuple,
      PackBundledEvent.OutputObject
    >;

    "PackUnbundled(uint256,address)": TypedContractEvent<
      PackUnbundledEvent.InputTuple,
      PackUnbundledEvent.OutputTuple,
      PackUnbundledEvent.OutputObject
    >;
    PackUnbundled: TypedContractEvent<
      PackUnbundledEvent.InputTuple,
      PackUnbundledEvent.OutputTuple,
      PackUnbundledEvent.OutputObject
    >;

    "ProtonSet(address)": TypedContractEvent<
      ProtonSetEvent.InputTuple,
      ProtonSetEvent.OutputTuple,
      ProtonSetEvent.OutputObject
    >;
    ProtonSet: TypedContractEvent<
      ProtonSetEvent.InputTuple,
      ProtonSetEvent.OutputTuple,
      ProtonSetEvent.OutputObject
    >;

    "UniswapRouterSet(address)": TypedContractEvent<
      UniswapRouterSetEvent.InputTuple,
      UniswapRouterSetEvent.OutputTuple,
      UniswapRouterSetEvent.OutputObject
    >;
    UniswapRouterSet: TypedContractEvent<
      UniswapRouterSetEvent.InputTuple,
      UniswapRouterSetEvent.OutputTuple,
      UniswapRouterSetEvent.OutputObject
    >;
  };
}
